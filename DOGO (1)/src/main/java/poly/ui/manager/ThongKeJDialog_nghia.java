/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JDialog.java to edit this template
 */
package poly.ui.manager;

import poly.controller.ThongKeController;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.data.category.DefaultCategoryDataset;

/**
 *
 * @author Nghia
 */
public class ThongKeJDialog_nghia extends javax.swing.JDialog implements ThongKeController {

    /**
     * Creates new form ThongKeJDialog
     */
    public ThongKeJDialog_nghia(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        loadLoaiSanPham();
        cbxKhoangThoiGianActionPerformed(null);
        cbxKhoangThoiGian1ActionPerformed(null); // Auto load 'Hôm nay' cho tab Đơn Hàng
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane3 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        cbxKhoangThoiGian = new javax.swing.JComboBox<>();
        btnLoc = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        txtTuNgay = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        txtDenNgay = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        panelDoanhThuChart = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        txtTop = new javax.swing.JTextField();
        cbxLoaiSP = new javax.swing.JComboBox<>();
        btnLocLoai = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        btnTimTop = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();
        panelBanChay = new javax.swing.JPanel();
        panelTonKho = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        txtTuNgayDH = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        txtDenNgayDH = new javax.swing.JTextField();
        cbxTrangThaiDonHang = new javax.swing.JComboBox<>();
        btnLocDonHang = new javax.swing.JButton();
        jScrollPane5 = new javax.swing.JScrollPane();
        tblDonHang = new javax.swing.JTable();
        cbxKhoangThoiGian1 = new javax.swing.JComboBox<>();
        panelDonHangChart = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        cbxLoaiBaoCao = new javax.swing.JComboBox<>();
        jLabel14 = new javax.swing.JLabel();
        cbxDinhDang = new javax.swing.JComboBox<>();
        btnXemTruoc = new javax.swing.JButton();
        btnXuatBaoCao = new javax.swing.JButton();

        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane3.setViewportView(jTable2);

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        cbxKhoangThoiGian.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Hôm nay", "Tuần Này", "Tháng này", "Nửa Năm", "Năm Nay", "Tuỳ chọn" }));
        cbxKhoangThoiGian.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbxKhoangThoiGianActionPerformed(evt);
            }
        });

        btnLoc.setText("Lọc");
        btnLoc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLocActionPerformed(evt);
            }
        });

        jLabel1.setText("Từ Ngày");

        txtTuNgay.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtTuNgayActionPerformed(evt);
            }
        });

        jLabel2.setText("Đến Ngày");

        txtDenNgay.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtDenNgayActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel3.setText("Thống Kê Doanh Thu");

        javax.swing.GroupLayout panelDoanhThuChartLayout = new javax.swing.GroupLayout(panelDoanhThuChart);
        panelDoanhThuChart.setLayout(panelDoanhThuChartLayout);
        panelDoanhThuChartLayout.setHorizontalGroup(
            panelDoanhThuChartLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        panelDoanhThuChartLayout.setVerticalGroup(
            panelDoanhThuChartLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 261, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(panelDoanhThuChart, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(26, 26, 26)
                        .addComponent(txtTuNgay, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(27, 27, 27)
                        .addComponent(jLabel2)
                        .addGap(18, 18, 18)
                        .addComponent(txtDenNgay, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 34, Short.MAX_VALUE)
                        .addComponent(cbxKhoangThoiGian, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnLoc, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(226, 226, 226)
                        .addComponent(jLabel3)
                        .addGap(1, 270, Short.MAX_VALUE))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel3)
                .addGap(29, 29, 29)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(cbxKhoangThoiGian, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnLoc)
                    .addComponent(txtTuNgay, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(txtDenNgay, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(panelDoanhThuChart, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(260, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Doanh Thu", jPanel1);

        jLabel4.setText("Top Sản Phẩm");

        txtTop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtTopActionPerformed(evt);
            }
        });

        cbxLoaiSP.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Tất cả", "Item 1", "Item 2", "Item 3", "Item 4" }));
        cbxLoaiSP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbxLoaiSPActionPerformed(evt);
            }
        });

        btnLocLoai.setText("Tìm Loại");
        btnLocLoai.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLocLoaiActionPerformed(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel5.setText("Sản Phẩm Bán Chạy Nhất");

        jLabel6.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N

        jLabel7.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel7.setText("Sản phẩm tồn kho nhiều nhất");

        btnTimTop.setText("Tìm Kiếm");
        btnTimTop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTimTopActionPerformed(evt);
            }
        });

        jLabel8.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel8.setText("Thống Kê Sản Phẩm");

        panelBanChay.setLayout(new java.awt.BorderLayout());

        panelTonKho.setLayout(new java.awt.BorderLayout());

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel8)
                .addGap(243, 243, 243))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(panelTonKho, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(panelBanChay, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addGap(18, 18, 18)
                        .addComponent(txtTop, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnTimTop)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 294, Short.MAX_VALUE)
                        .addComponent(cbxLoaiSP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnLocLoai)
                        .addGap(34, 34, 34))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(199, 199, 199)
                        .addComponent(jLabel6)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel5)
                            .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 214, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addComponent(jLabel8)
                .addGap(27, 27, 27)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtTop, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4)
                    .addComponent(cbxLoaiSP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnLocLoai)
                    .addComponent(btnTimTop))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(panelBanChay, javax.swing.GroupLayout.PREFERRED_SIZE, 216, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(panelTonKho, javax.swing.GroupLayout.DEFAULT_SIZE, 228, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("Sản Phẩm", jPanel2);

        jLabel9.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel9.setText("Thống Kê Đơn Hàng");

        jLabel10.setText("Từ Ngày");

        txtTuNgayDH.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtTuNgayDHActionPerformed(evt);
            }
        });

        jLabel11.setText("Đến Ngày");

        txtDenNgayDH.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtDenNgayDHActionPerformed(evt);
            }
        });

        cbxTrangThaiDonHang.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Tất Cả", "Pending", "Processing", "Shipped", "Completed", "Cancelled" }));
        cbxTrangThaiDonHang.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbxTrangThaiDonHangActionPerformed(evt);
            }
        });

        btnLocDonHang.setText("Lọc");
        btnLocDonHang.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLocDonHangActionPerformed(evt);
            }
        });

        tblDonHang.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Mã Đơn", "Ngày", "Khách Hàng", "Tổng Tiền", "Trạng Thái"
            }
        ));
        jScrollPane5.setViewportView(tblDonHang);

        cbxKhoangThoiGian1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Hôm nay", "Tuần Này", "Tháng này", "Nửa Năm", "Năm Nay", "Tuỳ chọn" }));
        cbxKhoangThoiGian1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbxKhoangThoiGian1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelDonHangChartLayout = new javax.swing.GroupLayout(panelDonHangChart);
        panelDonHangChart.setLayout(panelDonHangChartLayout);
        panelDonHangChartLayout.setHorizontalGroup(
            panelDonHangChartLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        panelDonHangChartLayout.setVerticalGroup(
            panelDonHangChartLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 248, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane5)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel9)
                .addGap(238, 238, 238))
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(panelDonHangChart, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel10)
                        .addGap(26, 26, 26)
                        .addComponent(txtTuNgayDH, javax.swing.GroupLayout.DEFAULT_SIZE, 166, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel11)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtDenNgayDH, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cbxKhoangThoiGian1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cbxTrangThaiDonHang, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnLocDonHang)))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel9)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10)
                    .addComponent(cbxTrangThaiDonHang, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnLocDonHang)
                    .addComponent(txtTuNgayDH, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel11)
                    .addComponent(txtDenNgayDH, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cbxKhoangThoiGian1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 224, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(panelDonHangChart, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(48, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Đơn Hàng", jPanel3);

        jLabel12.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel12.setText("Xuất Báo Cáo");

        jLabel13.setText("Loại Báo Cáo");

        cbxLoaiBaoCao.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Doanh thu", "Sản phẩm", "Đơn hàng" }));
        cbxLoaiBaoCao.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbxLoaiBaoCaoActionPerformed(evt);
            }
        });

        jLabel14.setText("Định dạng");

        cbxDinhDang.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "PDF", "Excel", "CSV" }));
        cbxDinhDang.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbxDinhDangActionPerformed(evt);
            }
        });

        btnXemTruoc.setText("Xem Trước");
        btnXemTruoc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnXemTruocActionPerformed(evt);
            }
        });

        btnXuatBaoCao.setText("Xuất báo cáo");
        btnXuatBaoCao.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnXuatBaoCaoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(37, 37, 37)
                .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(cbxLoaiBaoCao, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(86, 86, 86)
                .addComponent(jLabel14)
                .addGap(28, 28, 28)
                .addComponent(cbxDinhDang, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 124, Short.MAX_VALUE)
                .addComponent(btnXemTruoc)
                .addGap(62, 62, 62))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                        .addComponent(jLabel12)
                        .addGap(281, 281, 281))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                        .addComponent(btnXuatBaoCao)
                        .addGap(306, 306, 306))))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel12)
                .addGap(36, 36, 36)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel13)
                    .addComponent(cbxLoaiBaoCao, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel14)
                    .addComponent(cbxDinhDang, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnXemTruoc))
                .addGap(61, 61, 61)
                .addComponent(btnXuatBaoCao)
                .addContainerGap(442, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Xuất File", jPanel4);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnLocActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLocActionPerformed
        showDoanhThuChart();
    }//GEN-LAST:event_btnLocActionPerformed

    private void cbxKhoangThoiGianActionPerformed(java.awt.event.ActionEvent evt) {
        String selected = cbxKhoangThoiGian.getSelectedItem().toString();
        java.util.Calendar cal = java.util.Calendar.getInstance();
        java.text.SimpleDateFormat sdf = new java.text.SimpleDateFormat("yyyy-MM-dd");
        String tuNgay = "", denNgay = "";

        switch (selected) {
            case "Tuỳ chọn":
                // Không set txtTuNgay, txtDenNgay, cho phép nhập tự do
                break;
            case "Tất Cả":
                txtTuNgay.setText("");
                txtDenNgay.setText("");
                break;
            case "Hôm nay":
                tuNgay = sdf.format(cal.getTime());
                denNgay = tuNgay;
                txtTuNgay.setText(tuNgay);
                txtDenNgay.setText(denNgay);
                break;
            case "Tuần Này":
                cal.set(java.util.Calendar.DAY_OF_WEEK, cal.getFirstDayOfWeek());
                tuNgay = sdf.format(cal.getTime());
                cal.add(java.util.Calendar.DAY_OF_WEEK, 6);
                denNgay = sdf.format(cal.getTime());
                txtTuNgay.setText(tuNgay);
                txtDenNgay.setText(denNgay);
                break;
            case "Tháng này":
                cal.set(java.util.Calendar.DAY_OF_MONTH, 1);
                tuNgay = sdf.format(cal.getTime());
                cal.set(java.util.Calendar.DAY_OF_MONTH, cal.getActualMaximum(java.util.Calendar.DAY_OF_MONTH));
                denNgay = sdf.format(cal.getTime());
                txtTuNgay.setText(tuNgay);
                txtDenNgay.setText(denNgay);
                break;
            case "Nửa Năm":
                denNgay = sdf.format(cal.getTime());
                cal.add(java.util.Calendar.MONTH, -5);
                cal.set(java.util.Calendar.DAY_OF_MONTH, 1);
                tuNgay = sdf.format(cal.getTime());
                txtTuNgay.setText(tuNgay);
                txtDenNgay.setText(denNgay);
                break;
            case "Năm Nay":
                cal.set(java.util.Calendar.MONTH, 0);
                cal.set(java.util.Calendar.DAY_OF_MONTH, 1);
                tuNgay = sdf.format(cal.getTime());
                cal = java.util.Calendar.getInstance();
                denNgay = sdf.format(cal.getTime());
                txtTuNgay.setText(tuNgay);
                txtDenNgay.setText(denNgay);
                break;
            default:
                txtTuNgay.setText("");
                txtDenNgay.setText("");
                break;
        }
        showDoanhThuChart();
    }                                                 

    private void cbxTrangThaiDonHangActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbxTrangThaiDonHangActionPerformed
        fillDonHangTable();
        String status = cbxTrangThaiDonHang.getSelectedItem().toString();
        showDonHangChart(status);
    }//GEN-LAST:event_cbxTrangThaiDonHangActionPerformed

    private void btnLocDonHangActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLocDonHangActionPerformed
        fillDonHangTable();
        String status = cbxTrangThaiDonHang.getSelectedItem().toString();
        showDonHangChart(status);
    }//GEN-LAST:event_btnLocDonHangActionPerformed

    private void cbxKhoangThoiGian1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbxKhoangThoiGian1ActionPerformed
        String selected = cbxKhoangThoiGian1.getSelectedItem().toString();
        java.util.Calendar cal = java.util.Calendar.getInstance();
        java.text.SimpleDateFormat sdf = new java.text.SimpleDateFormat("yyyy-MM-dd");
        String tuNgay = "", denNgay = "";
        switch (selected) {
            case "Tuỳ chọn":
                // Không set txtTuNgayDH, txtDenNgayDH, không gọi fillDonHangTable, showDonHangChart
                return;
            case "Hôm nay":
                tuNgay = sdf.format(cal.getTime());
                denNgay = tuNgay;
                break;
            case "Tuần Này":
                cal.set(java.util.Calendar.DAY_OF_WEEK, cal.getFirstDayOfWeek());
                tuNgay = sdf.format(cal.getTime());
                cal.add(java.util.Calendar.DAY_OF_WEEK, 6);
                denNgay = sdf.format(cal.getTime());
                break;
            case "Tháng này":
                cal.set(java.util.Calendar.DAY_OF_MONTH, 1);
                tuNgay = sdf.format(cal.getTime());
                cal.set(java.util.Calendar.DAY_OF_MONTH, cal.getActualMaximum(java.util.Calendar.DAY_OF_MONTH));
                denNgay = sdf.format(cal.getTime());
                break;
            case "Nửa Năm":
                denNgay = sdf.format(cal.getTime());
                cal.add(java.util.Calendar.MONTH, -5);
                cal.set(java.util.Calendar.DAY_OF_MONTH, 1);
                tuNgay = sdf.format(cal.getTime());
                break;
            case "Năm Nay":
                cal.set(java.util.Calendar.MONTH, 0);
                cal.set(java.util.Calendar.DAY_OF_MONTH, 1);
                tuNgay = sdf.format(cal.getTime());
                cal = java.util.Calendar.getInstance();
                denNgay = sdf.format(cal.getTime());
                break;
            default:
                tuNgay = "";
                denNgay = "";
                break;
        }
        txtTuNgayDH.setText(tuNgay);
        txtDenNgayDH.setText(denNgay);
        fillDonHangTable();
        String status = cbxTrangThaiDonHang.getSelectedItem().toString();
        showDonHangChart(status);
    }//GEN-LAST:event_cbxKhoangThoiGian1ActionPerformed

    private void txtTuNgayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtTuNgayActionPerformed
        showDoanhThuChart();
    }//GEN-LAST:event_txtTuNgayActionPerformed

    private void txtDenNgayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtDenNgayActionPerformed
        showDoanhThuChart();
    }//GEN-LAST:event_txtDenNgayActionPerformed

    private void btnTimTopActionPerformed(java.awt.event.ActionEvent evt) {
        updateSanPhamCharts();
    }                                         

    private void txtTopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtTopActionPerformed
        updateSanPhamCharts();
    }//GEN-LAST:event_txtTopActionPerformed

    private void cbxLoaiSPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbxLoaiSPActionPerformed
        updateSanPhamCharts();
    }//GEN-LAST:event_cbxLoaiSPActionPerformed

    private void btnLocLoaiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLocLoaiActionPerformed
        updateSanPhamCharts();
    }//GEN-LAST:event_btnLocLoaiActionPerformed

    private void txtTuNgayDHActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtTuNgayDHActionPerformed
        fillDonHangTable();
    }//GEN-LAST:event_txtTuNgayDHActionPerformed

    private void txtDenNgayDHActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtDenNgayDHActionPerformed
        fillDonHangTable();
    }//GEN-LAST:event_txtDenNgayDHActionPerformed

    private void cbxLoaiBaoCaoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbxLoaiBaoCaoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cbxLoaiBaoCaoActionPerformed

    private void cbxDinhDangActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbxDinhDangActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cbxDinhDangActionPerformed

    private void btnXemTruocActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnXemTruocActionPerformed
        String loaiBaoCao = cbxLoaiBaoCao.getSelectedItem().toString();
        String dinhDang = cbxDinhDang.getSelectedItem().toString();
        java.time.LocalDateTime from, to;
        if ("Đơn hàng".equalsIgnoreCase(loaiBaoCao)) {
            from = parseDate(txtTuNgayDH.getText());
            to = parseDate(txtDenNgayDH.getText());
        } else if ("Doanh thu".equalsIgnoreCase(loaiBaoCao)) {
            from = parseDate(txtTuNgay.getText());
            to = parseDate(txtDenNgay.getText());
        } else {
            // Sản phẩm: không cần ngày, truyền ngày hiện tại
            from = java.time.LocalDateTime.now();
            to = java.time.LocalDateTime.now();
        }
        byte[] data = xuatBaoCao(loaiBaoCao, dinhDang, from, to);
        javax.swing.JOptionPane.showMessageDialog(this, new String(data), "Xem trước báo cáo", javax.swing.JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_btnXemTruocActionPerformed

    private void btnXuatBaoCaoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnXuatBaoCaoActionPerformed
        String loaiBaoCao = cbxLoaiBaoCao.getSelectedItem().toString();
        String dinhDang = cbxDinhDang.getSelectedItem().toString();
        java.time.LocalDateTime from, to;
        if ("Đơn hàng".equalsIgnoreCase(loaiBaoCao)) {
            from = parseDate(txtTuNgayDH.getText());
            to = parseDate(txtDenNgayDH.getText());
        } else if ("Doanh thu".equalsIgnoreCase(loaiBaoCao)) {
            from = parseDate(txtTuNgay.getText());
            to = parseDate(txtDenNgay.getText());
        } else {
            from = java.time.LocalDateTime.now();
            to = java.time.LocalDateTime.now();
        }
        byte[] data;
        String fileExt = ".csv";
        if (dinhDang.equalsIgnoreCase("PDF")) {
            if ("Đơn hàng".equalsIgnoreCase(loaiBaoCao)) {
                data = xuatBaoCaoDonHangPDF(from, to);
                fileExt = ".pdf";
            } else if ("Doanh thu".equalsIgnoreCase(loaiBaoCao)) {
                data = xuatBaoCaoDoanhThuPDF(from, to);
                fileExt = ".pdf";
            } else if ("Sản phẩm".equalsIgnoreCase(loaiBaoCao)) {
                data = xuatBaoCaoSanPhamPDF();
                fileExt = ".pdf";
            } else {
                javax.swing.JOptionPane.showMessageDialog(this, "Hiện tại chỉ hỗ trợ xuất PDF cho các loại báo cáo chính.", "Thông báo", javax.swing.JOptionPane.WARNING_MESSAGE);
                return;
            }
        } else if (!dinhDang.equalsIgnoreCase("CSV")) {
            javax.swing.JOptionPane.showMessageDialog(this, "Hiện tại chỉ hỗ trợ xuất báo cáo dạng CSV (Excel) hoặc PDF.", "Thông báo", javax.swing.JOptionPane.WARNING_MESSAGE);
            return;
        } else {
            data = xuatBaoCao(loaiBaoCao, dinhDang, from, to);
        }
        javax.swing.JFileChooser chooser = new javax.swing.JFileChooser();
        if (chooser.showSaveDialog(this) == javax.swing.JFileChooser.APPROVE_OPTION) {
            java.io.File file = chooser.getSelectedFile();
            // Đảm bảo file có đuôi đúng
            if (!file.getName().toLowerCase().endsWith(fileExt)) {
                file = new java.io.File(file.getAbsolutePath() + fileExt);
            }
            try (java.io.FileOutputStream fos = new java.io.FileOutputStream(file)) {
                fos.write(data);
                javax.swing.JOptionPane.showMessageDialog(this, "Xuất báo cáo thành công!");
            } catch (Exception ex) {
                javax.swing.JOptionPane.showMessageDialog(this, "Lỗi khi xuất báo cáo: " + ex.getMessage());
            }
        }
    }//GEN-LAST:event_btnXuatBaoCaoActionPerformed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        this.loadNguoiBan();
        this.open();
    }//GEN-LAST:event_formWindowOpened

    // Hàm parseDate hỗ trợ chuyển đổi chuỗi sang LocalDateTime
    private java.time.LocalDateTime parseDate(String text) {
        try {
            return java.time.LocalDate.parse(text, java.time.format.DateTimeFormatter.ofPattern("yyyy-MM-dd")).atStartOfDay();
        } catch (Exception e) {
            return java.time.LocalDateTime.now();
        }
    }

    // Hàm load loại sản phẩm cho ComboBox
    private void loadLoaiSanPham() {
        cbxLoaiSP.removeAllItems();
        cbxLoaiSP.addItem("Tất cả");
        java.util.List<poly.entity.Category> cats = new poly.dao.impl.CategoryDAOImpl().selectAll();
        for (poly.entity.Category c : cats) {
            cbxLoaiSP.addItem(c.getCategoryName());
        }
    }

    // Hàm load danh sách admin vào combo box Người Bán
    private void loadNguoiBan() {
        // Không còn khai báo biến cbxNguoiBan và btnLocNguoiBan
    }

    // Hàm lấy categoryId từ combobox
    private String getSelectedCategoryId() {
        int idx = cbxLoaiSP.getSelectedIndex();
        if (idx <= 0) return ""; // 0 là 'Tất cả'
        java.util.List<poly.entity.Category> cats = new poly.dao.impl.CategoryDAOImpl().selectAll();
        if (idx - 1 < cats.size()) {
            return cats.get(idx - 1).getCategoryId();
        }
        return "";
    }

    // XÓA hoàn toàn hàm fillDoanhThuTable và mọi chỗ sử dụng tblDoanhThu (JTable doanh thu)
    // Không còn khai báo biến tblDoanhThu trong variables declaration
    // Khi cần cập nhật doanh thu, chỉ gọi showDoanhThuChart()

    // Vẽ biểu đồ sản phẩm bán chạy
    private void showBanChayChart(String categoryId) {
        int top = 10;
        try { top = Integer.parseInt(txtTop.getText()); } catch (Exception e) {}
        java.util.List<Object[]> data = thongKeSanPhamBanChay(top, categoryId);
        DefaultCategoryDataset dataset = new DefaultCategoryDataset();
        for (Object[] row : data) {
            String tenSP = (String) row[1];
            int soLuong = (int) row[2];
            if (soLuong > 0) {
                dataset.addValue(soLuong, "Số lượng", tenSP);
            }
        }
        JFreeChart chart = ChartFactory.createBarChart(
            "Biểu Đồ Top Sản Phẩm Bán Chạy", "Sản Phẩm", "Số Lượng", dataset);
        org.jfree.chart.plot.CategoryPlot plot = chart.getCategoryPlot();
        plot.setBackgroundPaint(new java.awt.Color(0xe3f2fd));
        org.jfree.chart.renderer.category.BarRenderer renderer = (org.jfree.chart.renderer.category.BarRenderer) plot.getRenderer();
        java.awt.Color blue = new java.awt.Color(25, 118, 210);
        renderer.setSeriesPaint(0, blue);
        ChartPanel chartPanel = new ChartPanel(chart);
        if (dataset.getColumnCount() == 1) {
            org.jfree.chart.plot.CategoryPlot singlePlot = chart.getCategoryPlot();
            org.jfree.chart.renderer.category.BarRenderer singleRenderer = (org.jfree.chart.renderer.category.BarRenderer) singlePlot.getRenderer();
            singleRenderer.setMaximumBarWidth(0.2);
            singlePlot.getDomainAxis().setCategoryMargin(0.4);
            chartPanel.setPreferredSize(new java.awt.Dimension(300, panelBanChay.getHeight()));
        } else {
            chartPanel.setPreferredSize(panelBanChay.getSize());
        }
        panelBanChay.removeAll();
        panelBanChay.setLayout(new java.awt.BorderLayout());
        panelBanChay.add(chartPanel, java.awt.BorderLayout.CENTER);
        panelBanChay.validate();
    }

    // Vẽ biểu đồ tồn kho (lọc theo categoryId)
    private void showTonKhoChart(String categoryId) {
        int top = 10;
        try { top = Integer.parseInt(txtTop.getText()); } catch (Exception e) {}
        java.util.List<Object[]> data = thongKeTonKhoWithCategory();
        DefaultCategoryDataset dataset = new DefaultCategoryDataset();
        int count = 0;
        for (Object[] row : data) {
            String catId = (String) row[3];
            if (categoryId.isEmpty() || categoryId.equals(catId)) {
                String tenSP = (String) row[1];
                int tonKho = (int) row[2];
                if (tonKho > 0) {
                    dataset.addValue(tonKho, "Sản phẩm trong kho", tenSP);
                    count++;
                    if (count >= top) break;
                }
            }
        }
        JFreeChart chart = ChartFactory.createBarChart(
            "Biểu Đồ Sản Phẩm Trong Kho Nhiều Nhất", "Sản Phẩm", "Sản Phẩm Trong Kho", dataset);
        org.jfree.chart.plot.CategoryPlot plot = chart.getCategoryPlot();
        plot.setBackgroundPaint(new java.awt.Color(0xe3f2fd));
        org.jfree.chart.renderer.category.BarRenderer renderer = (org.jfree.chart.renderer.category.BarRenderer) plot.getRenderer();
        java.awt.Color green = new java.awt.Color(56, 142, 60);
        renderer.setSeriesPaint(0, green);
        ChartPanel chartPanel = new ChartPanel(chart);
        if (dataset.getColumnCount() == 1) {
            org.jfree.chart.plot.CategoryPlot singlePlot = chart.getCategoryPlot();
            org.jfree.chart.renderer.category.BarRenderer singleRenderer = (org.jfree.chart.renderer.category.BarRenderer) singlePlot.getRenderer();
            singleRenderer.setMaximumBarWidth(0.2);
            singlePlot.getDomainAxis().setCategoryMargin(0.4);
            chartPanel.setPreferredSize(new java.awt.Dimension(300, panelTonKho.getHeight()));
        } else {
            chartPanel.setPreferredSize(panelTonKho.getSize());
        }
        panelTonKho.removeAll();
        panelTonKho.setLayout(new java.awt.BorderLayout());
        panelTonKho.add(chartPanel, java.awt.BorderLayout.CENTER);
        panelTonKho.validate();
    }

    // Vẽ biểu đồ doanh thu
    private void showDoanhThuChart() {
        java.time.LocalDateTime from = parseDate(txtTuNgay.getText());
        java.time.LocalDateTime to = parseDate(txtDenNgay.getText());
        if (!isDateRangeValid(from, to)) {
            javax.swing.JOptionPane.showMessageDialog(this, "Ngày bắt đầu phải nhỏ hơn hoặc bằng ngày kết thúc!", "Lỗi ngày", javax.swing.JOptionPane.ERROR_MESSAGE);
            return;
        }
        boolean isForceByDay = false;
        if (cbxKhoangThoiGian.getSelectedItem() != null && cbxKhoangThoiGian.getSelectedItem().toString().equals("Tháng này")) {
            isForceByDay = true;
        }
        java.util.Map<String, Number> data = tongHopDoanhThu(from, to, isForceByDay);
        DefaultCategoryDataset dataset = new DefaultCategoryDataset();
        for (String key : data.keySet()) {
            dataset.addValue(data.get(key), "Doanh thu", key);
        }
        JFreeChart chart = ChartFactory.createBarChart(
            "Biểu Đồ Doanh Thu", "Thời gian", "Doanh thu", dataset);
        org.jfree.chart.plot.CategoryPlot plot = chart.getCategoryPlot();
        plot.setBackgroundPaint(new java.awt.Color(0xe3f2fd));
        org.jfree.chart.renderer.category.BarRenderer renderer = (org.jfree.chart.renderer.category.BarRenderer) plot.getRenderer();
        java.awt.Color blue = new java.awt.Color(25, 118, 210);
        renderer.setSeriesPaint(0, blue);
        ChartPanel chartPanel = new ChartPanel(chart);
        if (dataset.getColumnCount() == 1) {
            org.jfree.chart.plot.CategoryPlot singlePlot = chart.getCategoryPlot();
            org.jfree.chart.renderer.category.BarRenderer singleRenderer = (org.jfree.chart.renderer.category.BarRenderer) singlePlot.getRenderer();
            singleRenderer.setMaximumBarWidth(0.2);
            singlePlot.getDomainAxis().setCategoryMargin(0.4);
            chartPanel.setPreferredSize(new java.awt.Dimension(300, panelDoanhThuChart.getHeight()));
        } else {
            chartPanel.setPreferredSize(panelDoanhThuChart.getSize());
        }
        panelDoanhThuChart.removeAll();
        panelDoanhThuChart.setLayout(new java.awt.BorderLayout());
        panelDoanhThuChart.add(chartPanel, java.awt.BorderLayout.CENTER);
        panelDoanhThuChart.revalidate();
        panelDoanhThuChart.repaint();
    }

    // Tổng hợp doanh thu theo ngày/tuần/tháng
    private java.util.Map<String, Number> tongHopDoanhThu(java.time.LocalDateTime from, java.time.LocalDateTime to, boolean forceByDay) {
        java.util.List<Object[]> data = thongKeDoanhThu(from, to, "Tất cả");
        java.util.Map<String, Number> result = new java.util.LinkedHashMap<>();
        long days = java.time.Duration.between(from, to).toDays() + 1;
        java.time.format.DateTimeFormatter fmtNgay = java.time.format.DateTimeFormatter.ofPattern("dd/MM");
        java.time.format.DateTimeFormatter fmtThang = java.time.format.DateTimeFormatter.ofPattern("MM/yyyy");

        if (forceByDay || days <= 7) { // Theo ngày
            for (Object[] row : data) {
                java.time.LocalDate date = (java.time.LocalDate) row[0];
                Number tongTien = (Number) row[2];
                String key = date.format(fmtNgay);
                result.put(key, tongTien);
            }
        } else if (days <= 31) { // Theo tuần (hiển thị Tuần X - MM/yyyy)
            java.util.Map<String, Number> weekMap = new java.util.LinkedHashMap<>();
            java.time.format.DateTimeFormatter fmtThangNam = java.time.format.DateTimeFormatter.ofPattern("MM/yyyy");
            for (Object[] row : data) {
                java.time.LocalDate date = (java.time.LocalDate) row[0];
                int weekOfMonth = date.get(java.time.temporal.WeekFields.ISO.weekOfMonth());
                String thangNam = date.format(fmtThangNam);
                String key = "Tuần " + weekOfMonth + " - " + thangNam;
                Number tongTien = (Number) row[2];
                weekMap.put(key, weekMap.getOrDefault(key, 0).doubleValue() + tongTien.doubleValue());
            }
            for (String key : weekMap.keySet()) {
                result.put(key, weekMap.get(key));
            }
        } else { // Theo tháng
            java.util.Map<String, Number> monthMap = new java.util.LinkedHashMap<>();
            for (Object[] row : data) {
                java.time.LocalDate date = (java.time.LocalDate) row[0];
                String thang = date.format(fmtThang);
                Number tongTien = (Number) row[2];
                monthMap.put(thang, monthMap.getOrDefault(thang, 0).doubleValue() + tongTien.doubleValue());
            }
            result.putAll(monthMap);
        }
        return result;
    }

    // Thống kê số lượng đơn hàng theo trạng thái
    private java.util.Map<String, Integer> tongHopDonHangTheoTrangThai(java.time.LocalDateTime from, java.time.LocalDateTime to) {
        java.util.List<poly.entity.Order> data = thongKeDonHang(from, to, "Tất Cả");
        java.util.Map<String, Integer> result = new java.util.LinkedHashMap<>();
        for (poly.entity.Order o : data) {
            String status = o.getOrderStatus();
            result.put(status, result.getOrDefault(status, 0) + 1);
        }
        return result;
    }

    // Thống kê tổng tiền đơn hàng theo trạng thái
    private java.util.Map<String, Double> tongHopTongTienTheoTrangThai(java.time.LocalDateTime from, java.time.LocalDateTime to) {
        java.util.List<poly.entity.Order> data = thongKeDonHang(from, to, "Tất Cả");
        java.util.Map<String, Double> result = new java.util.LinkedHashMap<>();
        for (poly.entity.Order o : data) {
            String status = o.getOrderStatus();
            double tongTien = o.getTotalAmount().doubleValue();
            result.put(status, result.getOrDefault(status, 0.0) + tongTien);
        }
        return result;
    }

    // Vẽ biểu đồ đơn hàng theo trạng thái (lọc đúng trạng thái đã chọn)
    private void showDonHangChart(String status) {
        java.time.LocalDateTime from = parseDate(txtTuNgayDH.getText());
        java.time.LocalDateTime to = parseDate(txtDenNgayDH.getText());
        if (!isDateRangeValid(from, to)) {
            javax.swing.JOptionPane.showMessageDialog(this, "Ngày bắt đầu phải nhỏ hơn hoặc bằng ngày kết thúc!", "Lỗi ngày", javax.swing.JOptionPane.ERROR_MESSAGE);
            return;
        }
        java.util.List<poly.entity.Order> data = thongKeDonHang(from, to, status);
        java.util.Map<String, Double> result = new java.util.LinkedHashMap<>();
        for (poly.entity.Order o : data) {
            String stt = o.getOrderStatus();
            double tongTien = o.getTotalAmount().doubleValue();
            result.put(stt, result.getOrDefault(stt, 0.0) + tongTien);
        }
        DefaultCategoryDataset dataset = new DefaultCategoryDataset();
        for (String stt : result.keySet()) {
            dataset.addValue(result.get(stt), "Tổng tiền", stt);
        }
        JFreeChart chart = ChartFactory.createBarChart(
            "Biểu Đồ Tổng Tiền Đơn Hàng Theo Trạng Thái", "Trạng Thái", "Tổng tiền", dataset);
        org.jfree.chart.plot.CategoryPlot plot = chart.getCategoryPlot();
        plot.setBackgroundPaint(new java.awt.Color(0xe3f2fd));
        org.jfree.chart.renderer.category.BarRenderer renderer = (org.jfree.chart.renderer.category.BarRenderer) plot.getRenderer();
        java.awt.Color blue = new java.awt.Color(25, 118, 210);
        renderer.setSeriesPaint(0, blue);
        ChartPanel chartPanel = new ChartPanel(chart);
        if (dataset.getColumnCount() == 1) {
            org.jfree.chart.plot.CategoryPlot singlePlot = chart.getCategoryPlot();
            org.jfree.chart.renderer.category.BarRenderer singleRenderer = (org.jfree.chart.renderer.category.BarRenderer) singlePlot.getRenderer();
            singleRenderer.setMaximumBarWidth(0.2);
            singlePlot.getDomainAxis().setCategoryMargin(0.4);
            chartPanel.setPreferredSize(new java.awt.Dimension(300, panelDonHangChart.getHeight()));
        } else {
            chartPanel.setPreferredSize(panelDonHangChart.getSize());
        }
        panelDonHangChart.removeAll();
        panelDonHangChart.setLayout(new java.awt.BorderLayout());
        panelDonHangChart.add(chartPanel, java.awt.BorderLayout.CENTER);
        panelDonHangChart.revalidate();
        panelDonHangChart.repaint();
    }

    // Gọi cập nhật biểu đồ khi cần
    private void updateSanPhamCharts() {
        String categoryId = getSelectedCategoryId();
        showBanChayChart(categoryId);
        showTonKhoChart(categoryId);
    }

    // Fill dữ liệu cho bảng Đơn Hàng (hiển thị tên khách hàng)
    private void fillDonHangTable() {
        java.time.LocalDateTime from = parseDate(txtTuNgayDH.getText());
        java.time.LocalDateTime to = parseDate(txtDenNgayDH.getText());
        if (!isDateRangeValid(from, to)) {
            javax.swing.JOptionPane.showMessageDialog(this, "Ngày bắt đầu phải nhỏ hơn hoặc bằng ngày kết thúc!", "Lỗi ngày", javax.swing.JOptionPane.ERROR_MESSAGE);
            return;
        }
        String status = cbxTrangThaiDonHang.getSelectedItem().toString();
        java.util.List<poly.entity.Order> data = thongKeDonHang(from, to, status);
        javax.swing.table.DefaultTableModel model = (javax.swing.table.DefaultTableModel) tblDonHang.getModel();
        model.setRowCount(0);
        for (poly.entity.Order o : data) {
            poly.entity.User user = new poly.dao.impl.UserDAOImpl().selectById(o.getUserId());
            String tenKhach = user != null ? user.getFullName() : String.valueOf(o.getUserId());
            model.addRow(new Object[]{
                o.getOrderId(),
                o.getOrderDate(),
                tenKhach,
                o.getTotalAmount(),
                o.getOrderStatus()
            });
        }
    }

    // Gọi fill dữ liệu khi mở form
    public void open() {
        showDoanhThuChart();
        updateSanPhamCharts();
        fillDonHangTable();
        String status = cbxTrangThaiDonHang.getSelectedItem().toString();
        showDonHangChart(status);
        // Auto chọn "Hôm nay" cho cbxKhoangThoiGian
        cbxKhoangThoiGian.setSelectedIndex(0);
        setLocationRelativeTo(null);
        setVisible(true);
    }

    // Gắn fill vào các nút lọc/tìm kiếm (nên đặt trong initComponents hoặc sau khi init)
    // Ví dụ:
    // btnLoc.addActionListener(e -> fillDoanhThuTable());
    // btnTimTop.addActionListener(e -> fillSanPhamBanChayTable());
    // btnLocSanPham.addActionListener(e -> fillSanPhamBanChayTable());
    // btnLocDonHang.addActionListener(e -> fillDonHangTable());

    // Khai báo DAO cần thiết
    private final poly.dao.impl.OrderDAOImpl orderDAO = new poly.dao.impl.OrderDAOImpl();
    private final poly.dao.impl.OrderDetailDAOImpl orderDetailDAO = new poly.dao.impl.OrderDetailDAOImpl();
    private final poly.dao.impl.ProductDAOImpl productDAO = new poly.dao.impl.ProductDAOImpl();
    private final poly.dao.impl.InventoryDAOImpl inventoryDAO = new poly.dao.impl.InventoryDAOImpl();

    // --- ThongKeController methods ---
    @Override
    public java.util.List<Object[]> thongKeDoanhThu(java.time.LocalDateTime from, java.time.LocalDateTime to) {
        // Mặc định lấy tất cả người bán
        return thongKeDoanhThu(from, to, "Tất cả");
    }

    // Hàm mở rộng cho phép lọc theo người bán
    public java.util.List<Object[]> thongKeDoanhThu(java.time.LocalDateTime from, java.time.LocalDateTime to, String nguoiBan) {
        java.util.List<poly.entity.Order> orders = orderDAO.selectByDateRange(from, to);
        if (nguoiBan != null && !nguoiBan.equals("Tất cả") && nguoiBan.contains("(") && nguoiBan.contains(")")) {
            // Lọc theo admin (username trong chuỗi)
            String username = nguoiBan.substring(nguoiBan.indexOf("(") + 1, nguoiBan.indexOf(")"));
            java.util.List<poly.entity.User> users = new poly.dao.impl.UserDAOImpl().selectAll();
            Integer userId = null;
            for (poly.entity.User u : users) {
                if (u.getUsername().equals(username)) {
                    userId = u.getUserId();
                    break;
                }
            }
            if (userId != null) {
                java.util.Iterator<poly.entity.Order> it = orders.iterator();
                while (it.hasNext()) {
                    poly.entity.Order o = it.next();
                    if (!userId.equals(o.getUserId())) {
                        it.remove();
                    }
                }
            }
        }
        java.util.Map<java.time.LocalDate, Object[]> map = new java.util.LinkedHashMap<>();
        for (poly.entity.Order o : orders) {
            java.time.LocalDate date = o.getOrderDate().toLocalDate();
            Object[] row = map.getOrDefault(date, new Object[]{date, 0, java.math.BigDecimal.ZERO, 0});
            int tongDon = (int) row[1] + 1;
            java.math.BigDecimal tongTien = ((java.math.BigDecimal) row[2]).add(o.getTotalAmount());
            int soLuongBan = (int) row[3];
            java.util.List<poly.entity.OrderDetail> details = orderDetailDAO.selectByOrderId(o.getOrderId());
            for (poly.entity.OrderDetail d : details) {
                soLuongBan += d.getQuantity();
            }
            map.put(date, new Object[]{date, tongDon, tongTien, soLuongBan});
        }
        return new java.util.ArrayList<>(map.values());
    }

    @Override
    public java.util.List<Object[]> thongKeSanPhamBanChay(int top, String categoryId) {
        java.util.List<poly.entity.Product> products;
        if (categoryId == null || categoryId.isEmpty()) {
            // Nếu chọn 'Tất cả', lấy toàn bộ sản phẩm
            products = productDAO.selectAll();
        } else {
            products = productDAO.searchByCategory(categoryId);
        }
        java.util.List<Object[]> result = new java.util.ArrayList<>();
        for (poly.entity.Product p : products) {
            int sold = orderDetailDAO.getTotalQuantitySold(p.getProductId());
            result.add(new Object[]{p.getProductId(), p.getProductName(), sold});
        }
        result.sort((a, b) -> Integer.compare((int) b[2], (int) a[2]));
        return result.subList(0, Math.min(top, result.size()));
    }

    @Override
    public java.util.List<Object[]> thongKeTonKho() {
        java.util.List<poly.entity.Product> products = inventoryDAO.getCurrentInventory();
        products.sort((a, b) -> Integer.compare(b.getQuantity(), a.getQuantity()));
        java.util.List<Object[]> result = new java.util.ArrayList<>();
        for (poly.entity.Product p : products) {
            result.add(new Object[]{p.getProductId(), p.getProductName(), p.getQuantity()});
        }
        return result;
    }

    // Lấy tồn kho có categoryId
    public java.util.List<Object[]> thongKeTonKhoWithCategory() {
        java.util.List<poly.entity.Product> products = inventoryDAO.getCurrentInventory();
        products.sort((a, b) -> Integer.compare(b.getQuantity(), a.getQuantity()));
        java.util.List<Object[]> result = new java.util.ArrayList<>();
        for (poly.entity.Product p : products) {
            result.add(new Object[]{p.getProductId(), p.getProductName(), p.getQuantity(), p.getCategoryId()});
        }
        return result;
    }

    @Override
    public java.util.List<poly.entity.Order> thongKeDonHang(java.time.LocalDateTime from, java.time.LocalDateTime to, String status) {
        java.util.List<poly.entity.Order> orders = orderDAO.selectByDateRange(from, to);
        if (!"Tất Cả".equalsIgnoreCase(status)) {
            orders.removeIf(o -> !status.equalsIgnoreCase(o.getOrderStatus()));
        }
        return orders;
    }

    @Override
    public byte[] xuatBaoCao(String loaiBaoCao, String dinhDang, java.time.LocalDateTime from, java.time.LocalDateTime to) {
        StringBuilder sb = new StringBuilder();
        if ("Doanh thu".equalsIgnoreCase(loaiBaoCao)) {
            java.util.List<Object[]> data = thongKeDoanhThu(from, to, "Tất cả");
            sb.append("Ngày,Tổng Đơn,Tổng Tiền,Số Lượng Bán\n");
            for (Object[] row : data) {
                sb.append(row[0]).append(",").append(row[1]).append(",").append(row[2]).append(",").append(row[3]).append("\n");
            }
        } else if ("Sản phẩm".equalsIgnoreCase(loaiBaoCao)) {
            java.util.List<Object[]> data = thongKeSanPhamBanChay(100, ""); // Top 100 hoặc tất cả
            sb.append("SẢN PHẨM BÁN CHẠY NHẤT\n");
            sb.append("Mã Sản Phẩm,Tên Sản Phẩm,Số Lượng Bán Ra\n");
            for (Object[] row : data) {
                sb.append(row[0]).append(",").append(row[1]).append(",").append(row[2]).append("\n");
            }
            sb.append("\nSẢN PHẨM TỒN KHO NHIỀU NHẤT\n");
            sb.append("Mã Sản Phẩm,Tên Sản Phẩm,Tồn Kho\n");
            java.util.List<Object[]> tonKho = thongKeTonKho();
            for (Object[] row : tonKho) {
                sb.append(row[0]).append(",").append(row[1]).append(",").append(row[2]).append("\n");
            }
        } else if ("Đơn hàng".equalsIgnoreCase(loaiBaoCao)) {
            // Sửa: chỉ lấy đơn hàng theo khoảng thời gian from, to
            java.util.List<poly.entity.Order> data = thongKeDonHang(from, to, "Tất Cả");
            sb.append("Mã Đơn,Ngày,Khách Hàng,Tổng Tiền,Trạng Thái\n");
            for (poly.entity.Order o : data) {
                poly.entity.User user = new poly.dao.impl.UserDAOImpl().selectById(o.getUserId());
                String tenKhach = user != null ? user.getFullName() : String.valueOf(o.getUserId());
                sb.append(o.getOrderId()).append(",")
                  .append(o.getOrderDate()).append(",")
                  .append(tenKhach).append(",")
                  .append(o.getTotalAmount()).append(",")
                  .append(o.getOrderStatus()).append("\n");
            }
        }
        // Thêm BOM để Excel nhận đúng UTF-8
        byte[] bom = {(byte)0xEF, (byte)0xBB, (byte)0xBF};
        byte[] content = sb.toString().getBytes(java.nio.charset.StandardCharsets.UTF_8);
        byte[] result = new byte[bom.length + content.length];
        System.arraycopy(bom, 0, result, 0, bom.length);
        System.arraycopy(content, 0, result, bom.length, content.length);
        return result;
    }

    // Hàm xuất báo cáo Đơn hàng ra PDF
    private byte[] xuatBaoCaoDonHangPDF(java.time.LocalDateTime from, java.time.LocalDateTime to) {
        java.util.List<poly.entity.Order> data = thongKeDonHang(from, to, "Tất cả");
        java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
        com.lowagie.text.Document document = new com.lowagie.text.Document();
        try {
            com.lowagie.text.pdf.PdfWriter writer = com.lowagie.text.pdf.PdfWriter.getInstance(document, baos);
            document.open();
            // Font Unicode
            com.lowagie.text.pdf.BaseFont bf = null;
            try {
                bf = com.lowagie.text.pdf.BaseFont.createFont("fonts/DejaVuSans.ttf", com.lowagie.text.pdf.BaseFont.IDENTITY_H, com.lowagie.text.pdf.BaseFont.EMBEDDED);
            } catch (Exception e) {
                bf = com.lowagie.text.pdf.BaseFont.createFont(com.lowagie.text.pdf.BaseFont.HELVETICA, com.lowagie.text.pdf.BaseFont.CP1250, com.lowagie.text.pdf.BaseFont.NOT_EMBEDDED);
            }
            com.lowagie.text.Font font = new com.lowagie.text.Font(bf, 12);
            com.lowagie.text.Font fontTitle = new com.lowagie.text.Font(bf, 16, com.lowagie.text.Font.BOLD);
            document.add(new com.lowagie.text.Paragraph("BÁO CÁO ĐƠN HÀNG", fontTitle));
            document.add(new com.lowagie.text.Paragraph("Từ ngày: " + from.toLocalDate() + "  Đến ngày: " + to.toLocalDate(), font));
            document.add(new com.lowagie.text.Paragraph(" "));
            com.lowagie.text.pdf.PdfPTable table = new com.lowagie.text.pdf.PdfPTable(5);
            table.setWidthPercentage(100);
            table.addCell(new com.lowagie.text.Phrase("Mã Đơn", font));
            table.addCell(new com.lowagie.text.Phrase("Ngày", font));
            table.addCell(new com.lowagie.text.Phrase("Khách Hàng", font));
            table.addCell(new com.lowagie.text.Phrase("Tổng Tiền", font));
            table.addCell(new com.lowagie.text.Phrase("Trạng Thái", font));
            for (poly.entity.Order o : data) {
                poly.entity.User user = new poly.dao.impl.UserDAOImpl().selectById(o.getUserId());
                String tenKhach = user != null ? user.getFullName() : String.valueOf(o.getUserId());
                table.addCell(new com.lowagie.text.Phrase(String.valueOf(o.getOrderId()), font));
                table.addCell(new com.lowagie.text.Phrase(String.valueOf(o.getOrderDate()), font));
                table.addCell(new com.lowagie.text.Phrase(tenKhach, font));
                table.addCell(new com.lowagie.text.Phrase(String.valueOf(o.getTotalAmount()), font));
                table.addCell(new com.lowagie.text.Phrase(o.getOrderStatus(), font));
            }
            document.add(table);
            document.close();
            writer.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
        return baos.toByteArray();
    }

    // Hàm xuất báo cáo Doanh thu ra PDF
    private byte[] xuatBaoCaoDoanhThuPDF(java.time.LocalDateTime from, java.time.LocalDateTime to) {
        java.util.List<Object[]> data = thongKeDoanhThu(from, to, "Tất cả");
        java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
        com.lowagie.text.Document document = new com.lowagie.text.Document();
        try {
            com.lowagie.text.pdf.PdfWriter writer = com.lowagie.text.pdf.PdfWriter.getInstance(document, baos);
            document.open();
            com.lowagie.text.pdf.BaseFont bf = null;
            try {
                bf = com.lowagie.text.pdf.BaseFont.createFont("fonts/DejaVuSans.ttf", com.lowagie.text.pdf.BaseFont.IDENTITY_H, com.lowagie.text.pdf.BaseFont.EMBEDDED);
            } catch (Exception e) {
                bf = com.lowagie.text.pdf.BaseFont.createFont(com.lowagie.text.pdf.BaseFont.HELVETICA, com.lowagie.text.pdf.BaseFont.CP1250, com.lowagie.text.pdf.BaseFont.NOT_EMBEDDED);
            }
            com.lowagie.text.Font font = new com.lowagie.text.Font(bf, 12);
            com.lowagie.text.Font fontTitle = new com.lowagie.text.Font(bf, 16, com.lowagie.text.Font.BOLD);
            document.add(new com.lowagie.text.Paragraph("BÁO CÁO DOANH THU", fontTitle));
            document.add(new com.lowagie.text.Paragraph("Từ ngày: " + from.toLocalDate() + "  Đến ngày: " + to.toLocalDate(), font));
            document.add(new com.lowagie.text.Paragraph(" "));
            com.lowagie.text.pdf.PdfPTable table = new com.lowagie.text.pdf.PdfPTable(4);
            table.setWidthPercentage(100);
            table.addCell(new com.lowagie.text.Phrase("Ngày", font));
            table.addCell(new com.lowagie.text.Phrase("Tổng Đơn", font));
            table.addCell(new com.lowagie.text.Phrase("Tổng Tiền", font));
            table.addCell(new com.lowagie.text.Phrase("Số Lượng Bán", font));
            for (Object[] row : data) {
                table.addCell(new com.lowagie.text.Phrase(String.valueOf(row[0]), font));
                table.addCell(new com.lowagie.text.Phrase(String.valueOf(row[1]), font));
                table.addCell(new com.lowagie.text.Phrase(String.valueOf(row[2]), font));
                table.addCell(new com.lowagie.text.Phrase(String.valueOf(row[3]), font));
            }
            document.add(table);
            document.close();
            writer.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
        return baos.toByteArray();
    }

    // Hàm xuất báo cáo Sản phẩm ra PDF
    private byte[] xuatBaoCaoSanPhamPDF() {
        java.util.List<Object[]> dataBanChay = thongKeSanPhamBanChay(100, "");
        java.util.List<Object[]> tonKho = thongKeTonKho();
        java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
        com.lowagie.text.Document document = new com.lowagie.text.Document();
        try {
            com.lowagie.text.pdf.PdfWriter writer = com.lowagie.text.pdf.PdfWriter.getInstance(document, baos);
            document.open();
            com.lowagie.text.pdf.BaseFont bf = null;
            try {
                bf = com.lowagie.text.pdf.BaseFont.createFont("fonts/DejaVuSans.ttf", com.lowagie.text.pdf.BaseFont.IDENTITY_H, com.lowagie.text.pdf.BaseFont.EMBEDDED);
            } catch (Exception e) {
                bf = com.lowagie.text.pdf.BaseFont.createFont(com.lowagie.text.pdf.BaseFont.HELVETICA, com.lowagie.text.pdf.BaseFont.CP1250, com.lowagie.text.pdf.BaseFont.NOT_EMBEDDED);
            }
            com.lowagie.text.Font font = new com.lowagie.text.Font(bf, 12);
            com.lowagie.text.Font fontTitle = new com.lowagie.text.Font(bf, 16, com.lowagie.text.Font.BOLD);
            document.add(new com.lowagie.text.Paragraph("BÁO CÁO SẢN PHẨM", fontTitle));
            document.add(new com.lowagie.text.Paragraph(" "));
            document.add(new com.lowagie.text.Paragraph("SẢN PHẨM BÁN CHẠY NHẤT", font));
            com.lowagie.text.pdf.PdfPTable table1 = new com.lowagie.text.pdf.PdfPTable(3);
            table1.setWidthPercentage(100);
            table1.addCell(new com.lowagie.text.Phrase("Mã Sản Phẩm", font));
            table1.addCell(new com.lowagie.text.Phrase("Tên Sản Phẩm", font));
            table1.addCell(new com.lowagie.text.Phrase("Số Lượng Bán Ra", font));
            for (Object[] row : dataBanChay) {
                table1.addCell(new com.lowagie.text.Phrase(String.valueOf(row[0]), font));
                table1.addCell(new com.lowagie.text.Phrase(String.valueOf(row[1]), font));
                table1.addCell(new com.lowagie.text.Phrase(String.valueOf(row[2]), font));
            }
            document.add(table1);
            document.add(new com.lowagie.text.Paragraph(" "));
            document.add(new com.lowagie.text.Paragraph("SẢN PHẨM TỒN KHO NHIỀU NHẤT", font));
            com.lowagie.text.pdf.PdfPTable table2 = new com.lowagie.text.pdf.PdfPTable(3);
            table2.setWidthPercentage(100);
            table2.addCell(new com.lowagie.text.Phrase("Mã Sản Phẩm", font));
            table2.addCell(new com.lowagie.text.Phrase("Tên Sản Phẩm", font));
            table2.addCell(new com.lowagie.text.Phrase("Tồn Kho", font));
            for (Object[] row : tonKho) {
                table2.addCell(new com.lowagie.text.Phrase(String.valueOf(row[0]), font));
                table2.addCell(new com.lowagie.text.Phrase(String.valueOf(row[1]), font));
                table2.addCell(new com.lowagie.text.Phrase(String.valueOf(row[2]), font));
            }
            document.add(table2);
            document.close();
            writer.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
        return baos.toByteArray();
    }

    private boolean isDateRangeValid(java.time.LocalDateTime from, java.time.LocalDateTime to) {
        return !from.isAfter(to);
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ThongKeJDialog_nghia.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ThongKeJDialog_nghia.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ThongKeJDialog_nghia.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ThongKeJDialog_nghia.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                ThongKeJDialog_nghia dialog = new ThongKeJDialog_nghia(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnLoc;
    private javax.swing.JButton btnLocDonHang;
    private javax.swing.JButton btnLocLoai;
    private javax.swing.JButton btnTimTop;
    private javax.swing.JButton btnXemTruoc;
    private javax.swing.JButton btnXuatBaoCao;
    private javax.swing.JComboBox<String> cbxDinhDang;
    private javax.swing.JComboBox<String> cbxKhoangThoiGian;
    private javax.swing.JComboBox<String> cbxKhoangThoiGian1;
    private javax.swing.JComboBox<String> cbxLoaiBaoCao;
    private javax.swing.JComboBox<String> cbxLoaiSP;
    private javax.swing.JComboBox<String> cbxTrangThaiDonHang;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTable jTable2;
    private javax.swing.JPanel panelBanChay;
    private javax.swing.JPanel panelDoanhThuChart;
    private javax.swing.JPanel panelDonHangChart;
    private javax.swing.JPanel panelTonKho;
    private javax.swing.JTable tblDonHang;
    private javax.swing.JTextField txtDenNgay;
    private javax.swing.JTextField txtDenNgayDH;
    private javax.swing.JTextField txtTop;
    private javax.swing.JTextField txtTuNgay;
    private javax.swing.JTextField txtTuNgayDH;
    // End of variables declaration//GEN-END:variables
}

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JDialog.java to edit this template
 */
package poly.ui;

import poly.dao.OrderRequestDAO;
import poly.dao.impl.OrderRequestDAOImpl;
import poly.entity.OrderRequest;
import poly.entity.OrderRequestItem;
import poly.entity.User;
import poly.util.CurrentUserUtil;
import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.math.BigDecimal;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.sql.ResultSet;
import poly.util.XJdbc;
import poly.util.InventoryUpdateUtil;
import poly.dao.CouponDAO;
import poly.dao.impl.CouponDAOImpl;
import poly.entity.Coupon;
import poly.entity.CartItem;
import poly.dao.AddressDAO;
import poly.dao.impl.AddressDAOImpl;
import poly.entity.Address;

/**
 * Dialog đặt hàng với các tính năng:
 * - Mặc định chọn Việt Nam làm quốc gia giao hàng
 * - Vô hiệu hóa ComboBox quốc gia để người dùng không thể thay đổi
 * - Chỉ hỗ trợ giao hàng trong nước Việt Nam
 * - Tự động load danh sách thành phố Việt Nam
 * - Áp dụng mã giảm giá bình thường (không vô hiệu hóa sau khi sử dụng)
 * 
 * @author Nghia
 */
public class DatHangJDialog extends javax.swing.JDialog {

    private OrderRequestDAO orderRequestDAO = new OrderRequestDAOImpl();
    private OrderRequest currentOrder = new OrderRequest();
    private List<OrderRequestItem> orderItems = new ArrayList<>();
    private User currentUser;
    
    // Dữ liệu thành phố Việt Nam
    private Map<String, List<String>> citiesByCountry = new HashMap<>();
    private List<String> countries = new ArrayList<>();
    
    /**
     * Creates new form DatHangJDialog
     */
    public DatHangJDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        
        // Xóa tất cả thông tin mặc định ngay sau khi khởi tạo
        clearCustomerInfoFields();
        
        initializeForm();
        setupEventHandlers();
    }
    
    /**
     * Creates new form DatHangJDialog with selected cart items
     */
    public DatHangJDialog(java.awt.Frame parent, boolean modal, List<poly.entity.CartItem> selectedCartItems) {
        this(parent, modal);
        // Load chỉ những sản phẩm đã được chọn
        loadSelectedCartItems(selectedCartItems);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jLabel15 = new javax.swing.JLabel();
        jTextField2 = new javax.swing.JTextField();
        jRadioButton3 = new javax.swing.JRadioButton();
        jLabel16 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jTextField3 = new javax.swing.JTextField();
        jLabel17 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jButton3 = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        Country = new javax.swing.JComboBox<>();
        jLabel12 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        City = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jTextField4 = new javax.swing.JTextField();
        jButton4 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jLabel15.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel15.setText("Số điện thoại:");

        jRadioButton3.setText("Thanh toán khi nhận hàng");
        jRadioButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton3ActionPerformed(evt);
            }
        });

        jLabel16.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel16.setText("Họ và tên:");

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Tên Sản Phẩm", "Số Lượng", "Đơn giá", "Thành Tiền", "Thành phố", "Quốc gia", "Họ và Tên", "Số nhà", "Số điện thoại", "Thanh toán"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        jLabel17.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel17.setText("Mã giảm giá:");

        jLabel4.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel4.setText("Tổng Tạm Tính");

        jLabel5.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 0, 51));
        jLabel5.setText("?");

        jButton3.setText("Áp dụng");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel6.setText("Phí Vận Chuyển");

        jLabel7.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel7.setText("Khuyến Mãi");

        jLabel8.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(255, 0, 0));
        jLabel8.setText("?");

        jLabel9.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(255, 0, 0));
        jLabel9.setText("?");

        jLabel10.setFont(new java.awt.Font("Segoe UI", 1, 15)); // NOI18N
        jLabel10.setText("Tổng Cộng");

        jLabel11.setFont(new java.awt.Font("Segoe UI", 1, 15)); // NOI18N
        jLabel11.setForeground(new java.awt.Color(255, 0, 0));
        jLabel11.setText(".....");

        jButton1.setText("Quay Lại");

        jButton2.setText("Xác Nhận Đơn Hàng");
        jButton2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton2MouseClicked(evt);
            }
        });
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        Country.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CountryActionPerformed(evt);
            }
        });

        jLabel12.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel12.setText("Địa Chỉ:");

        jLabel13.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel13.setText("Thông tin thanh toán:");

        jLabel14.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel14.setText("Thành phố:");

        jLabel18.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel18.setText("ĐẶT HÀNG");

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel2.setText("Quốc gia:");

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel3.setText("Hình Thức Thanh Toán");

        jButton4.setText("Cập nhật");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jSeparator1)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4)
                            .addComponent(jLabel6)
                            .addComponent(jLabel7))
                        .addGap(562, 562, 562)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jLabel10)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jLabel3)
                                    .addGap(18, 18, 18)
                                    .addComponent(jRadioButton3))
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jLabel14)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(City, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(jLabel2)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(Country, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jLabel12)
                                    .addGap(18, 18, 18)
                                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 289, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel13)
                                .addGap(173, 173, 173)))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                            .addComponent(jLabel16)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(jTextField3))
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                            .addComponent(jLabel15)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel17)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, 211, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jButton3)
                                    .addComponent(jButton4)))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jLabel11)
                                .addGap(75, 75, 75))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(174, 174, 174)
                        .addComponent(jButton1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton2)
                        .addGap(99, 99, 99)))
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel18)
                .addGap(344, 344, 344))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel18)
                .addGap(27, 27, 27)
                .addComponent(jLabel13)
                .addGap(40, 40, 40)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel14)
                    .addComponent(City, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(Country, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel16)
                    .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel12)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel15)
                    .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(31, 31, 31)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jRadioButton3)
                    .addComponent(jLabel17)
                    .addComponent(jButton3)
                    .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(jLabel5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(jLabel8))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(jLabel9))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(33, 33, 33)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10)
                    .addComponent(jLabel11))
                .addGap(51, 51, 51)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton2))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jRadioButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton3ActionPerformed
        if (jRadioButton3.isSelected()) {
            currentOrder.setPaymentMethod("Thanh toán khi nhận hàng");
        }
    }//GEN-LAST:event_jRadioButton3ActionPerformed

    private void CountryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CountryActionPerformed
        updateShippingFee();
    }//GEN-LAST:event_CountryActionPerformed
    
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // Đóng dialog khi nhấn nút "Quay Lại"
        dispose();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton2MouseClicked
      confirmOrder();
    }//GEN-LAST:event_jButton2MouseClicked

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
     applyCouponFromTextField();
    }//GEN-LAST:event_jButton3ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DatHangJDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DatHangJDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DatHangJDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DatHangJDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                DatHangJDialog dialog = new DatHangJDialog(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> City;
    private javax.swing.JComboBox<String> Country;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JRadioButton jRadioButton3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JTextField jTextField4;
    // End of variables declaration//GEN-END:variables
    
    // Custom methods
    private void initializeForm() {
        // Thêm dấu * cho các trường bắt buộc
        addRequiredFieldIndicators();
        
        // Lấy thông tin user hiện tại từ CurrentUserUtil
        Integer currentUserId = CurrentUserUtil.getCurrentUserId();
        String currentUsername = CurrentUserUtil.getCurrentUsername();
        
        if (currentUserId != null && currentUsername != null) {
            // Lấy thông tin đầy đủ của user từ database
            try {
                poly.dao.UserDAO userDAO = new poly.dao.impl.UserDAOImpl();
                currentUser = userDAO.selectById(currentUserId);
                
                if (currentUser != null) {
                    // Điền thông tin vào form
                    jTextField3.setText(currentUser.getFullName());
                    jTextField2.setText(currentUser.getPhone());
                    currentOrder.setUserId(currentUser.getUserId());
                    
                    // Nếu user có địa chỉ, điền vào trường địa chỉ
                    if (currentUser.getAddress() != null && !currentUser.getAddress().trim().isEmpty()) {
                        jTextField1.setText(currentUser.getAddress());
                    }
                } else {
                    // Nếu không có user, để trống các trường
                    jTextField3.setText("");
                    jTextField2.setText("");
                    jTextField1.setText("");
                }
            } catch (Exception e) {
                JOptionPane.showMessageDialog(this, 
                    "Lỗi khi tải thông tin người dùng: " + e.getMessage(), 
                    "Lỗi", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(this, 
                "Vui lòng đăng nhập để sử dụng chức năng đặt hàng!", 
                "Thông báo", JOptionPane.WARNING_MESSAGE);
        }
        
        // Load countries first, then cities
        loadCountries(); // Mặc định chọn Việt Nam và vô hiệu hóa ComboBox
        loadCities(); // Load thành phố Việt Nam sau khi quốc gia đã được thiết lập
        
        // Đảm bảo thành phố được load thành công
        if (City.getItemCount() == 0) {
            System.err.println("⚠️ Thành phố chưa được load, thử load lại...");
            loadVietnamCities();
        }
        
        // Initialize table
        initializeTable();
        
        // Set default values
        jRadioButton3.setSelected(true);
        currentOrder.setPaymentMethod("Thanh toán khi nhận hàng");
        
        // Load data from actual cart
        loadCartData();
        updateTotals();
        
        // Hiển thị thông tin phí vận chuyển ban đầu
        showShippingFeeInfo();
        
        // Hiển thị thông tin API status
        showAPIStatus();
        
        // Thiết lập placeholder cho JTextField4
        jTextField4.setText("");
        jTextField4.setToolTipText("Nhập mã giảm giá (ví dụ: CP10, CP50) và ấn Áp dụng");
        
        // Đảm bảo các trường thông tin khách hàng trống
        clearCustomerInfoFields();
        
        // Kiểm tra và hiển thị trạng thái form
        checkFormStatus();
    }
    
    /**
     * Thêm dấu * cho các trường bắt buộc
     */
    private void addRequiredFieldIndicators() {
        jLabel16.setText("Họ và tên: *");
        jLabel15.setText("Số điện thoại: *");
        jLabel12.setText("Địa Chỉ: *");
        
        // Đặt màu đỏ cho dấu *
        jLabel16.setForeground(new java.awt.Color(51, 51, 51));
        jLabel15.setForeground(new java.awt.Color(51, 51, 51));
        jLabel12.setForeground(new java.awt.Color(51, 51, 51));
        
        // Thêm tooltip cho các trường bắt buộc
        jTextField3.setToolTipText("Nhập họ và tên đầy đủ");
        jTextField2.setToolTipText("Nhập số điện thoại (VD: 0123456789)");
        jTextField1.setToolTipText("Nhập địa chỉ chi tiết");
    }
    
    private void setupEventHandlers() {
        // Apply coupon button
      
        
        // Confirm order button
      
        
        // Back button
        jButton1.addActionListener(e -> dispose());
        
        // City selection
        City.addActionListener(e -> updateShippingFee());
        
        // Country selection - cập nhật thành phố theo quốc gia
        Country.addActionListener(e -> {
            // Kiểm tra nếu người dùng cố gắng thay đổi quốc gia (mặc dù đã bị vô hiệu hóa)
            String selectedCountry = (String) Country.getSelectedItem();
            if (!"Việt Nam".equals(selectedCountry)) {
                // Đảm bảo luôn chọn Việt Nam
                Country.setSelectedItem("Việt Nam");
                JOptionPane.showMessageDialog(DatHangJDialog.this,
                    "🇻🇳 Chỉ hỗ trợ giao hàng trong nước Việt Nam!\n" +
                    "Quốc gia đã được tự động chọn là Việt Nam.",
                    "Thông báo",
                    JOptionPane.INFORMATION_MESSAGE);
            }
            updateCitiesByCountry();
        });
        
        // JTextField4 - nhập mã giảm giá
      
        
        // Table selection - tính tổng tiền của sản phẩm được chọn
        jTable1.getSelectionModel().addListSelectionListener(e -> {
            if (!e.getValueIsAdjusting()) {
                calculateSelectedProductTotal();
            }
        });
        
        // Double click để reset về tính tổng tất cả
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            @Override
            public void mouseClicked(java.awt.event.MouseEvent e) {
                if (e.getClickCount() == 2) {
                    // Double click để tính tổng tất cả sản phẩm
                    updateTotals();
                    // Double click - Tính tổng tất cả sản phẩm
                }
            }
        });
        
        // Enter key trong JTextField4 để áp dụng mã giảm giá
        jTextField4.addKeyListener(new java.awt.event.KeyAdapter() {
            @Override
            public void keyPressed(java.awt.event.KeyEvent e) {
                if (e.getKeyCode() == java.awt.event.KeyEvent.VK_ENTER) {
                    applyCouponFromTextField();
                }
            }
        });
        
        // Double click vào JTextField4 để xóa mã giảm giá
        jTextField4.addMouseListener(new java.awt.event.MouseAdapter() {
            @Override
            public void mouseClicked(java.awt.event.MouseEvent e) {
                if (e.getClickCount() == 2) {
                    clearCoupon();
                    JOptionPane.showMessageDialog(DatHangJDialog.this, 
                        "✓ Đã xóa mã giảm giá!\nTổng tiền đã được tính lại.", 
                        "Thông báo", 
                        JOptionPane.INFORMATION_MESSAGE);
                }
            }
        });
        
        // Nút cập nhật thông tin lên bảng
        jButton4.addActionListener(e -> updateSelectedRowData());
        
        // Highlight dòng được chọn trong bảng
        jTable1.getSelectionModel().addListSelectionListener(e -> {
            if (!e.getValueIsAdjusting()) {
                int selectedRow = jTable1.getSelectedRow();
                if (selectedRow >= 0 && selectedRow < orderItems.size()) {
                            // Đã chọn dòng
                }
            }
        });
        
        // Double click vào Country để hiển thị thông tin Việt Nam
        Country.addMouseListener(new java.awt.event.MouseAdapter() {
            @Override
            public void mouseClicked(java.awt.event.MouseEvent e) {
                if (e.getClickCount() == 2) {
                    showVietnamProvincesInfo();
                }
            }
        });
    }
    
    /**
     * Load danh sách thành phố theo quốc gia đã chọn
     * Được gọi sau khi quốc gia đã được thiết lập
     */
    private void loadCities() {
        // Gọi phương thức cập nhật thành phố theo quốc gia hiện tại
        updateCitiesByCountry();
        System.out.println("✓ Đã load danh sách thành phố cho quốc gia: " + Country.getSelectedItem());
    }
    
    /**
     * Load danh sách quốc gia và mặc định chọn Việt Nam
     * ComboBox quốc gia được vô hiệu hóa để người dùng không thể thay đổi
     */
    private void loadCountries() {
        Country.removeAllItems();
        
        // Chỉ giữ lại Việt Nam (chỉ hỗ trợ giao hàng trong nước)
        countries.clear();
        countries.add("Việt Nam");
        
        // Thêm quốc gia vào ComboBox
        for (String country : countries) {
            Country.addItem(country);
        }
        
        // Mặc định chọn Việt Nam
        Country.setSelectedItem("Việt Nam");
        
        // Vô hiệu hóa ComboBox quốc gia để người dùng không thể thay đổi
        Country.setEnabled(false);
        Country.setEditable(false);
        
        // Thêm tooltip để giải thích
        Country.setToolTipText("🇻🇳 Chỉ hỗ trợ giao hàng trong nước Việt Nam");
        
        System.out.println("✓ Đã thiết lập mặc định quốc gia: Việt Nam");
    }
    

    
    private void updateCitiesByCountry() {
        String selectedCountry = (String) Country.getSelectedItem();
        if (selectedCountry == null) return;
        
        City.removeAllItems();
        
        // Chỉ load thành phố cho Việt Nam (vì chỉ hỗ trợ giao hàng trong nước)
        if ("Việt Nam".equals(selectedCountry)) {
            loadVietnamCities();
        }
        
        // Cập nhật phí vận chuyển sau khi thay đổi thành phố
        updateShippingFee();
        
        // Hiển thị thông tin chi tiết về phí vận chuyển
        showShippingFeeInfo();
        
        // Hiển thị thông tin trong console
        System.out.println("✓ Đã cập nhật thành phố theo quốc gia: " + selectedCountry);
    }
    

    
    private void loadVietnamCities() {
        // Dữ liệu thành phố Việt Nam
        List<String> cities = new ArrayList<>();
        
        // Thành phố trực thuộc Trung ương (5)
        String[] vietnamCities = {
            "TP Hà Nội", "TPHCM", "TP Đà Nẵng", "TP Hải Phòng", "TP Cần Thơ"
        };
        
        // Tỉnh miền Bắc (12)
        String[] northernProvinces = {
            "Cao Bằng", "Lạng Sơn", "Lai Châu", "Điện Biên", "Sơn La", "Tuyên Quang",
            "Lào Cai", "Thái Nguyên", "Phú Thọ", "Bắc Ninh", "Hưng Yên", "Ninh Bình"
        };
        
        // Tỉnh miền Trung (11)
        String[] centralProvinces = {
            "Thanh Hóa", "Nghệ An", "Hà Tĩnh", "Quảng Trị", "Quảng Ngãi", "Gia Lai",
            "Khánh Hòa", "Lâm Đồng", "Đắk Lắk", "TP Huế", "TP Đà Nẵng"
        };
        
        // Tỉnh miền Nam (6)
        String[] southernProvinces = {
            "Đồng Nai", "Tây Ninh", "Vĩnh Long", "Đồng Tháp", "Cà Mau", "An Giang"
        };
        
        // Thêm thành phố trước (ưu tiên hiển thị)
        for (String city : vietnamCities) {
            cities.add(city);
            City.addItem(city);
        }
        
        // Thêm tỉnh miền Bắc
        for (String province : northernProvinces) {
            cities.add(province);
            City.addItem(province);
        }
        
        // Thêm tỉnh miền Trung
        for (String province : centralProvinces) {
            cities.add(province);
            City.addItem(province);
        }
        
        // Thêm tỉnh miền Nam
        for (String province : southernProvinces) {
            cities.add(province);
            City.addItem(province);
        }
        
        City.setSelectedItem("TP Hà Nội");
        
        // Lưu vào cache
        citiesByCountry.put("Việt Nam", cities);
        
        System.out.println("✓ Đã load " + cities.size() + " thành phố/tỉnh Việt Nam");
        System.out.println("✓ Thành phố mặc định: TP Hà Nội");
    }
    

    
    private void showAPIStatus() {
        StringBuilder status = new StringBuilder();
        status.append("🇻🇳 VIỆT NAM ONLY\n\n");
        status.append("✅ Chỉ hỗ trợ giao hàng trong nước\n");
        status.append("📊 Thành phố: ").append(citiesByCountry.getOrDefault("Việt Nam", new ArrayList<>()).size()).append(" tỉnh/thành\n");
        status.append("🔗 Nguồn: Dữ liệu local\n");
        status.append("🌍 Phạm vi: Việt Nam\n");
        
        // In thông tin ra console
        System.out.println("🇻🇳 Chế độ chỉ giao hàng trong nước");
    }
    
    /**
     * Kiểm tra và hiển thị trạng thái của form sau khi khởi tạo
     */
    private void checkFormStatus() {
        System.out.println("\n=== TRẠNG THÁI FORM ĐẶT HÀNG ===");
        System.out.println("🇻🇳 Quốc gia: " + Country.getSelectedItem() + " (Enabled: " + Country.isEnabled() + ")");
        System.out.println("🏙️ Thành phố: " + City.getSelectedItem() + " (Số lượng: " + City.getItemCount() + ")");
        System.out.println("👤 Họ tên: " + (jTextField3.getText().isEmpty() ? "Chưa nhập" : "Đã nhập"));
        System.out.println("📱 Số điện thoại: " + (jTextField2.getText().isEmpty() ? "Chưa nhập" : "Đã nhập"));
        System.out.println("📍 Địa chỉ: " + (jTextField1.getText().isEmpty() ? "Chưa nhập" : "Đã nhập"));
        System.out.println("💳 Thanh toán: " + (jRadioButton3.isSelected() ? "Khi nhận hàng" : "Chưa chọn"));
        System.out.println("📦 Sản phẩm: " + orderItems.size() + " sản phẩm");
        System.out.println("================================\n");
    }
    
    private void loadCoupons() {
        // Không cần load coupons vào ComboBox nữa vì chỉ sử dụng TextField
        // Sử dụng JTextField4 để nhập mã giảm giá
    }
    
    private void initializeTable() {
        DefaultTableModel model = new DefaultTableModel();
        model.addColumn("Tên Sản Phẩm");
        model.addColumn("Số Lượng");
        model.addColumn("Đơn giá");
        model.addColumn("Thành Tiền");
        model.addColumn("Thành phố");
        model.addColumn("Quốc gia");
        model.addColumn("Họ và Tên");
        model.addColumn("Số nhà");
        model.addColumn("Số điện thoại");
        model.addColumn("Thanh toán");
        
        jTable1.setModel(model);
    }
    
    private void loadCartData() {
        orderItems.clear();
        
        // Lấy thông tin từ form
        String customerName = jTextField3.getText();
        String address = jTextField1.getText();
        String phone = jTextField2.getText();
        String paymentMethod = "Thanh toán khi nhận hàng";
        
        // Nếu chưa có thông tin user, để trống
        if (customerName == null || customerName.trim().isEmpty()) {
            customerName = "";
        }
        if (address == null || address.trim().isEmpty()) {
            address = "";
        }
        if (phone == null || phone.trim().isEmpty()) {
            phone = "";
        }
        
        // Load dữ liệu từ giỏ hàng thực tế
        if (currentUser != null) {
            try {
                poly.dao.ShoppingCartDAO cartDAO = new poly.dao.impl.ShoppingCartDAOImpl();
                poly.entity.ShoppingCart cart = cartDAO.findByUserId(currentUser.getUserId());
                
                if (cart != null) {
                    List<poly.entity.CartItem> cartItems = cartDAO.findCartItemsByCartId(cart.getCartId());
                    poly.dao.ProductDAO productDAO = new poly.dao.impl.ProductDAOImpl();
                    
                                        for (poly.entity.CartItem cartItem : cartItems) {
                        if (cartItem != null && cartItem.getProductId() != null) {
                            poly.entity.Product product = productDAO.selectById(cartItem.getProductId());
                            if (product != null) {
                                // Loading from DB Storedogo2
                                
                                OrderRequestItem orderItem = new OrderRequestItem();
                                orderItem.setProductId(product.getProductId()); // Thêm ProductID
                                orderItem.setProductName(product.getProductName());
                                orderItem.setQuantity(cartItem.getQuantity());
                                orderItem.setUnitPrice(product.getUnitPrice());
                                orderItem.calculateTotalPrice();
                                orderItem.setCity((String) City.getSelectedItem()); // Lấy từ form
                                orderItem.setCountry((String) Country.getSelectedItem()); // Lấy từ form
                                orderItem.setCustomerName(customerName);
                                orderItem.setAddress(address);
                                orderItem.setPhone(phone);
                                orderItem.setPaymentMethod(paymentMethod);
                                orderItems.add(orderItem);
                                
                                // Created order item
                            } else {
                                System.err.println("✗ Không tìm thấy sản phẩm với ID: " + cartItem.getProductId() + " trong database Storedogo2");
                            }
                        }
                    }
                }
            } catch (Exception e) {
                JOptionPane.showMessageDialog(this, 
                    "Lỗi khi tải dữ liệu giỏ hàng: " + e.getMessage(), 
                    "Lỗi", JOptionPane.ERROR_MESSAGE);
            }
        }
        
        // Nếu không có dữ liệu từ giỏ hàng, hiển thị thông báo
        if (orderItems.isEmpty()) {
            System.out.println("🛒 Giỏ hàng trống - Không có sản phẩm nào để đặt hàng");
            JOptionPane.showMessageDialog(this,
                "🛒 Giỏ hàng của bạn đang trống!\n" +
                "Vui lòng thêm sản phẩm vào giỏ hàng trước khi đặt hàng.",
                "Giỏ hàng trống",
                JOptionPane.INFORMATION_MESSAGE);
        }
        
        updateTable();
    }
    
    /**
     * Load chỉ những sản phẩm đã được chọn từ giỏ hàng
     */
    private void loadSelectedCartItems(List<poly.entity.CartItem> selectedCartItems) {
        orderItems.clear();
        
        // Lấy thông tin từ form
        String customerName = jTextField3.getText();
        String address = jTextField1.getText();
        String phone = jTextField2.getText();
        String paymentMethod = "Thanh toán khi nhận hàng";
        
        // Nếu chưa có thông tin user, để trống
        if (customerName == null || customerName.trim().isEmpty()) {
            customerName = "";
        }
        if (address == null || address.trim().isEmpty()) {
            address = "";
        }
        if (phone == null || phone.trim().isEmpty()) {
            phone = "";
        }
        
        // Load chỉ những sản phẩm đã được chọn
        if (selectedCartItems != null && !selectedCartItems.isEmpty()) {
            try {
                poly.dao.ProductDAO productDAO = new poly.dao.impl.ProductDAOImpl();
                
                for (poly.entity.CartItem cartItem : selectedCartItems) {
                    if (cartItem != null && cartItem.getProductId() != null) {
                        poly.entity.Product product = productDAO.selectById(cartItem.getProductId());
                        if (product != null) {
                            OrderRequestItem orderItem = new OrderRequestItem();
                            orderItem.setProductId(product.getProductId());
                            orderItem.setProductName(product.getProductName());
                            orderItem.setQuantity(cartItem.getQuantity());
                            orderItem.setUnitPrice(product.getUnitPrice());
                            orderItem.calculateTotalPrice();
                            orderItem.setCity((String) City.getSelectedItem());
                            orderItem.setCountry((String) Country.getSelectedItem());
                            orderItem.setCustomerName(customerName);
                            orderItem.setAddress(address);
                            orderItem.setPhone(phone);
                            orderItem.setPaymentMethod(paymentMethod);
                            orderItems.add(orderItem);
                            
                            System.out.println("✓ Đã chọn sản phẩm: " + product.getProductName() + 
                                " - Số lượng: " + cartItem.getQuantity());
                        } else {
                            System.err.println("✗ Không tìm thấy sản phẩm với ID: " + cartItem.getProductId());
                        }
                    }
                }
            } catch (Exception e) {
                JOptionPane.showMessageDialog(this, 
                    "Lỗi khi tải dữ liệu sản phẩm đã chọn: " + e.getMessage(), 
                    "Lỗi", JOptionPane.ERROR_MESSAGE);
            }
        }
        
        // Nếu không có sản phẩm nào được chọn, hiển thị thông báo
        if (orderItems.isEmpty()) {
            System.out.println("⚠️ Không có sản phẩm nào được chọn để đặt hàng");
            JOptionPane.showMessageDialog(this,
                "⚠️ Không có sản phẩm nào được chọn!\n" +
                "Vui lòng chọn ít nhất một sản phẩm từ giỏ hàng.",
                "Không có sản phẩm được chọn",
                JOptionPane.WARNING_MESSAGE);
        } else {
            System.out.println("✓ Đã load " + orderItems.size() + " sản phẩm đã chọn");
        }
        
        updateTable();
        updateTotals();
    }
    
    private void updateTable() {
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        model.setRowCount(0);
        
        for (OrderRequestItem item : orderItems) {
            model.addRow(new Object[]{
                item.getProductName() != null ? item.getProductName() : "N/A",
                item.getQuantity() != null ? item.getQuantity() : 0,
                formatCurrency(item.getUnitPrice()),
                formatCurrency(item.getTotalPrice()),
                item.getCity() != null ? item.getCity() : "", // Thành phố
                item.getCountry() != null ? item.getCountry() : "", // Quốc gia
                item.getCustomerName() != null ? item.getCustomerName() : "", // Họ và Tên
                item.getAddress() != null ? item.getAddress() : "", // Số nhà
                item.getPhone() != null ? item.getPhone() : "", // Số điện thoại
                item.getPaymentMethod() != null ? item.getPaymentMethod() : "N/A"
            });
        }
        
        // Bảng đã được cập nhật
    }
    
    private void updateTotals() {
        BigDecimal subtotal = BigDecimal.ZERO;
        for (OrderRequestItem item : orderItems) {
            if (item.getTotalPrice() != null) {
                subtotal = subtotal.add(item.getTotalPrice());
            }
        }
        
        currentOrder.setSubtotal(subtotal);
        jLabel5.setText(formatCurrency(subtotal));
        
        // Nếu giỏ hàng trống, hiển thị 0 và không tính phí vận chuyển
        if (orderItems.isEmpty()) {
            jLabel8.setText("0 ₫"); // Phí vận chuyển
            jLabel10.setText("0 ₫"); // Tổng cộng
            return;
        }
        
        // Tính tổng tất cả sản phẩm
        updateShippingFee();
    }
    
    private void updateShippingFee() {
        // Nếu giỏ hàng trống, không tính phí vận chuyển
        if (orderItems.isEmpty()) {
            currentOrder.setShippingFee(BigDecimal.ZERO);
            jLabel8.setText("0 ₫");
            updateTotalAmount();
            return;
        }
        
        String selectedCity = (String) City.getSelectedItem();
        String selectedCountry = (String) Country.getSelectedItem();
        
        if (selectedCity != null && selectedCountry != null) {
            // Tính phí vận chuyển dựa trên địa điểm và số lượng đơn hàng
            BigDecimal shippingFee = calculateShippingFee(selectedCity, selectedCountry);
            currentOrder.setShippingFee(shippingFee);
            jLabel8.setText(formatCurrency(shippingFee));
            
            updateTotalAmount();
            
            // Hiển thị thông tin chi tiết về phí vận chuyển
            showShippingFeeInfo();
            
            // Cập nhật phí vận chuyển
        }
    }
    
    private BigDecimal calculateShippingFee(String city, String country) {
        // Tính phí vận chuyển chỉ cho Việt Nam
        BigDecimal baseShippingFee;
        
        if ("Việt Nam".equals(country)) {
            if ("TP Hà Nội".equals(city) || "TPHCM".equals(city)) {
                baseShippingFee = new BigDecimal("15000"); // 15,000 ₫ cho Hà Nội và TP.HCM
            } else {
                baseShippingFee = new BigDecimal("25000"); // 25,000 ₫ cho các tỉnh khác
            }
        } else {
            // Fallback cho trường hợp không phải Việt Nam
            baseShippingFee = new BigDecimal("25000");
        }
        
        // Tính phí vận chuyển dựa trên số lượng đơn hàng
        int orderCount = orderItems.size();
        BigDecimal finalShippingFee = baseShippingFee;
        
        if (orderCount > 1) {
            // Tăng phí vận chuyển theo số lượng đơn hàng
            if (orderCount <= 3) {
                // 2-3 đơn hàng: tăng 20%
                finalShippingFee = baseShippingFee.multiply(new BigDecimal("1.2"));
            } else if (orderCount <= 5) {
                // 4-5 đơn hàng: tăng 40%
                finalShippingFee = baseShippingFee.multiply(new BigDecimal("1.4"));
            } else if (orderCount <= 8) {
                // 6-8 đơn hàng: tăng 60%
                finalShippingFee = baseShippingFee.multiply(new BigDecimal("1.6"));
            } else {
                // 9+ đơn hàng: tăng 80%
                finalShippingFee = baseShippingFee.multiply(new BigDecimal("1.8"));
            }
        }
        
        // Tính phí vận chuyển
        
        return finalShippingFee;
    }
    
    private void showShippingFeeInfo() {
        String selectedCity = (String) City.getSelectedItem();
        String selectedCountry = (String) Country.getSelectedItem();
        int orderCount = orderItems.size();
        
        if (selectedCity != null && selectedCountry != null) {
            // Tính phí cơ bản
            BigDecimal baseFee = calculateBaseShippingFee(selectedCity, selectedCountry);
            BigDecimal currentFee = calculateShippingFee(selectedCity, selectedCountry);
            
            // Tạo thông báo chi tiết
            StringBuilder info = new StringBuilder();
            info.append("📦 THÔNG TIN PHÍ VẬN CHUYỂN\n\n");
            info.append("📍 Địa điểm: ").append(selectedCity).append(", ").append(selectedCountry).append("\n");
            info.append("📊 Số lượng đơn hàng: ").append(orderCount).append("\n");
            info.append("💰 Phí cơ bản: ").append(formatCurrency(baseFee)).append("\n");
            
            // Thêm thông tin chi tiết cho Việt Nam
            if ("Việt Nam".equals(selectedCountry)) {
                String region = getVietnamRegion(selectedCity);
                info.append("🏛️ Khu vực: ").append(region).append("\n");
            }
            
            if (orderCount > 1) {
                BigDecimal increase = currentFee.subtract(baseFee);
                String rate = orderCount <= 3 ? "20%" : 
                    orderCount <= 5 ? "40%" : 
                    orderCount <= 8 ? "60%" : "80%";
                
                info.append("📈 Tăng thêm: ").append(formatCurrency(increase)).append(" (").append(rate).append(")\n");
                info.append("💳 Phí cuối cùng: ").append(formatCurrency(currentFee)).append("\n\n");
                info.append("ℹ️ Phí vận chuyển tăng theo số lượng đơn hàng:\n");
                info.append("• 1 đơn hàng: Phí cơ bản\n");
                info.append("• 2-3 đơn hàng: +20%\n");
                info.append("• 4-5 đơn hàng: +40%\n");
                info.append("• 6-8 đơn hàng: +60%\n");
                info.append("• 9+ đơn hàng: +80%");
            } else {
                info.append("💳 Phí cuối cùng: ").append(formatCurrency(currentFee));
            }
            
            // Hiển thị tooltip hoặc thông báo nhỏ
            jLabel8.setToolTipText(info.toString());
            
            // Thông tin phí vận chuyển
        }
    }
    
    private String getVietnamRegion(String city) {
        // Thành phố trực thuộc Trung ương (5)
        String[] centralCities = {
            "TP Hà Nội", "TPHCM", "TP Đà Nẵng", "TP Hải Phòng", "TP Cần Thơ"
        };
        
        // Tỉnh miền Bắc (12)
        String[] northernProvinces = {
            "Cao Bằng", "Lạng Sơn", "Lai Châu", "Điện Biên", "Sơn La", "Tuyên Quang",
            "Lào Cai", "Thái Nguyên", "Phú Thọ", "Bắc Ninh", "Hưng Yên", "Ninh Bình"
        };
        
        // Tỉnh miền Trung (11)
        String[] centralProvinces = {
            "Thanh Hóa", "Nghệ An", "Hà Tĩnh", "Quảng Trị", "Quảng Ngãi", "Gia Lai",
            "Khánh Hòa", "Lâm Đồng", "Đắk Lắk", "TP Huế", "TP Đà Nẵng"
        };
        
        // Tỉnh miền Nam (6)
        String[] southernProvinces = {
            "TPHCM", "Đồng Nai", "Tây Ninh", "Vĩnh Long", "Đồng Tháp", "Cà Mau"
        };
        
        // Kiểm tra thành phố trực thuộc Trung ương
        for (String centralCity : centralCities) {
            if (centralCity.equals(city)) {
                return "Thành phố trực thuộc Trung ương";
            }
        }
        
        // Kiểm tra tỉnh miền Bắc
        for (String province : northernProvinces) {
            if (province.equals(city)) {
                return "Tỉnh miền Bắc";
            }
        }
        
        // Kiểm tra tỉnh miền Trung
        for (String province : centralProvinces) {
            if (province.equals(city)) {
                return "Tỉnh miền Trung";
            }
        }
        
        // Kiểm tra tỉnh miền Nam
        for (String province : southernProvinces) {
            if (province.equals(city)) {
                return "Tỉnh miền Nam";
            }
        }
        
        return "Thành phố khác";
    }
    
    private void showVietnamProvincesInfo() {
        StringBuilder info = new StringBuilder();
        info.append("🇻🇳 THỐNG KÊ TỈNH THÀNH VIỆT NAM (2025)\n\n");
        
        // Thống kê theo khu vực - 34 tỉnh thành hiện tại
        int centralCities = 5; // Thành phố trực thuộc Trung ương
        int northernProvinces = 12; // Tỉnh miền Bắc
        int centralProvinces = 11; // Tỉnh miền Trung
        int southernProvinces = 6; // Tỉnh miền Nam
        int total = centralCities + northernProvinces + centralProvinces + southernProvinces;
        
        info.append("📊 Tổng số: ").append(total).append(" tỉnh/thành\n\n");
        info.append("🏛️ Thành phố trực thuộc Trung ương: ").append(centralCities).append("\n");
        info.append("🏔️ Tỉnh miền Bắc: ").append(northernProvinces).append("\n");
        info.append("🌊 Tỉnh miền Trung: ").append(centralProvinces).append("\n");
        info.append("🌴 Tỉnh miền Nam: ").append(southernProvinces).append("\n\n");
        
        info.append("💰 PHÍ VẬN CHUYỂN THEO KHU VỰC:\n");
        info.append("• Thành phố trực thuộc Trung ương: 15,000-20,000 ₫\n");
        info.append("• Tỉnh miền Bắc: 25,000 ₫\n");
        info.append("• Tỉnh miền Trung: 30,000 ₫\n");
        info.append("• Tỉnh miền Nam: 28,000 ₫\n\n");
        
        info.append("🏛️ THÀNH PHỐ TRỰC THUỘC TRUNG ƯƠNG:\n");
        info.append("• TP Hà Nội, TPHCM, TP Đà Nẵng, TP Hải Phòng, TP Cần Thơ\n\n");
        
        info.append("📋 DANH SÁCH 34 TỈNH THÀNH SAU SÁP NHẬP (2025):\n");
        info.append("• Thành phố: TP Hà Nội, TPHCM, TP Đà Nẵng, TP Hải Phòng, TP Cần Thơ\n");
        info.append("• Tỉnh miền Bắc: Cao Bằng, Lạng Sơn, Lai Châu, Điện Biên, Sơn La, Tuyên Quang, Lào Cai, Thái Nguyên, Phú Thọ, Bắc Ninh, Hưng Yên, Ninh Bình\n");
        info.append("• Tỉnh miền Trung: Thanh Hóa, Nghệ An, Hà Tĩnh, Quảng Trị, Quảng Ngãi, Gia Lai, Khánh Hòa, Lâm Đồng, Đắk Lắk, TP Huế\n");
        info.append("• Tỉnh miền Nam: Đồng Nai, Tây Ninh, Vĩnh Long, Đồng Tháp, Cà Mau, An Giang\n\n");
        info.append("📊 THỐNG KÊ CHI TIẾT:\n");
        info.append("• TP Hà Nội: 8.718.000 dân, 3.359,82 km²\n");
        info.append("• TPHCM: 14.002.598 dân, 6.772,59 km²\n");
        info.append("• TP Đà Nẵng: 3.065.628 dân, 11.859,59 km²\n");
        info.append("• TP Hải Phòng: 4.664.124 dân, 3.194,72 km²\n");
        info.append("• TP Cần Thơ: 4.199.824 dân, 6.360,83 km²\n\n");
        
        info.append("✅ Đã cập nhật theo danh sách chính xác 34 tỉnh thành 2025\n\n");
        
        info.append("ℹ️ Chế độ chỉ giao hàng trong nước");
        
        // Hiển thị tooltip cho City ComboBox
        City.setToolTipText(info.toString());
        
        // Thống kê tỉnh thành Việt Nam
    }
    
    private BigDecimal calculateBaseShippingFee(String city, String country) {
        // Tính phí vận chuyển cơ bản chỉ cho Việt Nam
        if ("Việt Nam".equals(country)) {
            return calculateVietnamShippingFee(city);
        } else {
            return new BigDecimal("25000"); // Fallback
        }
    }
    
    private BigDecimal calculateVietnamShippingFee(String city) {
        // Thành phố trực thuộc Trung ương (5)
        String[] centralCities = {
            "TP Hà Nội", "TPHCM", "TP Đà Nẵng", "TP Hải Phòng", "TP Cần Thơ"
        };
        
        // Tỉnh miền Bắc (12)
        String[] northernProvinces = {
            "Cao Bằng", "Lạng Sơn", "Lai Châu", "Điện Biên", "Sơn La", "Tuyên Quang",
            "Lào Cai", "Thái Nguyên", "Phú Thọ", "Bắc Ninh", "Hưng Yên", "Ninh Bình"
        };
        
        // Tỉnh miền Trung (11)
        String[] centralProvinces = {
            "Thanh Hóa", "Nghệ An", "Hà Tĩnh", "Quảng Trị", "Quảng Ngãi", "Gia Lai",
            "Khánh Hòa", "Lâm Đồng", "Đắk Lắk", "TP Huế", "TP Đà Nẵng"
        };
        
        // Tỉnh miền Nam (6)
        String[] southernProvinces = {
            "TPHCM", "Đồng Nai", "Tây Ninh", "Vĩnh Long", "Đồng Tháp", "Cà Mau"
        };
        
        // Kiểm tra thành phố trực thuộc Trung ương
        for (String centralCity : centralCities) {
            if (centralCity.equals(city)) {
                if ("TP Hà Nội".equals(city) || "TPHCM".equals(city)) {
                    return new BigDecimal("15000"); // 15,000 ₫
                } else {
                    return new BigDecimal("20000"); // 20,000 ₫
                }
            }
        }
        
        // Kiểm tra tỉnh miền Bắc
        for (String province : northernProvinces) {
            if (province.equals(city)) {
                return new BigDecimal("25000"); // 25,000 ₫
            }
        }
        
        // Kiểm tra tỉnh miền Trung
        for (String province : centralProvinces) {
            if (province.equals(city)) {
                return new BigDecimal("30000"); // 30,000 ₫
            }
        }
        
        // Kiểm tra tỉnh miền Nam
        for (String province : southernProvinces) {
            if (province.equals(city)) {
                return new BigDecimal("28000"); // 28,000 ₫
            }
        }
        
        // Mặc định
        return new BigDecimal("25000"); // 25,000 ₫
    }
    
    private void updateTotalAmount() {
        // Nếu giỏ hàng trống, hiển thị 0
        if (orderItems.isEmpty()) {
            currentOrder.setTotalAmount(BigDecimal.ZERO);
            jLabel11.setText("0 ₫");
            return;
        }
        
        BigDecimal total = currentOrder.getSubtotal();
        if (total == null) {
            total = BigDecimal.ZERO;
        }
        
        if (currentOrder.getShippingFee() != null) {
            total = total.add(currentOrder.getShippingFee());
        }
        if (currentOrder.getDiscount() != null) {
            total = total.subtract(currentOrder.getDiscount());
        }
        
        currentOrder.setTotalAmount(total);
        jLabel11.setText(formatCurrency(total));
    }
    
    private void applyCustomerInfo() {
        // Lấy thông tin từ form
        String customerName = jTextField3.getText().trim();
        String phone = jTextField2.getText().trim();
        String address = jTextField1.getText().trim();
        String city = (String) City.getSelectedItem();
        String country = (String) Country.getSelectedItem();
        
        // Kiểm tra phương thức thanh toán
        if (!jRadioButton3.isSelected()) {
            JOptionPane.showMessageDialog(this, 
                "❌ Vui lòng chọn phương thức thanh toán trước khi áp dụng thông tin khách hàng!", 
                "Lỗi", 
                JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        // Validate thông tin
        if (customerName.isEmpty() || phone.isEmpty() || address.isEmpty() || city == null || country == null) {
            JOptionPane.showMessageDialog(this, "Vui lòng điền đầy đủ thông tin khách hàng!");
            return;
        }
        
        // Kiểm tra có dòng nào được chọn không
        int selectedRow = jTable1.getSelectedRow();
        
        if (selectedRow >= 0 && selectedRow < orderItems.size()) {
            // Có chọn dòng → chỉ cập nhật cho sản phẩm được chọn
            OrderRequestItem selectedItem = orderItems.get(selectedRow);
            selectedItem.setCustomerName(customerName);
            selectedItem.setPhone(phone);
            selectedItem.setAddress(address);
            selectedItem.setCity(city);
            selectedItem.setCountry(country);
            
            // Cập nhật bảng
            updateTable();
            
            // Áp dụng thông tin khách hàng thành công
            JOptionPane.showMessageDialog(this, 
                "✓ Áp dụng thông tin khách hàng thành công!\n\n" +
                "📋 Thông tin đã cập nhật cho sản phẩm:\n" +
                "• " + selectedItem.getProductName() + "\n" +
                "• Họ và tên: " + customerName + "\n" +
                "• Số điện thoại: " + phone + "\n" +
                "• Số nhà: " + address + "\n" +
                "• Thành phố: " + city + "\n" +
                "• Quốc gia: " + country,
                "Thành công", 
                JOptionPane.INFORMATION_MESSAGE);
        } else {
            // Không chọn dòng → cập nhật cho tất cả sản phẩm
            int updatedCount = 0;
            for (OrderRequestItem item : orderItems) {
                item.setCustomerName(customerName);
                item.setPhone(phone);
                item.setAddress(address);
                item.setCity(city);
                item.setCountry(country);
                updatedCount++;
            }
            
            // Cập nhật bảng
            updateTable();
            
            // Áp dụng thông tin khách hàng thành công
            JOptionPane.showMessageDialog(this, 
                "✓ Áp dụng thông tin khách hàng thành công!\n\n" +
                "📋 Thông tin đã cập nhật cho tất cả sản phẩm:\n" +
                "• Họ và tên: " + customerName + "\n" +
                "• Số điện thoại: " + phone + "\n" +
                "• Số nhà: " + address + "\n" +
                "• Thành phố: " + city + "\n" +
                "• Quốc gia: " + country + "\n\n" +
                "📦 Đã cập nhật cho " + updatedCount + " sản phẩm",
                "Thành công", 
                JOptionPane.INFORMATION_MESSAGE);
        }
    }
    
    private void applyCouponFromTextField() {
        // Lấy mã giảm giá từ TextField
        String couponCode = jTextField4.getText().trim();
        
        // Nếu không nhập mã thì không làm gì cả
        if (couponCode.isEmpty()) {
            return;
        }
        
        try {
            // Kiểm tra mã giảm giá có tồn tại và hoạt động không
            String sql = "SELECT CouponID, DiscountType, DiscountValue, Description, StartDate, EndDate, Status " +
                        "FROM Coupons " +
                        "WHERE CouponID = ?";
            
            java.sql.ResultSet rs = poly.util.XJdbc.executeQuery(sql, couponCode);
            
            if (rs.next()) {
                String discountType = rs.getString("DiscountType");
                BigDecimal discountValue = rs.getBigDecimal("DiscountValue");
                String description = rs.getString("Description");
                String status = rs.getString("Status");
                java.sql.Date startDate = rs.getDate("StartDate");
                java.sql.Date endDate = rs.getDate("EndDate");
                
                // Kiểm tra trạng thái hoạt động
                if (!"Hoạt động".equals(status)) {
                    JOptionPane.showMessageDialog(this, 
                        "❌ Mã giảm giá không hoạt động!\n\n" +
                        "🎫 Mã: " + couponCode + "\n" +
                        "📊 Trạng thái: " + status + "\n" +
                        "Vui lòng chọn mã giảm giá khác.", 
                        "Mã giảm giá không hợp lệ", 
                        JOptionPane.WARNING_MESSAGE);
                    return;
                }
                
                // Kiểm tra thời gian hiệu lực
                java.sql.Date currentDate = new java.sql.Date(System.currentTimeMillis());
                if (currentDate.before(startDate) || currentDate.after(endDate)) {
                    JOptionPane.showMessageDialog(this, 
                        "❌ Mã giảm giá đã hết hạn hoặc chưa có hiệu lực!\n\n" +
                        "🎫 Mã: " + couponCode + "\n" +
                        "📅 Ngày bắt đầu: " + startDate + "\n" +
                        "📅 Ngày kết thúc: " + endDate + "\n" +
                        "📅 Ngày hiện tại: " + currentDate + "\n" +
                        "Vui lòng chọn mã giảm giá khác.", 
                        "Mã giảm giá không hợp lệ", 
                        JOptionPane.WARNING_MESSAGE);
                    return;
                }
                
                // Tính toán giảm giá
                BigDecimal discount = BigDecimal.ZERO;
                if (currentOrder.getSubtotal() != null && currentOrder.getSubtotal().compareTo(BigDecimal.ZERO) > 0) {
                    if ("Percent".equals(discountType)) {
                        // Giảm theo phần trăm
                        discount = currentOrder.getSubtotal().multiply(discountValue).divide(new BigDecimal("100"), 2, BigDecimal.ROUND_HALF_UP);
                    } else {
                        // Giảm theo số tiền cố định
                        discount = discountValue;
                        
                        // Kiểm tra giảm giá không được vượt quá tổng tiền
                        if (discount.compareTo(currentOrder.getSubtotal()) > 0) {
                            discount = currentOrder.getSubtotal();
                        }
                    }
                }
                
                // Cập nhật thông tin đơn hàng
                currentOrder.setDiscount(discount);
                currentOrder.setCouponId(couponCode);
                
                // Cập nhật hiển thị
                jLabel9.setText(formatCurrency(discount));
                
                // Tính lại tổng tiền
                updateTotalAmount();
                
                // Đánh dấu mã giảm giá đã sử dụng
                markCouponAsUsed(couponCode);
                
                // Hiển thị thông báo thành công
                StringBuilder message = new StringBuilder();
                message.append("🎉 Áp dụng mã giảm giá thành công!\n\n");
                message.append("🎫 Mã: ").append(couponCode).append("\n");
                message.append("📝 Mô tả: ").append(description).append("\n");
                message.append("💵 Số tiền được giảm: ").append(formatCurrency(discount)).append("\n");
                message.append("📊 Tổng cộng mới: ").append(formatCurrency(currentOrder.getTotalAmount()));
                
                JOptionPane.showMessageDialog(this, 
                    message.toString(),
                    "Thành công", 
                    JOptionPane.INFORMATION_MESSAGE);
                
            } else {
                JOptionPane.showMessageDialog(this, 
                    "❌ Mã giảm giá không tồn tại!\n\n" +
                    "🎫 Mã: " + couponCode + "\n" +
                    "Vui lòng kiểm tra lại và thử lại.", 
                    "Mã giảm giá không hợp lệ", 
                    JOptionPane.WARNING_MESSAGE);
            }
            
        } catch (Exception e) {
            System.err.println("✗ Lỗi khi áp dụng mã giảm giá: " + e.getMessage());
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, 
                "❌ Lỗi khi áp dụng mã giảm giá!\n\n" +
                "Chi tiết lỗi: " + e.getMessage() + "\n" +
                "Vui lòng thử lại.", 
                "Lỗi", 
                JOptionPane.ERROR_MESSAGE);
        }
    }
    

    
    private void applyCoupon() {
        // Gọi phương thức áp dụng từ TextField
        applyCouponFromTextField();
    }
    
    /**
     * Ghi log việc áp dụng mã giảm giá (không vô hiệu hóa)
     * @param couponCode Mã giảm giá đã được áp dụng
     */
    private void markCouponAsUsed(String couponCode) {
        try {
            // Chỉ ghi log, không vô hiệu hóa mã giảm giá
            System.out.println("✅ Đã áp dụng mã giảm giá " + couponCode + " (mã vẫn có thể sử dụng lại)");
        } catch (Exception e) {
            System.err.println("✗ Lỗi khi xử lý mã giảm giá: " + e.getMessage());
        }
    }
    
    private void updateSelectedRowData() {
        // Lấy thông tin từ form
        String customerName = jTextField3.getText().trim();
        String phone = jTextField2.getText().trim();
        String address = jTextField1.getText().trim();
        String city = (String) City.getSelectedItem();
        String country = (String) Country.getSelectedItem();
        String paymentMethod = jRadioButton3.isSelected() ? "Thanh toán khi nhận hàng" : "Chưa chọn";
        
        // Kiểm tra phương thức thanh toán
        if (!jRadioButton3.isSelected()) {
            JOptionPane.showMessageDialog(this, 
                "❌ Vui lòng chọn phương thức thanh toán trước khi cập nhật thông tin!", 
                "Lỗi", 
                JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        // Validate thông tin
        if (customerName.isEmpty() || phone.isEmpty() || address.isEmpty() || city == null || country == null) {
            JOptionPane.showMessageDialog(this, 
                "❌ Vui lòng điền đầy đủ thông tin:\n" +
                "• Họ và tên\n" +
                "• Số điện thoại\n" +
                "• Số nhà\n" +
                "• Thành phố\n" +
                "• Quốc gia", 
                "Lỗi", 
                JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        // Kiểm tra có dòng nào được chọn không
        int selectedRow = jTable1.getSelectedRow();
        
        if (selectedRow >= 0 && selectedRow < orderItems.size()) {
            // Có chọn dòng → chỉ cập nhật cho sản phẩm được chọn
            OrderRequestItem selectedItem = orderItems.get(selectedRow);
            selectedItem.setCustomerName(customerName);
            selectedItem.setPhone(phone);
            selectedItem.setAddress(address);
            selectedItem.setCity(city);
            selectedItem.setCountry(country);
            selectedItem.setPaymentMethod(paymentMethod);
            
            // Cập nhật bảng
            updateTable();
            
            // Hiển thị thông báo thành công
            StringBuilder message = new StringBuilder();
            message.append("✓ Cập nhật thông tin thành công!\n\n");
            message.append("📋 Thông tin đã cập nhật cho sản phẩm:\n");
            message.append("• " + selectedItem.getProductName() + "\n");
            message.append("• Họ và tên: ").append(customerName).append("\n");
            message.append("• Số điện thoại: ").append(phone).append("\n");
            message.append("• Số nhà: ").append(address).append("\n");
            message.append("• Thành phố: ").append(city).append("\n");
            message.append("• Quốc gia: ").append(country).append("\n");
            message.append("• Hình thức thanh toán: ").append(paymentMethod);
            
            JOptionPane.showMessageDialog(this, 
                message.toString(),
                "Thành công", 
                JOptionPane.INFORMATION_MESSAGE);
        } else {
            // Không chọn dòng → cập nhật cho tất cả sản phẩm
            int updatedCount = 0;
            for (OrderRequestItem item : orderItems) {
                item.setCustomerName(customerName);
                item.setPhone(phone);
                item.setAddress(address);
                item.setCity(city);
                item.setCountry(country);
                item.setPaymentMethod(paymentMethod);
                updatedCount++;
            }
            
            // Cập nhật bảng
            updateTable();
            
            // Hiển thị thông báo thành công
            StringBuilder message = new StringBuilder();
            message.append("✓ Cập nhật thông tin thành công!\n\n");
            message.append("📋 Thông tin đã cập nhật cho tất cả sản phẩm:\n");
            message.append("• Họ và tên: ").append(customerName).append("\n");
            message.append("• Số điện thoại: ").append(phone).append("\n");
            message.append("• Số nhà: ").append(address).append("\n");
            message.append("• Thành phố: ").append(city).append("\n");
            message.append("• Quốc gia: ").append(country).append("\n");
            message.append("• Hình thức thanh toán: ").append(paymentMethod).append("\n\n");
            message.append("📦 Đã cập nhật cho ").append(updatedCount).append(" sản phẩm");
            
            JOptionPane.showMessageDialog(this, 
                message.toString(),
                "Thành công", 
                JOptionPane.INFORMATION_MESSAGE);
        }
    }
    
    private void clearCoupon() {
        // Lưu thông tin trước khi xóa để hiển thị
        BigDecimal oldDiscount = currentOrder.getDiscount();
        String oldCouponId = currentOrder.getCouponId();
        
        // Xóa mã giảm giá
        currentOrder.setDiscount(BigDecimal.ZERO);
        currentOrder.setCouponId(null);
        jLabel9.setText("0 ₫");
        jTextField4.setText("");
        
        // Tính lại tổng tiền
        updateTotalAmount();
        
        // In thông tin debug
        System.out.println("✓ Đã xóa mã giảm giá:");
        if (oldCouponId != null) {
            System.out.println("  - Mã đã xóa: " + oldCouponId);
        }
        if (oldDiscount != null && oldDiscount.compareTo(BigDecimal.ZERO) > 0) {
            System.out.println("  - Số tiền giảm đã xóa: " + formatCurrency(oldDiscount));
        }
        System.out.println("  - Tổng tiền mới: " + formatCurrency(currentOrder.getTotalAmount()));
    }
    
    private BigDecimal calculateDiscount(String couponId, BigDecimal subtotal) {
        if (couponId == null || couponId.trim().isEmpty() || subtotal == null) {
            return BigDecimal.ZERO;
        }
        
        try {
            // Lấy thông tin mã giảm giá từ database
            String sql = "SELECT DiscountType, DiscountValue FROM Coupons WHERE CouponID = ? AND GETDATE() BETWEEN StartDate AND EndDate";
            java.sql.ResultSet rs = poly.util.XJdbc.executeQuery(sql, couponId);
            
            if (rs.next()) {
                String discountType = rs.getString("DiscountType");
                BigDecimal discountValue = rs.getBigDecimal("DiscountValue");
                
                if ("Percent".equals(discountType)) {
                    return subtotal.multiply(discountValue).divide(new BigDecimal("100"));
                } else {
                    return discountValue;
                }
            }
        } catch (Exception e) {
            System.err.println("Lỗi khi tính giảm giá cho mã " + couponId + ": " + e.getMessage());
        }
        
        return BigDecimal.ZERO;
    }
    
    private void confirmOrder() {
        // Kiểm tra xem có sản phẩm nào để đặt hàng không
        if (orderItems.isEmpty()) {
            JOptionPane.showMessageDialog(this,
                "🛒 Không có sản phẩm nào để đặt hàng!\n" +
                "Vui lòng thêm sản phẩm vào giỏ hàng trước.",
                "Giỏ hàng trống",
                JOptionPane.WARNING_MESSAGE);
            return;
        }
        
        // Kiểm tra xem đã cập nhật đầy đủ thông tin cho đơn hàng chưa
        if (!validateOrderInformation()) {
            return;
        }
        
        // Validate form
        if (!validateForm()) {
            return;
        }
        
        // Kiểm tra tồn kho trước khi đặt hàng
        if (!InventoryUpdateUtil.checkInventoryForOrderRequest(orderItems)) {
            return;
        }
        
        // Update order information
        updateOrderFromForm();
        
        // Lấy danh sách sản phẩm sẽ thanh toán
        List<OrderRequestItem> itemsToOrder = new ArrayList<>();
        int selectedRow = jTable1.getSelectedRow();
        
        if (selectedRow >= 0 && selectedRow < orderItems.size()) {
            // Chỉ thanh toán sản phẩm được chọn
            itemsToOrder.add(orderItems.get(selectedRow));
        } else {
            // Thanh toán tất cả sản phẩm nếu không chọn dòng nào
            itemsToOrder.addAll(orderItems);
        }
        
        // Hiển thị thông tin đơn hàng
        StringBuilder orderInfo = new StringBuilder();
        orderInfo.append("=== THÔNG TIN ĐƠN HÀNG ===\n");
        orderInfo.append("Khách hàng: ").append(currentOrder.getCustomerName()).append("\n");
        orderInfo.append("Số điện thoại: ").append(currentOrder.getPhone()).append("\n");
        orderInfo.append("Địa chỉ: ").append(currentOrder.getAddress()).append("\n");
        orderInfo.append("Thành phố: ").append(currentOrder.getCity()).append("\n");
        orderInfo.append("Quốc gia: ").append(currentOrder.getCountry()).append("\n");
        orderInfo.append("Phương thức thanh toán: ").append(currentOrder.getPaymentMethod()).append("\n");
        orderInfo.append("Số sản phẩm: ").append(itemsToOrder.size()).append("\n\n");
        
        orderInfo.append("=== CHI TIẾT SẢN PHẨM ===\n");
        BigDecimal totalSubtotal = BigDecimal.ZERO;
        for (OrderRequestItem item : itemsToOrder) {
            orderInfo.append("- ").append(item.getProductName())
                    .append(" (x").append(item.getQuantity()).append("): ")
                    .append(formatCurrency(item.getTotalPrice())).append("\n");
            totalSubtotal = totalSubtotal.add(item.getTotalPrice());
        }
        
        // Tính phí vận chuyển
        BigDecimal shippingFee = calculateShippingFee(currentOrder.getCity(), currentOrder.getCountry());
        BigDecimal total = totalSubtotal.add(shippingFee);
        
        // Áp dụng giảm giá nếu có
        if (currentOrder.getDiscount() != null && currentOrder.getDiscount().compareTo(BigDecimal.ZERO) > 0) {
            total = total.subtract(currentOrder.getDiscount());
            orderInfo.append("Giảm giá: -").append(formatCurrency(currentOrder.getDiscount())).append("\n");
        }
        
        orderInfo.append("Phí vận chuyển: ").append(formatCurrency(shippingFee)).append("\n");
        orderInfo.append("Tổng cộng: ").append(formatCurrency(total)).append("\n");
        
        int choice = JOptionPane.showConfirmDialog(this, 
            orderInfo.toString(), 
            "Xác nhận đơn hàng", 
            JOptionPane.OK_CANCEL_OPTION,
            JOptionPane.INFORMATION_MESSAGE);
            
        if (choice == JOptionPane.OK_OPTION) {
            try {
                // Tạo đơn hàng với chỉ những sản phẩm được chọn
                OrderRequest orderToSubmit = new OrderRequest();
                orderToSubmit.setUserId(currentUser.getUserId());
                orderToSubmit.setCustomerName(currentOrder.getCustomerName());
                orderToSubmit.setPhone(currentOrder.getPhone());
                orderToSubmit.setAddress(currentOrder.getAddress());
                orderToSubmit.setCity(currentOrder.getCity());
                orderToSubmit.setCountry(currentOrder.getCountry());
                orderToSubmit.setPaymentMethod(currentOrder.getPaymentMethod());
                orderToSubmit.setItems(itemsToOrder);
                orderToSubmit.setSubtotal(totalSubtotal);
                orderToSubmit.setShippingFee(shippingFee);
                orderToSubmit.setDiscount(currentOrder.getDiscount());
                orderToSubmit.setCouponId(currentOrder.getCouponId());
                orderToSubmit.setTotalAmount(total);
                orderToSubmit.setOrderDate(java.time.LocalDateTime.now());
                orderToSubmit.setOrderStatus("Pending");
                
                // Lưu đơn hàng (OrderRequestDAOImpl chỉ tạo đơn hàng, không tạo địa chỉ)
                orderRequestDAO.insert(orderToSubmit);
                int orderId = orderToSubmit.getOrderId();
                
                // Tạo địa chỉ giao hàng với OrderID
                try {
                    AddressDAO addressDAO = new AddressDAOImpl();
                    Address deliveryAddress = new Address();
                    deliveryAddress.setUserId(currentUser.getUserId());
                    deliveryAddress.setAddressLine1(currentOrder.getAddress());
                    deliveryAddress.setCity(currentOrder.getCity());
                    deliveryAddress.setCountry(currentOrder.getCountry());
                    deliveryAddress.setPhone(currentOrder.getPhone());
                    deliveryAddress.setCustomerName(currentOrder.getCustomerName());
                    deliveryAddress.setIsDefault(false);
                    deliveryAddress.setCouponId(currentOrder.getCouponId());
                    deliveryAddress.setOrderId(orderId); // Liên kết với đơn hàng vừa tạo
                    deliveryAddress.setCreatedDate(java.time.LocalDateTime.now());
                    
                    // Insert địa chỉ
                    addressDAO.insert(deliveryAddress);
                    int addressId = deliveryAddress.getAddressId();
                    
                    // Cập nhật DeliveryAddressID trong bảng Orders
                    String updateOrderSQL = "UPDATE Orders SET DeliveryAddressID = ? WHERE OrderID = ?";
                    poly.util.XJdbc.executeUpdate(updateOrderSQL, addressId, orderId);
                    
                    System.out.println("✓ DatHangJDialog: Đã tạo địa chỉ giao hàng thành công");
                    System.out.println("  - OrderID: " + orderId);
                    System.out.println("  - AddressID: " + addressId);
                    System.out.println("  - Địa chỉ: " + currentOrder.getAddress());
                    System.out.println("  - Khách hàng: " + currentOrder.getCustomerName());
                    System.out.println("  - Số điện thoại: " + currentOrder.getPhone());
                    
                } catch (Exception e) {
                    System.err.println("⚠️ Lỗi khi tạo địa chỉ giao hàng: " + e.getMessage());
                    e.printStackTrace();
                    // Không throw exception vì đơn hàng đã tạo thành công
                }
                
                // Trừ kho sau khi đặt hàng thành công
                InventoryUpdateUtil.updateInventoryForOrderRequest(itemsToOrder);
                
                // Ghi dữ liệu vào bảng InventoryTransactions
                recordInventoryTransactions(orderId, itemsToOrder);
                
                // Mã giảm giá đã được áp dụng thành công (không vô hiệu hóa)
                if (currentOrder.getCouponId() != null && !currentOrder.getCouponId().isEmpty()) {
                    System.out.println("🎫 Đã sử dụng mã giảm giá: " + currentOrder.getCouponId() + " (mã vẫn có thể sử dụng lại)");
                }
                
                // Xóa sản phẩm đã đặt khỏi giỏ hàng
                clearShoppingCartItems(itemsToOrder);
                
                StringBuilder successMessage = new StringBuilder();
                successMessage.append("✅ Đặt hàng thành công!\n");
                successMessage.append("📋 Mã đơn hàng: ").append(orderId).append("\n");
                successMessage.append("💰 Tổng tiền: ").append(formatCurrency(total)).append("\n");
                successMessage.append("📦 Đã trừ kho thành công\n");
                successMessage.append("📊 Đã ghi lịch sử kho (").append(itemsToOrder.size()).append(" sản phẩm)\n");
                successMessage.append("🛒 Đã xóa sản phẩm đã đặt khỏi giỏ hàng\n");
                successMessage.append("📍 Đã lưu địa chỉ giao hàng: ").append(currentOrder.getAddress()).append("\n");
                
                // Thêm thông tin về mã giảm giá nếu có
                if (currentOrder.getCouponId() != null && !currentOrder.getCouponId().isEmpty()) {
                    successMessage.append("🎫 Đã áp dụng mã giảm giá: ").append(currentOrder.getCouponId()).append("\n");
                }
                
                successMessage.append("\n🎉 Cảm ơn bạn đã mua hàng!");
                
                JOptionPane.showMessageDialog(this, 
                    successMessage.toString(),
                    "Thành công", 
                    JOptionPane.INFORMATION_MESSAGE);
                
                // Xóa sản phẩm đã đặt khỏi bảng hiển thị
                orderItems.removeAll(itemsToOrder);
                updateTable();
                
                // Đóng dialog
                dispose();
                
            } catch (Exception e) {
                e.printStackTrace();
                JOptionPane.showMessageDialog(this, 
                    "❌ Có lỗi xảy ra khi đặt hàng!\nVui lòng thử lại.\nLỗi: " + e.getMessage(),
                    "Lỗi", 
                    JOptionPane.ERROR_MESSAGE);
                
                // Đóng dialog ngay cả khi có lỗi để tránh confusion
                dispose();
            }
        }
    }
    
    private boolean validateOrderInformation() {
        // Kiểm tra xem đã cập nhật thông tin cho đơn hàng chưa
        boolean hasUpdatedInfo = false;
        
        for (OrderRequestItem item : orderItems) {
            if (item.getCustomerName() != null && !item.getCustomerName().trim().isEmpty() &&
                item.getPhone() != null && !item.getPhone().trim().isEmpty() &&
                item.getAddress() != null && !item.getAddress().trim().isEmpty() &&
                item.getCity() != null && !item.getCity().trim().isEmpty() &&
                item.getCountry() != null && !item.getCountry().trim().isEmpty()) {
                hasUpdatedInfo = true;
                break;
            }
        }
        
        if (!hasUpdatedInfo) {
            JOptionPane.showMessageDialog(this,
                "⚠️ Vui lòng cập nhật đầy đủ thông tin cho đơn hàng trước khi xác nhận!\n\n" +
                "📋 Các thông tin cần thiết:\n" +
                "• Họ và tên\n" +
                "• Số điện thoại\n" +
                "• Địa chỉ\n" +
                "• Thành phố\n" +
                "• Quốc gia\n\n" +
                "💡 Hướng dẫn:\n" +
                "1. Điền thông tin vào form\n" +
                "2. Nhấn nút 'Cập nhật' để áp dụng thông tin\n" +
                "3. Hoặc chọn dòng sản phẩm cụ thể rồi nhấn 'Cập nhật'",
                "Thông tin đơn hàng chưa đầy đủ",
                JOptionPane.WARNING_MESSAGE);
            return false;
        }
        
        return true;
    }
    
    private boolean validateForm() {
        StringBuilder errorMessage = new StringBuilder();
        boolean hasError = false;
        
        // Kiểm tra họ và tên
        if (jTextField3.getText().trim().isEmpty()) {
            errorMessage.append("❌ Họ và tên không được để trống!\n");
            hasError = true;
        } else if (jTextField3.getText().trim().length() < 2) {
            errorMessage.append("❌ Họ và tên phải có ít nhất 2 ký tự!\n");
            hasError = true;
        }
        
        // Kiểm tra số điện thoại
        String phoneNumber = jTextField2.getText().trim();
        if (phoneNumber.isEmpty()) {
            errorMessage.append("❌ Số điện thoại không được để trống!\n");
            hasError = true;
        } else if (!isValidVietnamesePhoneNumber(phoneNumber)) {
            errorMessage.append("❌ Số điện thoại không hợp lệ! Vui lòng nhập số điện thoại Việt Nam đúng định dạng (VD: 0123456789, 0987654321)\n");
            hasError = true;
        }
        
        // Kiểm tra địa chỉ
        if (jTextField1.getText().trim().isEmpty()) {
            errorMessage.append("❌ Địa chỉ không được để trống!\n");
            hasError = true;
        } else if (jTextField1.getText().trim().length() < 5) {
            errorMessage.append("❌ Địa chỉ phải có ít nhất 5 ký tự!\n");
            hasError = true;
        }
        
        // Kiểm tra thành phố
        if (City.getSelectedItem() == null) {
            errorMessage.append("❌ Vui lòng chọn thành phố!\n");
            hasError = true;
        }
        
        // Kiểm tra quốc gia
        if (Country.getSelectedItem() == null) {
            errorMessage.append("❌ Vui lòng chọn quốc gia!\n");
            hasError = true;
        }
        
        // Kiểm tra phương thức thanh toán
        if (!jRadioButton3.isSelected()) {
            errorMessage.append("❌ Vui lòng chọn phương thức thanh toán!\n");
            hasError = true;
        }
        
        if (hasError) {
            errorMessage.insert(0, "📋 Vui lòng kiểm tra và sửa các lỗi sau:\n\n");
            JOptionPane.showMessageDialog(this, errorMessage.toString(), "Lỗi thông tin", JOptionPane.ERROR_MESSAGE);
            return false;
        }
        
        return true;
    }
    
    /**
     * Validate Vietnamese phone number format
     * Supports formats: 0123456789, 0987654321, +84123456789, 84123456789
     */
    private boolean isValidVietnamesePhoneNumber(String phoneNumber) {
        // Remove all non-digit characters except +
        String cleaned = phoneNumber.replaceAll("[^0-9+]", "");
        
        // Check if it starts with +84 or 84 (Vietnam country code)
        if (cleaned.startsWith("+84")) {
            cleaned = cleaned.substring(3); // Remove +84
        } else if (cleaned.startsWith("84")) {
            cleaned = cleaned.substring(2); // Remove 84
        }
        
        // Vietnamese mobile numbers start with 03, 05, 07, 08, 09
        // Vietnamese landline numbers start with 02, 03, 04, 05, 06, 07, 08
        // Total length should be 10 digits
        if (cleaned.length() != 10) {
            return false;
        }
        
        // Check if it starts with valid Vietnamese prefixes
        String firstTwoDigits = cleaned.substring(0, 2);
        return firstTwoDigits.matches("(03|05|07|08|09|02|04|06)");
    }
    
    private void updateOrderFromForm() {
        currentOrder.setCustomerName(jTextField3.getText().trim());
        currentOrder.setPhone(jTextField2.getText().trim());
        currentOrder.setAddress(jTextField1.getText().trim());
        currentOrder.setCity((String) City.getSelectedItem());
        currentOrder.setCountry((String) Country.getSelectedItem());
        
        // Cập nhật phương thức thanh toán
        String paymentMethod = jRadioButton3.isSelected() ? "Thanh toán khi nhận hàng" : "Chưa chọn";
        currentOrder.setPaymentMethod(paymentMethod);
        
        // Cập nhật thông tin địa chỉ cho các item
        String selectedCity = (String) City.getSelectedItem();
        String selectedCountry = (String) Country.getSelectedItem();
        
        for (OrderRequestItem item : orderItems) {
            item.setCustomerName(currentOrder.getCustomerName());
            item.setPhone(currentOrder.getPhone());
            item.setAddress(currentOrder.getAddress());
            if (selectedCity != null) item.setCity(selectedCity);
            if (selectedCountry != null) item.setCountry(selectedCountry);
            item.setPaymentMethod(paymentMethod);
        }
        
        currentOrder.setItems(orderItems);
    }
    
    private String formatCurrency(BigDecimal amount) {
        if (amount == null) return "0 ₫";
        try {
            return String.format("%,.2f ₫", amount);
        } catch (Exception e) {
            return "0 ₫";
        }
    }
    
    private void displayCouponInfo(String selectedCoupon) {
        // Phương thức này không còn cần thiết vì chỉ sử dụng TextField
        System.out.println("✓ Thông tin mã giảm giá sẽ được hiển thị khi áp dụng");
    }
    

    
    /**
     * Xóa giỏ hàng sau khi đặt hàng thành công
     */
    private void clearShoppingCart() {
        clearShoppingCartItems(orderItems);
    }
    
    /**
     * Xóa sản phẩm đã đặt khỏi giỏ hàng
     */
    private void clearShoppingCartItems(List<OrderRequestItem> items) {
        try {
            // Lấy CartID của user hiện tại
            String getCartSql = "SELECT CartID FROM ShoppingCarts WHERE UserID = ?";
            ResultSet rs = XJdbc.executeQuery(getCartSql, currentUser.getUserId());
            
            if (rs.next()) {
                int cartId = rs.getInt("CartID");
                rs.close();
                
                int totalDeleted = 0;
                
                // Xóa từng sản phẩm đã đặt khỏi giỏ hàng
                for (OrderRequestItem item : items) {
                    String deleteItemSql = "DELETE FROM CartItems WHERE CartID = ? AND ProductID = ?";
                    int deletedRows = XJdbc.executeUpdate(deleteItemSql, cartId, item.getProductId());
                    totalDeleted += deletedRows;
                }
                
                // Kiểm tra xem giỏ hàng có còn sản phẩm không
                String checkCartSql = "SELECT COUNT(*) as count FROM CartItems WHERE CartID = ?";
                ResultSet checkRs = XJdbc.executeQuery(checkCartSql, cartId);
                if (checkRs.next() && checkRs.getInt("count") == 0) {
                    // Nếu giỏ hàng trống, xóa luôn giỏ hàng
                    String deleteCartSql = "DELETE FROM ShoppingCarts WHERE CartID = ?";
                    XJdbc.executeUpdate(deleteCartSql, cartId);
                }
                checkRs.close();
                
                if (totalDeleted > 0) {
                    System.out.println("✓ Đã xóa " + totalDeleted + " sản phẩm khỏi giỏ hàng");
                    System.out.println("✓ Đã xóa giỏ hàng ID: " + cartId);
                    
                    System.out.println("✓ Đã xóa giỏ hàng thành công");
                } else {
                    System.out.println("⚠️ Không có sản phẩm nào trong giỏ hàng để xóa");
                }
            } else {
                System.out.println("⚠️ Không tìm thấy giỏ hàng cho user ID: " + currentUser.getUserId());
            }
            
        } catch (Exception e) {
            System.err.println("Lỗi khi xóa giỏ hàng: " + e.getMessage());
            JOptionPane.showMessageDialog(this, 
                "❌ Lỗi khi xóa giỏ hàng!\nLỗi: " + e.getMessage(),
                "Lỗi", 
                JOptionPane.ERROR_MESSAGE);
        }
    }
    
    /**
     * Kiểm tra tồn kho khi cập nhật số lượng trong giỏ hàng
     */
    private boolean checkInventoryForQuantityUpdate(String productId, int newQuantity) {
        try {
            // Lấy thông tin sản phẩm từ database
            String sql = "SELECT ProductName, Quantity FROM Products WHERE ProductID = ?";
            ResultSet rs = XJdbc.executeQuery(sql, productId);
            
            if (rs.next()) {
                String productName = rs.getString("ProductName");
                int availableQuantity = rs.getInt("Quantity");
                
                if (newQuantity > availableQuantity) {
                    StringBuilder errorMsg = new StringBuilder();
                    errorMsg.append("⚠️ KHÔNG ĐỦ HÀNG TRONG KHO\n\n");
                    errorMsg.append("Sản phẩm: ").append(productName).append("\n");
                    errorMsg.append("Số lượng yêu cầu: ").append(newQuantity).append("\n");
                    errorMsg.append("Số lượng có sẵn: ").append(availableQuantity).append("\n\n");
                    errorMsg.append("❌ Không thể cập nhật số lượng!");
                    
                    JOptionPane.showMessageDialog(this, 
                        errorMsg.toString(),
                        "Thiếu hàng trong kho", 
                        JOptionPane.WARNING_MESSAGE);
                    rs.close();
                    return false;
                }
                
                System.out.println("✓ Kiểm tra tồn kho thành công: " + productName + 
                    " - Yêu cầu: " + newQuantity + ", Có sẵn: " + availableQuantity);
                rs.close();
                return true;
            } else {
                System.err.println("❌ Không tìm thấy sản phẩm ID: " + productId);
                rs.close();
                return false;
            }
            
        } catch (Exception e) {
            System.err.println("Lỗi khi kiểm tra tồn kho: " + e.getMessage());
            JOptionPane.showMessageDialog(this, 
                "❌ Lỗi khi kiểm tra tồn kho!\nLỗi: " + e.getMessage(),
                "Lỗi", 
                JOptionPane.ERROR_MESSAGE);
            return false;
        }
    }
    
    /**
     * Cập nhật số lượng sản phẩm trong giỏ hàng với kiểm tra tồn kho
     */
    private void updateProductQuantityWithInventoryCheck(String productId, int newQuantity) {
        // Kiểm tra tồn kho trước khi cập nhật
        if (!checkInventoryForQuantityUpdate(productId, newQuantity)) {
            return;
        }
        
        try {
            // Lấy CartID của user hiện tại
            String getCartSql = "SELECT CartID FROM ShoppingCarts WHERE UserID = ?";
            ResultSet rs = XJdbc.executeQuery(getCartSql, currentUser.getUserId());
            
            if (rs.next()) {
                int cartId = rs.getInt("CartID");
                rs.close();
                
                // Cập nhật số lượng trong giỏ hàng
                String updateSql = "UPDATE CartItems SET Quantity = ? WHERE CartID = ? AND ProductID = ?";
                int updatedRows = XJdbc.executeUpdate(updateSql, newQuantity, cartId, productId);
                
                if (updatedRows > 0) {
                    // Cập nhật trong danh sách orderItems
                    for (OrderRequestItem item : orderItems) {
                        if (item.getProductId().equals(productId)) {
                            item.setQuantity(newQuantity);
                            item.calculateTotalPrice();
                            break;
                        }
                    }
                    
                    // Cập nhật bảng hiển thị
                    updateTable();
                    updateTotals();
                    
                    System.out.println("✓ Đã cập nhật số lượng sản phẩm ID " + productId + " thành " + newQuantity);
                    
                } else {
                    System.err.println("❌ Không thể cập nhật số lượng sản phẩm ID: " + productId);
                    JOptionPane.showMessageDialog(this, 
                        "❌ Không thể cập nhật số lượng sản phẩm!",
                        "Lỗi", 
                        JOptionPane.ERROR_MESSAGE);
                }
            } else {
                System.err.println("❌ Không tìm thấy giỏ hàng cho user ID: " + currentUser.getUserId());
                JOptionPane.showMessageDialog(this, 
                    "❌ Không tìm thấy giỏ hàng!",
                    "Lỗi", 
                    JOptionPane.ERROR_MESSAGE);
            }
            
        } catch (Exception e) {
            System.err.println("Lỗi khi cập nhật số lượng: " + e.getMessage());
            JOptionPane.showMessageDialog(this, 
                "❌ Lỗi khi cập nhật số lượng!\nLỗi: " + e.getMessage(),
                "Lỗi", 
                JOptionPane.ERROR_MESSAGE);
        }
    }
    
    private void calculateSelectedProductTotal() {
        int selectedRow = jTable1.getSelectedRow();
        if (selectedRow >= 0 && selectedRow < orderItems.size()) {
            OrderRequestItem selectedItem = orderItems.get(selectedRow);
            
            if (selectedItem != null && selectedItem.getTotalPrice() != null) {
                // Tính tổng tiền chỉ của sản phẩm được chọn
                BigDecimal selectedTotal = selectedItem.getTotalPrice();
                
                // Hiển thị vào JLabel5
                jLabel5.setText(formatCurrency(selectedTotal));
                
                // Cập nhật subtotal cho order
                currentOrder.setSubtotal(selectedTotal);
                
                // Hiển thị thông tin trong console
                System.out.println("✓ Sản phẩm được chọn:");
                System.out.println("  - Tên: " + selectedItem.getProductName());
                System.out.println("  - Số lượng: " + selectedItem.getQuantity());
                System.out.println("  - Đơn giá: " + formatCurrency(selectedItem.getUnitPrice()));
                System.out.println("  - Thành tiền: " + formatCurrency(selectedTotal));
                
                // Cập nhật phí vận chuyển và tổng cộng
                updateShippingFee();
                
            } else {
                System.err.println("✗ Không thể tính tổng tiền cho sản phẩm được chọn");
                jLabel5.setText("0 ₫");
            }
        } else {
            // Nếu không có dòng nào được chọn, hiển thị tổng tất cả
            updateTotals();
        }
    }
    
    private void loadSampleData() {
        // Lấy dữ liệu từ database Storedogo2
        String customerName = jTextField3.getText();
        String address = jTextField1.getText();
        String phone = jTextField2.getText();
        String paymentMethod = "Thanh toán khi nhận hàng";
        String selectedCity = (String) City.getSelectedItem();
        String selectedCountry = (String) Country.getSelectedItem();
        
        try {
            // Lấy sản phẩm từ database Storedogo2
            poly.dao.ProductDAO productDAO = new poly.dao.impl.ProductDAOImpl();
            
            // Sản phẩm 1: PROD001 - Classic Wooden Chair (49.99)
            poly.entity.Product product1 = productDAO.selectById("PROD001");
            if (product1 != null) {
                OrderRequestItem item1 = new OrderRequestItem();
                item1.setProductId(product1.getProductId()); // Thêm ProductID
                item1.setProductName(product1.getProductName());
                item1.setQuantity(2);
                item1.setUnitPrice(product1.getUnitPrice());
                item1.calculateTotalPrice();
                // Không set thông tin khách hàng mặc định - để trống cho đến khi cập nhật
                item1.setPaymentMethod(paymentMethod);
                orderItems.add(item1);
                
                System.out.println("✓ Loaded from DB Storedogo2: " + product1.getProductName() + 
                    " - Price: " + formatCurrency(product1.getUnitPrice()) + 
                    " - Quantity: 2 - Total: " + formatCurrency(item1.getTotalPrice()));
            } else {
                System.err.println("✗ Không tìm thấy sản phẩm PROD001 trong database");
            }
            
            // Sản phẩm 2: PROD003 - Comfort Sofa (499.99)
            poly.entity.Product product2 = productDAO.selectById("PROD003");
            if (product2 != null) {
                OrderRequestItem item2 = new OrderRequestItem();
                item2.setProductId(product2.getProductId()); // Thêm ProductID
                item2.setProductName(product2.getProductName());
                item2.setQuantity(1);
                item2.setUnitPrice(product2.getUnitPrice());
                item2.calculateTotalPrice();
                // Không set thông tin khách hàng mặc định - để trống cho đến khi cập nhật
                item2.setPaymentMethod(paymentMethod);
                orderItems.add(item2);
                
                System.out.println("✓ Loaded from DB Storedogo2: " + product2.getProductName() + 
                    " - Price: " + formatCurrency(product2.getUnitPrice()) + 
                    " - Quantity: 1 - Total: " + formatCurrency(item2.getTotalPrice()));
            } else {
                System.err.println("✗ Không tìm thấy sản phẩm PROD003 trong database");
            }
            
            // Tính tổng để kiểm tra
            BigDecimal totalSubtotal = BigDecimal.ZERO;
            for (OrderRequestItem item : orderItems) {
                if (item.getTotalPrice() != null) {
                    totalSubtotal = totalSubtotal.add(item.getTotalPrice());
                }
            }
            
            System.out.println("✓ Đã load " + orderItems.size() + " sản phẩm từ database Storedogo2");
            System.out.println("✓ Tổng tạm tính: " + formatCurrency(totalSubtotal));
            
            // Tính toán dự kiến:
            // PROD001: 49.99 * 2 = 99.98
            // PROD003: 499.99 * 1 = 499.99
            // Tổng: 99.98 + 499.99 = 599.97
            
        } catch (Exception e) {
            System.err.println("✗ Lỗi khi load sản phẩm từ database Storedogo2: " + e.getMessage());
            e.printStackTrace();
            
            // Fallback: sử dụng dữ liệu mẫu nếu không kết nối được database
           
        }
    }
    
   
    
    /**
     * Xóa tất cả thông tin mặc định trong các trường nhập liệu
     */
    private void clearCustomerInfoFields() {
        // Xóa tất cả giá trị mặc định
        jTextField1.setText(""); // Số nhà
        jTextField2.setText(""); // Số điện thoại  
        jTextField3.setText(""); // Họ và tên
        jTextField4.setText(""); // Mã giảm giá
        
        System.out.println("🧹 Đã xóa tất cả thông tin mặc định trong form");
    }
    
    /**
     * Ghi dữ liệu vào bảng InventoryTransactions khi đặt hàng
     * @param orderId ID của đơn hàng
     * @param itemsToOrder Danh sách sản phẩm đã đặt
     */
    private void recordInventoryTransactions(int orderId, List<OrderRequestItem> itemsToOrder) {
        try {
            // Lấy UserID hiện tại
            Integer currentUserId = CurrentUserUtil.getCurrentUserId();
            if (currentUserId == null) {
                System.err.println("⚠️ Không thể lấy UserID để ghi InventoryTransactions");
                return;
            }
            
            // Ghi từng sản phẩm vào bảng InventoryTransactions
            for (OrderRequestItem item : itemsToOrder) {
                String insertSql = "INSERT INTO InventoryTransactions " +
                    "(ProductID, TransactionDate, TransactionType, QuantityChange, ReferenceID, Notes, UserID) " +
                    "VALUES (?, GETDATE(), 'SaleOut', ?, ?, ?, ?)";
                
                // Tạo ghi chú cho từng sản phẩm
                String notes = String.format("Xuất kho bán cho đơn hàng %d - Sản phẩm: %s (Số lượng: %d)", 
                    orderId, item.getProductName(), item.getQuantity());
                
                // Thực hiện insert
                int insertedRows = poly.util.XJdbc.executeUpdate(insertSql, 
                    item.getProductId(),                    // ProductID
                    -item.getQuantity(),                    // QuantityChange (số âm vì xuất kho)
                    "ORDER-" + orderId,                     // ReferenceID
                    notes,                                  // Notes
                    currentUserId                           // UserID
                );
                
                if (insertedRows > 0) {
                    System.out.println("✅ Đã ghi InventoryTransaction cho sản phẩm: " + 
                        item.getProductName() + " - Số lượng: " + item.getQuantity() + 
                        " - OrderID: " + orderId);
                } else {
                    System.err.println("❌ Không thể ghi InventoryTransaction cho sản phẩm: " + 
                        item.getProductName());
                }
            }
            
            System.out.println("📊 Đã ghi " + itemsToOrder.size() + " bản ghi vào InventoryTransactions cho OrderID: " + orderId);
            
        } catch (Exception e) {
            System.err.println("❌ Lỗi khi ghi InventoryTransactions: " + e.getMessage());
            e.printStackTrace();
            
            // Hiển thị thông báo lỗi nhưng không dừng quá trình đặt hàng
            JOptionPane.showMessageDialog(this,
                "⚠️ Đặt hàng thành công nhưng có lỗi khi ghi lịch sử kho!\n" +
                "Lỗi: " + e.getMessage() + "\n" +
                "Vui lòng liên hệ admin để kiểm tra.",
                "Cảnh báo",
                JOptionPane.WARNING_MESSAGE);
        }
    }

}

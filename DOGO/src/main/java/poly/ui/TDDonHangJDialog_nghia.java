/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JDialog.java to edit this template
 */
package poly.ui;

import poly.controller.OrderController;
import poly.entity.Order;
import poly.entity.OrderDetail;
import poly.entity.User;
import poly.dao.impl.OrderDAOImpl;
import poly.dao.impl.UserDAOImpl;
import poly.dao.impl.ProductDAOImpl;
import poly.dao.impl.OrderDetailDAOImpl;
import poly.dao.impl.ProductReviewDAOImpl;
import poly.dao.impl.AddressDAOImpl;
import poly.dao.impl.CouponDAOImpl;
import poly.dao.impl.OrderRequestDAOImpl;
import poly.util.XDialog;
import poly.util.XDate;
import javax.swing.table.DefaultTableModel;
import javax.swing.JOptionPane;
import javax.swing.ImageIcon;
import java.awt.Image;
import java.util.List;
import poly.controller.OrderController_Nghia;
import poly.util.CurrentUserUtil;
import java.time.format.DateTimeFormatter;
import poly.ui.manager.HoaDonChiTiet;
import poly.ui.DanhGiaJDialog1;

/**
 *
 * @author Nghia
 */
public class TDDonHangJDialog_nghia extends javax.swing.JDialog implements OrderController_Nghia {

    /**
     * Creates new form TDDonHangJDialog
     */
    public TDDonHangJDialog_nghia(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        // Tự động load dữ liệu khi khởi tạo
        open();
        // KHÔNG setEnabled cho các ô ngày nữa, luôn cho phép nhập tay
        
        // Chỉ thêm debug logs, không thay đổi event listeners
        addDebugLogs();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblLichSu = new javax.swing.JTable();
        btnYeuCauDoiTraLichSu = new javax.swing.JButton();
        btnXemChiTietLichSu = new javax.swing.JButton();
        cboTrangThai = new javax.swing.JComboBox();
        btnTimTrangThai = new javax.swing.JButton();
        cboThoiGian = new javax.swing.JComboBox();
        btnTimTheoThoiGian = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        txtTuNgay = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        txtDenNgay = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblHienTai = new javax.swing.JTable();
        btnYeuCauDoiTraHienTai = new javax.swing.JButton();
        btnXemChiTietDonHienTai = new javax.swing.JButton();
        btnHuy = new javax.swing.JButton();
        cboThoiGian1 = new javax.swing.JComboBox();
        btnTimTheoThoiGian1 = new javax.swing.JButton();
        cboTrangThai1 = new javax.swing.JComboBox();
        btnTimTrangThai1 = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        txtTuNgay1 = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        txtDenNgay1 = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("THEO DÕI ĐƠN HÀNG");

        tblLichSu.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Mã Đơn", "Ngày", "Ngưởi Đặt", "Trạng Thái"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblLichSu.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblLichSuMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblLichSu);

        btnYeuCauDoiTraLichSu.setText("Yêu Cầu Đổi Trả");
        btnYeuCauDoiTraLichSu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnYeuCauDoiTraLichSuActionPerformed(evt);
            }
        });

        btnXemChiTietLichSu.setText("Xem Chi Tiết");
        btnXemChiTietLichSu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnXemChiTietLichSuActionPerformed(evt);
            }
        });

        cboTrangThai.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Tất cả trạng thái", "Pending", "Processing", "Shipped", "Delivering", "Completed", "Cancelled", "" }));
        cboTrangThai.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cboTrangThaiActionPerformed(evt);
            }
        });

        btnTimTrangThai.setText("Tìm kiếm");
        btnTimTrangThai.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTimTrangThaiActionPerformed(evt);
            }
        });

        cboThoiGian.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Tất cả thởi gian", "Hôm nay", "Tuần này", "Tháng này", "3 tháng gần đây" }));
        cboThoiGian.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cboThoiGianActionPerformed(evt);
            }
        });

        btnTimTheoThoiGian.setText("Lọc theo thởi gian");
        btnTimTheoThoiGian.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTimTheoThoiGianActionPerformed(evt);
            }
        });

        jLabel4.setText("Ngày");

        jLabel5.setText("Đến");

        jButton1.setText("Đánh giá");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(91, 91, 91)
                .addComponent(btnYeuCauDoiTraLichSu)
                .addGap(140, 140, 140)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnXemChiTietLichSu)
                .addGap(162, 162, 162))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtTuNgay, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtDenNgay, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cboThoiGian, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnTimTheoThoiGian)
                .addGap(20, 20, 20)
                .addComponent(cboTrangThai, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnTimTrangThai)
                .addGap(20, 30, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cboTrangThai, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnTimTrangThai)
                    .addComponent(cboThoiGian, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnTimTheoThoiGian)
                    .addComponent(jLabel4)
                    .addComponent(txtTuNgay, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5)
                    .addComponent(txtDenNgay, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(27, 27, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 219, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnYeuCauDoiTraLichSu)
                    .addComponent(btnXemChiTietLichSu)
                    .addComponent(jButton1))
                .addContainerGap())
        );

        jTabbedPane1.addTab("Lịch Sử Đơn Hàng", jPanel1);

        tblHienTai.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Mã Đơn", "Mã Sản Phẩm", "Ngày Đặt", "Ngưởi Nhận", "Trạng Thái"
            }
        ));
        tblHienTai.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblHienTaiMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(tblHienTai);

        btnYeuCauDoiTraHienTai.setText("Yêu Cầu Đổi Trả");
        btnYeuCauDoiTraHienTai.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnYeuCauDoiTraHienTaiActionPerformed(evt);
            }
        });

        btnXemChiTietDonHienTai.setText("Xem Chi Tiết");
        btnXemChiTietDonHienTai.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnXemChiTietDonHienTaiActionPerformed(evt);
            }
        });

        btnHuy.setText("Huỷ Đơn Hàng");
        btnHuy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnHuyActionPerformed(evt);
            }
        });

        cboThoiGian1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Tất cả thởi gian", "Hôm nay", "Tuần này", "Tháng này", "3 tháng gần đây" }));
        cboThoiGian1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cboThoiGian1ActionPerformed(evt);
            }
        });

        btnTimTheoThoiGian1.setText("Lọc theo thởi gian");
        btnTimTheoThoiGian1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTimTheoThoiGian1ActionPerformed(evt);
            }
        });

        cboTrangThai1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Tất cả trạng thái", "Pending", "Processing", "Shipped", "Completed", "Cancelled" }));
        cboTrangThai1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cboTrangThai1ActionPerformed(evt);
            }
        });

        btnTimTrangThai1.setText("Tìm kiếm");
        btnTimTrangThai1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTimTrangThai1ActionPerformed(evt);
            }
        });

        jLabel6.setText("Ngày");

        jLabel7.setText("Đến");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtTuNgay1, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtDenNgay1, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cboThoiGian1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnTimTheoThoiGian1)
                .addGap(20, 20, 20)
                .addComponent(cboTrangThai1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnTimTrangThai1)
                .addGap(22, 22, 22))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(96, 96, 96)
                .addComponent(btnYeuCauDoiTraHienTai)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 183, Short.MAX_VALUE)
                .addComponent(btnHuy)
                .addGap(151, 151, 151)
                .addComponent(btnXemChiTietDonHienTai)
                .addGap(102, 102, 102))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel6)
                        .addComponent(txtTuNgay1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel7)
                        .addComponent(txtDenNgay1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(cboTrangThai1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnTimTrangThai1)
                        .addComponent(cboThoiGian1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnTimTheoThoiGian1)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 225, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(32, 32, 32)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnYeuCauDoiTraHienTai)
                    .addComponent(btnHuy)
                    .addComponent(btnXemChiTietDonHienTai))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Đơn Hàng Hiện Tại", jPanel2);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jTabbedPane1))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 368, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(24, 24, 24))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnYeuCauDoiTraLichSuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnYeuCauDoiTraLichSuActionPerformed
        requestReturn();
    }//GEN-LAST:event_btnYeuCauDoiTraLichSuActionPerformed

    private void btnXemChiTietLichSuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnXemChiTietLichSuActionPerformed
        viewOrderDetails();
    }//GEN-LAST:event_btnXemChiTietLichSuActionPerformed

    private void tblLichSuMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblLichSuMouseClicked
        edit();
    }//GEN-LAST:event_tblLichSuMouseClicked

    private void tblLichSuMouseDoubleClicked(java.awt.event.MouseEvent evt) {
        System.out.println("DEBUG: tblLichSu double-click event triggered");
        openOrderDetailDialog();
    }

    private void tblHienTaiMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblHienTaiMouseClicked
        edit();
    }//GEN-LAST:event_tblHienTaiMouseClicked

    private void tblHienTaiMouseDoubleClicked(java.awt.event.MouseEvent evt) {
        System.out.println("DEBUG: tblHienTai double-click event triggered");
        openOrderDetailDialog();
    }

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        open();
    }//GEN-LAST:event_formWindowOpened

    private void btnYeuCauDoiTraHienTaiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnYeuCauDoiTraHienTaiActionPerformed
        requestReturn();
    }//GEN-LAST:event_btnYeuCauDoiTraHienTaiActionPerformed

    private void btnHuyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnHuyActionPerformed
        cancelOrder();
    }//GEN-LAST:event_btnHuyActionPerformed

    private void btnXemChiTietDonHienTaiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnXemChiTietDonHienTaiActionPerformed
        viewOrderDetails();
    }//GEN-LAST:event_btnXemChiTietDonHienTaiActionPerformed

    private void btnTimTrangThaiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTimTrangThaiActionPerformed
        searchByStatus();
    }//GEN-LAST:event_btnTimTrangThaiActionPerformed

    private void btnTimTheoThoiGianActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTimTheoThoiGianActionPerformed
        searchByTime();
    }//GEN-LAST:event_btnTimTheoThoiGianActionPerformed

    private void btnTimTheoThoiGian1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTimTheoThoiGian1ActionPerformed
        searchByTime();
    }//GEN-LAST:event_btnTimTheoThoiGian1ActionPerformed

    private void btnTimTrangThai1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTimTrangThai1ActionPerformed
        searchByStatus();
    }//GEN-LAST:event_btnTimTrangThai1ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
openRatingDialog();        // TODO add your handling code here:
    }//GEN-LAST:event_jButton1ActionPerformed

    private void cboTrangThaiActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
    }                                            

    private void cboThoiGianActionPerformed(java.awt.event.ActionEvent evt) {
        String selected = (String) cboThoiGian.getSelectedItem();
        java.time.LocalDate today = java.time.LocalDate.now();
        java.time.format.DateTimeFormatter formatter = java.time.format.DateTimeFormatter.ofPattern("yyyy-MM-dd");
        if ("Hôm nay".equals(selected)) {
            txtTuNgay.setText(today.format(formatter));
            txtDenNgay.setText(today.format(formatter));
        } else if ("Tuần này".equals(selected)) {
            java.time.LocalDate weekStart = today.with(java.time.DayOfWeek.MONDAY);
            java.time.LocalDate weekEnd = today.with(java.time.DayOfWeek.SUNDAY);
            txtTuNgay.setText(weekStart.format(formatter));
            txtDenNgay.setText(weekEnd.format(formatter));
        } else if ("Tháng này".equals(selected)) {
            java.time.LocalDate monthStart = today.withDayOfMonth(1);
            java.time.LocalDate monthEnd = today.withDayOfMonth(today.lengthOfMonth());
            txtTuNgay.setText(monthStart.format(formatter));
            txtDenNgay.setText(monthEnd.format(formatter));
        } else if ("3 tháng gần đây".equals(selected)) {
            java.time.LocalDate threeMonthsAgo = today.minusMonths(2).withDayOfMonth(1);
            java.time.LocalDate monthEnd = today.withDayOfMonth(today.lengthOfMonth());
            txtTuNgay.setText(threeMonthsAgo.format(formatter));
            txtDenNgay.setText(monthEnd.format(formatter));
        } else if ("Tùy chọn".equals(selected)) {
            // Không set gì cả, cho phép nhập tay
            // Không tự động cập nhật bảng
        } else {
            // "Tất cả thởi gian" hoặc giá trị khác
            txtTuNgay.setText("");
            txtDenNgay.setText("");
        }
    }

    private void cboThoiGian1ActionPerformed(java.awt.event.ActionEvent evt) {
        String selected = (String) cboThoiGian1.getSelectedItem();
        java.time.LocalDate today = java.time.LocalDate.now();
        java.time.format.DateTimeFormatter formatter = java.time.format.DateTimeFormatter.ofPattern("yyyy-MM-dd");
        if ("Hôm nay".equals(selected)) {
            txtTuNgay1.setText(today.format(formatter));
            txtDenNgay1.setText(today.format(formatter));
        } else if ("Tuần này".equals(selected)) {
            java.time.LocalDate weekStart = today.with(java.time.DayOfWeek.MONDAY);
            java.time.LocalDate weekEnd = today.with(java.time.DayOfWeek.SUNDAY);
            txtTuNgay1.setText(weekStart.format(formatter));
            txtDenNgay1.setText(weekEnd.format(formatter));
        } else if ("Tháng này".equals(selected)) {
            java.time.LocalDate monthStart = today.withDayOfMonth(1);
            java.time.LocalDate monthEnd = today.withDayOfMonth(today.lengthOfMonth());
            txtTuNgay1.setText(monthStart.format(formatter));
            txtDenNgay1.setText(monthEnd.format(formatter));
        } else if ("3 tháng gần đây".equals(selected)) {
            java.time.LocalDate threeMonthsAgo = today.minusMonths(2).withDayOfMonth(1);
            java.time.LocalDate monthEnd = today.withDayOfMonth(today.lengthOfMonth());
            txtTuNgay1.setText(threeMonthsAgo.format(formatter));
            txtDenNgay1.setText(monthEnd.format(formatter));
        } else if ("Tùy chọn".equals(selected)) {
            // Không set gì cả, cho phép nhập tay
            // Không tự động cập nhật bảng
        } else {
            // "Tất cả thởi gian" hoặc giá trị khác
            txtTuNgay1.setText("");
            txtDenNgay1.setText("");
        }
    }

    private void cboTrangThai1ActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
    }                                             

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnHuy;
    private javax.swing.JButton btnTimTheoThoiGian;
    private javax.swing.JButton btnTimTheoThoiGian1;
    private javax.swing.JButton btnTimTrangThai;
    private javax.swing.JButton btnTimTrangThai1;
    private javax.swing.JButton btnXemChiTietDonHienTai;
    private javax.swing.JButton btnXemChiTietLichSu;
    private javax.swing.JButton btnYeuCauDoiTraHienTai;
    private javax.swing.JButton btnYeuCauDoiTraLichSu;
    private javax.swing.JComboBox cboThoiGian;
    private javax.swing.JComboBox cboThoiGian1;
    private javax.swing.JComboBox cboTrangThai;
    private javax.swing.JComboBox cboTrangThai1;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTable tblHienTai;
    private javax.swing.JTable tblLichSu;
    private javax.swing.JTextField txtDenNgay;
    private javax.swing.JTextField txtDenNgay1;
    private javax.swing.JTextField txtTuNgay;
    private javax.swing.JTextField txtTuNgay1;
    // End of variables declaration//GEN-END:variables

    // ========== IMPLEMENTATION ==========
    private OrderDAOImpl orderDAO = new OrderDAOImpl();
    private UserDAOImpl userDAO = new UserDAOImpl();
    private ProductDAOImpl productDAO = new ProductDAOImpl();
    private OrderDetailDAOImpl orderDetailDAO = new OrderDetailDAOImpl();
    private ProductReviewDAOImpl productReviewDAO = new ProductReviewDAOImpl();
    
    // Method để lấy tên user từ bảng Users
    private String getRecipientName(Integer orderId) {
        try {
            // Lấy thông tin đơn hàng
            Order order = orderDAO.selectById(orderId);
            if (order == null || order.getUserId() == null) {
                return "N/A";
            }
            
            // Lấy tên user từ bảng Users dựa trên UserID của đơn hàng
            String sql = "SELECT FullName FROM Users WHERE UserID = ?";
            
            java.sql.ResultSet rs = poly.util.XJdbc.executeQuery(sql, order.getUserId());
            if (rs.next()) {
                String fullName = rs.getString("FullName");
                
                if (fullName != null && !fullName.trim().isEmpty()) {
                    return fullName;
                } else {
                    return "User ID: " + order.getUserId();
                }
            }
        } catch (Exception e) {
            System.err.println("Lỗi lấy thông tin user: " + e.getMessage());
        }
        return "N/A";
    }
    
    // Method để lấy thông tin địa chỉ giao hàng
    // Thông tin này được lưu từ form "Xác nhận đơn hàng" trong DatHangJDialog
    private String getRecipientAddress(Integer orderId) {
        try {
            // Lấy thông tin đơn hàng
            Order order = orderDAO.selectById(orderId);
            if (order == null || order.getDeliveryAddressId() == null) {
                return "N/A";
            }
            
            // Lấy thông tin địa chỉ giao hàng từ bảng Addresses
            // Thông tin này được tạo từ form đặt hàng của người dùng
            String sql = "SELECT a.AddressLine1, a.City, a.Country, a.Phone, a.CustomerName " +
                        "FROM Addresses a " +
                        "WHERE a.AddressID = ?";
            
            java.sql.ResultSet rs = poly.util.XJdbc.executeQuery(sql, order.getDeliveryAddressId());
            if (rs.next()) {
                String addressLine1 = rs.getString("AddressLine1");
                String city = rs.getString("City");
                String country = rs.getString("Country");
                String phone = rs.getString("Phone");
                String customerName = rs.getString("CustomerName");
                
                StringBuilder address = new StringBuilder();
                
                // Thêm tên khách hàng nếu có
                if (customerName != null && !customerName.trim().isEmpty()) {
                    address.append(customerName);
                    if (addressLine1 != null && !addressLine1.trim().isEmpty()) {
                        address.append(" - ");
                    }
                }
                
                if (addressLine1 != null && !addressLine1.trim().isEmpty()) {
                    address.append(addressLine1);
                }
                if (city != null && !city.trim().isEmpty()) {
                    if (address.length() > 0) address.append(", ");
                    address.append(city);
                }
                if (country != null && !country.trim().isEmpty()) {
                    if (address.length() > 0) address.append(", ");
                    address.append(country);
                }
                
                String result = address.toString();
                if (result.isEmpty()) {
                    return "N/A";
                }
                
                // Thêm số điện thoại nếu có
                if (phone != null && !phone.trim().isEmpty()) {
                    result += " (SĐT: " + phone + ")";
                }
                
                return result;
            }
        } catch (Exception e) {
            System.err.println("Lỗi lấy thông tin địa chỉ: " + e.getMessage());
        }
        return "N/A";
    }
    private Order currentOrder = null;
    private boolean isProcessingOrder = false; // Flag để tránh xử lý nhiều lần

    @Override
    public void open() {
        fillToTable();
        setLocationRelativeTo(null);
        
        // Khởi tạo trạng thái các nút
        btnHuy.setEnabled(false);
        btnYeuCauDoiTraLichSu.setEnabled(false);
        btnYeuCauDoiTraHienTai.setEnabled(false);
    }

    @Override
    public void setForm(Order entity) {
        // Không cần form cho màn hình theo dõi
    }

    @Override
    public Order getForm() {
        return currentOrder;
    }

    @Override
    public void fillToTable() {
        DefaultTableModel model = (DefaultTableModel) tblLichSu.getModel();
        model.setRowCount(0);
        Integer currentUserId = CurrentUserUtil.getCurrentUserId();
        if (currentUserId == null) {
            XDialog.alert("Không xác định được người dùng hiện tại!");
            return;
        }
        try {
            List<Order> list = orderDAO.selectByUserId(currentUserId);
            for (Order order : list) {
                String recipientName = getRecipientName(order.getOrderId());
                model.addRow(new Object[]{
                    order.getOrderId(),
                    order.getOrderDate() != null ? order.getOrderDate().toString() : "N/A",
                    recipientName,
                    getStatusDisplayName(order.getOrderStatus())
                });
            }
        } catch (Exception e) {
            XDialog.alert("Lỗi tải dữ liệu: " + e.getMessage());
        }
        fillCurrentOrdersTable();
    }

    private void fillCurrentOrdersTable() {
        DefaultTableModel model = (DefaultTableModel) tblHienTai.getModel();
        model.setRowCount(0);
        Integer currentUserId = CurrentUserUtil.getCurrentUserId();
        if (currentUserId == null) {
            XDialog.alert("Không xác định được người dùng hiện tại!");
            return;
        }
        try {
            // Lấy đơn hàng có thể thao tác của user hiện tại
            List<Order> list = new java.util.ArrayList<>();
            list.addAll(orderDAO.selectByUserId(currentUserId).stream().filter(o -> "Pending".equals(o.getOrderStatus())).toList());
            list.addAll(orderDAO.selectByUserId(currentUserId).stream().filter(o -> "Processing".equals(o.getOrderStatus())).toList());
            list.addAll(orderDAO.selectByUserId(currentUserId).stream().filter(o -> "Shipped".equals(o.getOrderStatus())).toList());
            list.addAll(orderDAO.selectByUserId(currentUserId).stream().filter(o -> "Delivering".equals(o.getOrderStatus())).toList());
            list.addAll(orderDAO.selectByUserId(currentUserId).stream().filter(o -> "Completed".equals(o.getOrderStatus())).toList());
            for (Order order : list) {
                String recipientName = getRecipientName(order.getOrderId());
                model.addRow(new Object[]{
                    order.getOrderId(),
                    getProductNames(order.getOrderId()),
                    order.getOrderDate() != null ? order.getOrderDate().toString() : "N/A",
                    recipientName,
                    getStatusDisplayName(order.getOrderStatus())
                });
            }
        } catch (Exception e) {
            XDialog.alert("Lỗi tải dữ liệu: " + e.getMessage());
        }
    }

    private String getProductNames(Integer orderId) {
        try {
            List<OrderDetail> details = orderDAO.getOrderDetails(orderId);
            if (details.isEmpty()) return "N/A";
            
            StringBuilder sb = new StringBuilder();
            for (int i = 0; i < Math.min(details.size(), 2); i++) {
                OrderDetail detail = details.get(i);
                if (i > 0) sb.append(", ");
                sb.append(detail.getProductId());
            }
            if (details.size() > 2) sb.append("...");
            return sb.toString();
        } catch (Exception e) {
            return "N/A";
        }
    }

    @Override
    public void edit() {
        int selectedTab = jTabbedPane1.getSelectedIndex();
        int row = selectedTab == 0 ? tblLichSu.getSelectedRow() : tblHienTai.getSelectedRow();
        
        if (row >= 0) {
            Integer orderId = (Integer) (selectedTab == 0 ? 
                tblLichSu.getValueAt(row, 0) : tblHienTai.getValueAt(row, 0));
            currentOrder = orderDAO.selectById(orderId);
            
            // Cập nhật trạng thái các nút dựa trên trạng thái đơn hàng
            if (currentOrder != null) {
                String status = currentOrder.getOrderStatus();
                
                // Enable/disable nút huỷ đơn hàng
                btnHuy.setEnabled(canCancelOrder(status));
                
                // Enable/disable nút yêu cầu đổi trả
                btnYeuCauDoiTraLichSu.setEnabled(canRequestReturn(status));
                btnYeuCauDoiTraHienTai.setEnabled(canRequestReturn(status));
            }
        }
    }

    @Override
    public void create() {
        // Không cần tạo mới trong màn hình theo dõi
    }

    @Override
    public void update() {
        // Không cần cập nhật trong màn hình theo dõi
    }

    @Override
    public void delete() {
        // Không cần xóa trong màn hình theo dõi
    }

    @Override
    public void clear() {
        // Không cần clear trong màn hình theo dõi
    }

    @Override
    public void setEditable(boolean editable) {
        // Không cần set editable trong màn hình theo dõi
    }

    @Override
    public void checkAll() {
        // Không cần check all trong màn hình theo dõi
    }

    @Override
    public void uncheckAll() {
        // Không cần uncheck all trong màn hình theo dõi
    }

    @Override
    public void deleteCheckedItems() {
        // Không cần delete checked items trong màn hình theo dõi
    }

    @Override
    public void moveFirst() {
        // Không cần move first trong màn hình theo dõi
    }

    @Override
    public void movePrevious() {
        // Không cần move previous trong màn hình theo dõi
    }

    @Override
    public void moveNext() {
        // Không cần move next trong màn hình theo dõi
    }

    @Override
    public void moveLast() {
        // Không cần move last trong màn hình theo dõi
    }

    @Override
    public void moveTo(int rowIndex) {
        // Không cần move to trong màn hình theo dõi
    }

    // ========== BUSINESS LOGIC ==========
    private void searchByStatus() {
        int selectedTab = jTabbedPane1.getSelectedIndex();
        String status = selectedTab == 0 ? 
            (String) cboTrangThai.getSelectedItem() : (String) cboTrangThai1.getSelectedItem();
        Integer currentUserId = CurrentUserUtil.getCurrentUserId();
        if (currentUserId == null) {
            XDialog.alert("Không xác định được người dùng hiện tại!");
            return;
        }
        if ("Tất cả trạng thái".equals(status)) {
            fillToTable();
            return;
        }
        DefaultTableModel model = (DefaultTableModel) (selectedTab == 0 ? 
            tblLichSu.getModel() : tblHienTai.getModel());
        model.setRowCount(0);
        try {
            List<Order> list = orderDAO.selectByUserId(currentUserId).stream().filter(o -> status.equals(o.getOrderStatus())).toList();
            for (Order order : list) {
                String recipientName = getRecipientName(order.getOrderId());
                if (selectedTab == 0) {
                    model.addRow(new Object[]{
                        order.getOrderId(),
                        order.getOrderDate() != null ? order.getOrderDate().toString() : "N/A",
                        recipientName,
                        getStatusDisplayName(order.getOrderStatus())
                    });
                } else {
                    model.addRow(new Object[]{
                        order.getOrderId(),
                        getProductNames(order.getOrderId()),
                        order.getOrderDate() != null ? order.getOrderDate().toString() : "N/A",
                        recipientName,
                        getStatusDisplayName(order.getOrderStatus())
                    });
                }
            }
        } catch (Exception e) {
            XDialog.alert("Lỗi tìm kiếm: " + e.getMessage());
        }
    }

    private void searchByTime() {
        int selectedTab = jTabbedPane1.getSelectedIndex();
        String timeFilter = selectedTab == 0 ? 
            (String) cboThoiGian.getSelectedItem() : (String) cboThoiGian1.getSelectedItem();
        Integer currentUserId = CurrentUserUtil.getCurrentUserId();
        if (currentUserId == null) {
            XDialog.alert("Không xác định được người dùng hiện tại!");
            return;
        }
        if ("Tất cả thời gian".equals(timeFilter) || "Tất cả thởi gian".equals(timeFilter)) {
            fillToTable();
            return;
        }
        DefaultTableModel model = (DefaultTableModel) (selectedTab == 0 ? 
            tblLichSu.getModel() : tblHienTai.getModel());
        model.setRowCount(0);
        try {
            List<Order> list = orderDAO.selectByUserId(currentUserId); // Lấy đơn hàng của user hiện tại
            List<Order> filteredList;
            if ("Tùy chọn".equals(timeFilter)) {
                // Lấy ngày từ các trường nhập
                String tuNgayStr = selectedTab == 0 ? txtTuNgay.getText().trim() : txtTuNgay1.getText().trim();
                String denNgayStr = selectedTab == 0 ? txtDenNgay.getText().trim() : txtDenNgay1.getText().trim();
                if (tuNgayStr.isEmpty() || denNgayStr.isEmpty()) {
                    XDialog.alert("Vui lòng nhập đầy đủ ngày bắt đầu và ngày kết thúc!");
                    return;
                }
                java.time.format.DateTimeFormatter formatter = java.time.format.DateTimeFormatter.ofPattern("yyyy-MM-dd");
                java.time.LocalDate tuNgay, denNgay;
                try {
                    tuNgay = java.time.LocalDate.parse(tuNgayStr, formatter);
                    denNgay = java.time.LocalDate.parse(denNgayStr, formatter);
                } catch (Exception e) {
                    XDialog.alert("Định dạng ngày không hợp lệ! Định dạng đúng: yyyy-MM-dd");
                    return;
                }
                // Kiểm tra hợp lệ: ngày bắt đầu phải <= ngày kết thúc
                if (tuNgay.isAfter(denNgay)) {
                    XDialog.alert("Ngày bắt đầu không được lớn hơn ngày kết thúc!");
                    return;
                }
                filteredList = new java.util.ArrayList<>();
                for (Order order : list) {
                    if (order.getOrderDate() == null) continue;
                    java.time.LocalDate orderDate = order.getOrderDate().toLocalDate();
                    // Sửa logic: bao gồm cả ngày bắt đầu và ngày kết thúc
                    if (!orderDate.isBefore(tuNgay) && !orderDate.isAfter(denNgay)) {
                        filteredList.add(order);
                    }
                }
            } else {
                filteredList = filterOrdersByTime(list, timeFilter);
            }
            for (Order order : filteredList) {
                String recipientName = getRecipientName(order.getOrderId());
                if (selectedTab == 0) {
                    model.addRow(new Object[]{
                        order.getOrderId(),
                        order.getOrderDate() != null ? order.getOrderDate().toString() : "N/A",
                        recipientName,
                        getStatusDisplayName(order.getOrderStatus())
                    });
                } else {
                    model.addRow(new Object[]{
                        order.getOrderId(),
                        getProductNames(order.getOrderId()),
                        order.getOrderDate() != null ? order.getOrderDate().toString() : "N/A",
                        recipientName,
                        getStatusDisplayName(order.getOrderStatus())
                    });
                }
            }
        } catch (Exception e) {
            XDialog.alert("Lỗi tìm kiếm: " + e.getMessage());
        }
    }

    private List<Order> filterOrdersByTime(List<Order> orders, String timeFilter) {
        List<Order> filtered = new java.util.ArrayList<>();
        java.time.LocalDate today = java.time.LocalDate.now();
        
        for (Order order : orders) {
            if (order.getOrderDate() == null) continue;
            
            java.time.LocalDate orderDate = order.getOrderDate().toLocalDate();
            boolean include = false;
            
            switch (timeFilter) {
                case "Hôm nay":
                    include = orderDate.equals(today);
                    break;
                case "Tuần này":
                    java.time.LocalDate weekStart = today.with(java.time.DayOfWeek.MONDAY);
                    java.time.LocalDate weekEnd = today.with(java.time.DayOfWeek.SUNDAY);
                    include = !orderDate.isBefore(weekStart) && !orderDate.isAfter(weekEnd);
                    break;
                case "Tháng này":
                    include = orderDate.getYear() == today.getYear() && 
                             orderDate.getMonth() == today.getMonth();
                    break;
                case "3 tháng gần đây":
                    java.time.LocalDate threeMonthsAgo = today.minusMonths(3);
                    include = !orderDate.isBefore(threeMonthsAgo) && !orderDate.isAfter(today);
                    break;
                default:
                    include = true;
            }
            
            if (include) {
                filtered.add(order);
            }
        }
        
        return filtered;
    }

    private void viewOrderDetails() {
        edit();
        if (currentOrder == null) {
            XDialog.alert("Vui lòng chọn đơn hàng để xem chi tiết!");
            return;
        }
        
        try {
            // Thử lấy thông tin từ OrderRequest trước (thông tin thực tế từ form đặt hàng)
            poly.dao.OrderRequestDAO orderRequestDAO = new poly.dao.impl.OrderRequestDAOImpl();
            poly.entity.OrderRequest orderRequest = orderRequestDAO.selectById(currentOrder.getOrderId());
            
            List<OrderDetail> details = orderDAO.getOrderDetails(currentOrder.getOrderId());
            User user = userDAO.selectById(currentOrder.getUserId());
            
            StringBuilder sb = new StringBuilder();
            sb.append("=== CHI TIẾT ĐƠN HÀNG ===\n");
            sb.append("Mã đơn: ").append(currentOrder.getOrderId()).append("\n");
            sb.append("Ngày đặt: ").append(currentOrder.getOrderDate() != null ? currentOrder.getOrderDate().toString() : "N/A").append("\n");
            sb.append("Người đặt: ").append(user != null ? user.getFullName() : "N/A").append("\n");
            sb.append("Tổng số tiền phải trả: ").append(String.format("$%,.2f", currentOrder.getTotalAmount())).append("\n");
            sb.append("Trạng thái: ").append(getStatusDisplayName(currentOrder.getOrderStatus())).append("\n");
            sb.append("Phương thức thanh toán: ").append(getPaymentMethodDisplayName(currentOrder.getPaymentMethod())).append("\n");
            
            // Hiển thị thông tin địa chỉ giao hàng
            sb.append("\n=== THÔNG TIN GIAO HÀNG ===\n");
            
            // Ưu tiên lấy từ bảng Addresses theo OrderID (thông tin thực tế từ form đặt hàng)
            try {
                poly.dao.AddressDAO addressDAO = new poly.dao.impl.AddressDAOImpl();
                poly.entity.Address address = null;
                
                // Thử lấy theo OrderID trước (cách mới)
                if (currentOrder.getOrderId() != null) {
                    System.out.println("🔍 DEBUG - Tìm địa chỉ theo OrderID: " + currentOrder.getOrderId());
                    address = addressDAO.selectByOrderId(currentOrder.getOrderId());
                    System.out.println("🔍 DEBUG - Kết quả tìm theo OrderID: " + (address != null ? "FOUND" : "NOT FOUND"));
                    if (address != null) {
                        System.out.println("🔍 DEBUG - AddressID: " + address.getAddressId());
                        System.out.println("🔍 DEBUG - AddressLine1: " + address.getAddressLine1());
                        System.out.println("🔍 DEBUG - CustomerName: " + address.getCustomerName());
                    }
                } else {
                    System.out.println("🔍 DEBUG - OrderID is NULL");
                }
                
                // Nếu không tìm thấy theo OrderID, thử theo DeliveryAddressID (cách cũ)
                if (address == null && currentOrder.getDeliveryAddressId() != null) {
                    System.out.println("🔍 DEBUG - Tìm địa chỉ theo DeliveryAddressID: " + currentOrder.getDeliveryAddressId());
                    address = addressDAO.selectById(currentOrder.getDeliveryAddressId());
                    System.out.println("🔍 DEBUG - Kết quả tìm theo DeliveryAddressID: " + (address != null ? "FOUND" : "NOT FOUND"));
                    if (address != null) {
                        System.out.println("🔍 DEBUG - AddressID: " + address.getAddressId());
                        System.out.println("🔍 DEBUG - AddressLine1: " + address.getAddressLine1());
                        System.out.println("🔍 DEBUG - CustomerName: " + address.getCustomerName());
                    }
                } else if (address == null) {
                    System.out.println("🔍 DEBUG - DeliveryAddressID is NULL");
                }
                
                if (address != null) {
                    sb.append("Họ tên người nhận: ").append(address.getCustomerName() != null ? address.getCustomerName() : "N/A").append("\n");
                    sb.append("Số điện thoại: ").append(address.getPhone() != null ? address.getPhone() : "N/A").append("\n");
                    sb.append("Địa chỉ: ").append(address.getAddressLine1() != null ? address.getAddressLine1() : "N/A").append("\n");
                    sb.append("Thành phố: ").append(address.getCity() != null ? address.getCity() : "N/A").append("\n");
                    sb.append("Quốc gia: ").append(address.getCountry() != null ? address.getCountry() : "N/A").append("\n");
                    
                    // Debug: hiển thị thông tin để kiểm tra
                    System.out.println("DEBUG - OrderID: " + currentOrder.getOrderId());
                    System.out.println("DEBUG - DeliveryAddressID: " + currentOrder.getDeliveryAddressId());
                    System.out.println("DEBUG - Address found: " + (address != null));
                    System.out.println("DEBUG - AddressLine1: " + address.getAddressLine1());
                    System.out.println("DEBUG - CustomerName: " + address.getCustomerName());
                } else {
                    sb.append("Không tìm thấy thông tin địa chỉ giao hàng\n");
                    System.out.println("DEBUG - Không tìm thấy địa chỉ cho OrderID: " + currentOrder.getOrderId());
                    
                    // Fallback: thử lấy từ OrderRequest
                    if (orderRequest != null) {
                        sb.append("Họ tên người nhận: ").append(orderRequest.getCustomerName() != null ? orderRequest.getCustomerName() : "N/A").append("\n");
                        sb.append("Số điện thoại: ").append(orderRequest.getPhone() != null ? orderRequest.getPhone() : "N/A").append("\n");
                        sb.append("Địa chỉ: ").append(orderRequest.getAddress() != null ? orderRequest.getAddress() : "N/A").append("\n");
                        sb.append("Thành phố: ").append(orderRequest.getCity() != null ? orderRequest.getCity() : "N/A").append("\n");
                        sb.append("Quốc gia: ").append(orderRequest.getCountry() != null ? orderRequest.getCountry() : "N/A").append("\n");
                    } else {
                        // Fallback: lấy từ thông tin user
                        if (user != null) {
                            sb.append("Họ tên người nhận: ").append(user.getFullName() != null ? user.getFullName() : "N/A").append("\n");
                            sb.append("Số điện thoại: ").append(user.getPhone() != null ? user.getPhone() : "N/A").append("\n");
                            sb.append("Địa chỉ: ").append(user.getAddress() != null ? user.getAddress() : "N/A").append("\n");
                            sb.append("Thành phố: N/A\n");
                            sb.append("Quốc gia: N/A\n");
                        } else {
                            sb.append("Không tìm thấy thông tin địa chỉ giao hàng\n");
                        }
                    }
                }
            } catch (Exception e) {
                sb.append("Lỗi khi lấy thông tin địa chỉ: ").append(e.getMessage()).append("\n");
                e.printStackTrace(); // In stack trace để debug
            }
            
            // Hiển thị thông tin mã giảm giá
            sb.append("\n=== THÔNG TIN MÃ GIẢM GIÁ ===\n");
            String couponId = orderRequest != null ? orderRequest.getCouponId() : currentOrder.getCouponId();
            if (couponId != null && !couponId.trim().isEmpty()) {
                try {
                    poly.dao.CouponDAO couponDAO = new poly.dao.impl.CouponDAOImpl();
                    poly.entity.Coupon coupon = couponDAO.selectById(couponId);
                    if (coupon != null) {
                        sb.append("Mã giảm giá: ").append(coupon.getCouponId()).append("\n");
                        String discountType = coupon.getDiscountType();
                        String discountDisplay = "N/A";
                        
                        if ("Percent".equals(discountType)) {
                            discountDisplay = coupon.getDiscountValue() + "%";
                        } else if ("Fixed".equals(discountType)) {
                            discountDisplay = String.format("$%,.0f", coupon.getDiscountValue());
                        }
                        
                        sb.append("Loại giảm giá: ").append("Percent".equals(discountType) ? "Phần trăm" : "Số tiền cố định").append("\n");
                        sb.append("Giá trị giảm: ").append(discountDisplay).append("\n");
                    } else {
                        sb.append("Mã giảm giá: ").append(couponId).append(" (Không tìm thấy thông tin chi tiết)\n");
                    }
                } catch (Exception e) {
                    sb.append("Mã giảm giá: ").append(couponId).append(" (Lỗi khi lấy thông tin: ").append(e.getMessage()).append(")\n");
                }
            } else {
                sb.append("Không sử dụng mã giảm giá\n");
            }
            
            // Hiển thị lý do đổi trả hoặc lý do huỷ đơn hàng nếu có
            if (currentOrder.getReturnReason() != null && !currentOrder.getReturnReason().trim().isEmpty()) {
                sb.append("\n=== THÔNG TIN XỬ LÝ ===\n");
                String reason = currentOrder.getReturnReason();
                
                // Phân biệt rõ ràng loại lý do
                if (reason.startsWith("[ĐỔI TRẢ - ĐÃ THANH TOÁN]")) {
                    sb.append("🔄 YÊU CẦU ĐỔI TRẢ (Đã thanh toán):\n");
                    sb.append("   → Lý do: ").append(reason.substring(25)).append("\n");
                    sb.append("   → Xử lý: Hoàn tiền + Trả hàng\n");
                } else if (reason.startsWith("[ĐỔI TRẢ - CHƯA THANH TOÁN]")) {
                    sb.append("🔄 YÊU CẦU ĐỔI TRẢ (Chưa thanh toán):\n");
                    sb.append("   → Lý do: ").append(reason.substring(28)).append("\n");
                    sb.append("   → Xử lý: Chỉ trả hàng\n");
                } else if (reason.startsWith("[ĐỔI TRẢ]")) {
                    sb.append("🔄 YÊU CẦU ĐỔI TRẢ:\n");
                    sb.append("   → Lý do: ").append(reason.substring(10)).append("\n");
                } else if (reason.startsWith("[HUỶ]")) {
                    sb.append("❌ LÝ DO HUỶ ĐƠN HÀNG:\n");
                    sb.append("   → Lý do: ").append(reason.substring(6)).append("\n");
                    sb.append("   → Xử lý: Huỷ đơn hàng + Cập nhật tồn kho\n");
                } else {
                    // Fallback cho dữ liệu cũ
                    sb.append("📝 LÝ DO:\n");
                    sb.append("   → ").append(reason).append("\n");
                }
            }
            
            sb.append("\n=== DANH SÁCH SẢN PHẨM ===\n");
            if (details != null && !details.isEmpty()) {
            for (OrderDetail detail : details) {
                // Lấy thông tin sản phẩm để hiển thị tên thay vì mã
                String productName = "N/A";
                try {
                    poly.entity.Product product = productDAO.selectById(detail.getProductId());
                    if (product != null) {
                        productName = product.getProductName();
                    }
                } catch (Exception e) {
                    // Nếu không lấy được tên sản phẩm thì dùng mã
                    productName = detail.getProductId();
                }
                
                sb.append("• ").append(productName)
                      .append("\n  Số lượng: ").append(detail.getQuantity())
                      .append(" | Đơn giá: ").append(String.format("$%,.2f", detail.getUnitPrice()))
                      .append(" | Thành tiền: ").append(String.format("$%,.2f", detail.getUnitPrice().multiply(new java.math.BigDecimal(detail.getQuantity()))))
                  .append("\n");
                }
            } else {
                sb.append("Không có sản phẩm nào trong đơn hàng\n");
            }
            
            XDialog.alert(sb.toString());
        } catch (Exception e) {
            XDialog.alert("Lỗi xem chi tiết: " + e.getMessage());
        }
    }

    private void requestReturn() {
        if (isProcessingOrder) {
            return; // Tránh xử lý nhiều lần
        }
        
        edit();
        if (currentOrder == null) {
            XDialog.alert("Vui lòng chọn đơn hàng để yêu cầu đổi trả!");
            return;
        }
        
        // Cho phép yêu cầu đổi trả khi đã nhận hàng (Completed) hoặc đang giao hàng (Delivering)
        if (!"Completed".equals(currentOrder.getOrderStatus()) && !"Delivering".equals(currentOrder.getOrderStatus())) {
            XDialog.alert("Chỉ có thể yêu cầu đổi trả đơn hàng đã hoàn thành hoặc đang giao hàng!\n\nTrạng thái hiện tại: " + getStatusDisplayName(currentOrder.getOrderStatus()));
            return;
        }
        
        // Hiển thị dialog nhập lý do đổi trả
        String returnReason = javax.swing.JOptionPane.showInputDialog(
            this,
            "Vui lòng nhập lý do đổi trả:",
            "Yêu cầu đổi trả",
            javax.swing.JOptionPane.QUESTION_MESSAGE
        );
        
        if (returnReason != null && !returnReason.trim().isEmpty()) {
            if (XDialog.confirm("Bạn có chắc muốn yêu cầu đổi trả đơn hàng này?")) {
                try {
                    isProcessingOrder = true; // Set flag
                    
                    // Phân biệt loại đổi trả dựa trên trạng thái
                    String reasonWithPrefix;
                    if ("Completed".equals(currentOrder.getOrderStatus())) {
                        reasonWithPrefix = "[ĐỔI TRẢ - ĐÃ THANH TOÁN] " + returnReason.trim();
                    } else {
                        reasonWithPrefix = "[ĐỔI TRẢ - CHƯA THANH TOÁN] " + returnReason.trim();
                    }
                    
                    orderDAO.updateOrderStatusWithReasonAndInventory(currentOrder.getOrderId(), "Cancelled", reasonWithPrefix);
                    XDialog.alert("Đã gửi yêu cầu đổi trả thành công và cập nhật tồn kho!");
                    fillToTable();
                } catch (Exception e) {
                    XDialog.alert("Lỗi gửi yêu cầu: " + e.getMessage());
                } finally {
                    isProcessingOrder = false; // Reset flag
                }
            }
        } else if (returnReason != null) {
            XDialog.alert("Vui lòng nhập lý do đổi trả!");
        }
    }

    private String getStatusDisplayName(String status) {
        switch (status) {
            case "Pending": return "⏳ Chờ xử lý";
            case "Processing": return "⚙️ Đang xử lý";
            case "Shipped": return "📦 Đã gửi hàng";
            case "Delivering": return "🚚 Đang giao hàng";
            case "Completed": return "✅ Đã hoàn thành";
            case "Cancelled": return "❌ Đã huỷ/Đổi trả";
            default: return status;
        }
    }
    
    /**
     * Lấy tên hiển thị cho phương thức thanh toán
     */
    private String getPaymentMethodDisplayName(String paymentMethod) {
        if (paymentMethod == null || paymentMethod.trim().isEmpty()) {
            return "N/A";
        }
        
        // Debug: in ra giá trị để kiểm tra
        System.out.println("🔍 DEBUG Payment Method - Raw value: '" + paymentMethod + "'");
        System.out.println("🔍 DEBUG Payment Method - Trimmed: '" + paymentMethod.trim() + "'");
        
        String trimmedMethod = paymentMethod.trim();
        
        // Sử dụng contains() thay vì equals() để tránh encoding issues
        if (trimmedMethod.contains("Thanh toán") || trimmedMethod.contains("COD") || 
            trimmedMethod.contains("Cash on Delivery") || trimmedMethod.contains("Cash")) {
            System.out.println("🔍 DEBUG Payment Method - Matched: COD (contains)");
            return "💳 Thanh toán khi nhận hàng (COD)";
        } else if (trimmedMethod.contains("Credit") || trimmedMethod.contains("Thẻ tín dụng")) {
            System.out.println("🔍 DEBUG Payment Method - Matched: Credit Card (contains)");
            return "💳 Thẻ tín dụng";
        } else if (trimmedMethod.contains("Bank") || trimmedMethod.contains("Chuyển khoản")) {
            System.out.println("🔍 DEBUG Payment Method - Matched: Bank Transfer (contains)");
            return "🏦 Chuyển khoản ngân hàng";
        } else if (trimmedMethod.contains("PayPal")) {
            System.out.println("🔍 DEBUG Payment Method - Matched: PayPal (contains)");
            return "💳 PayPal";
        } else if (trimmedMethod.contains("Momo")) {
            System.out.println("🔍 DEBUG Payment Method - Matched: MoMo (contains)");
            return "📱 MoMo";
        } else if (trimmedMethod.contains("ZaloPay")) {
            System.out.println("🔍 DEBUG Payment Method - Matched: ZaloPay (contains)");
            return "📱 ZaloPay";
        } else if (trimmedMethod.contains("VNPay")) {
            System.out.println("🔍 DEBUG Payment Method - Matched: VNPay (contains)");
            return "💳 VNPay";
        } else {
            System.out.println("🔍 DEBUG Payment Method - No match, returning original: " + trimmedMethod);
            return trimmedMethod;
        }
    }
    
    /**
     * Kiểm tra có thể huỷ đơn hàng không
     * Cho phép huỷ khi: Pending, Processing, Shipped, Delivering
     */
    private boolean canCancelOrder(String status) {
        return "Pending".equals(status) || "Processing".equals(status) || "Shipped".equals(status) || "Delivering".equals(status);
    }
    
    /**
     * Kiểm tra có thể yêu cầu đổi trả không
     * Cho phép đổi trả khi: Completed, Delivering (đang giao hàng có thể yêu cầu đổi trả)
     */
    private boolean canRequestReturn(String status) {
        return "Completed".equals(status) || "Delivering".equals(status);
    }

    private void cancelOrder() {
        if (isProcessingOrder) {
            return; // Tránh xử lý nhiều lần
        }
        
        edit();
        if (currentOrder == null) {
            XDialog.alert("Vui lòng chọn đơn hàng để huỷ!");
            return;
        }
        
        // Cho phép huỷ khi chưa hoàn thành (Pending, Processing, Shipped, Delivering)
        if (!"Pending".equals(currentOrder.getOrderStatus()) && !"Processing".equals(currentOrder.getOrderStatus()) && !"Shipped".equals(currentOrder.getOrderStatus()) && !"Delivering".equals(currentOrder.getOrderStatus())) {
            XDialog.alert("Chỉ có thể huỷ đơn hàng khi chưa hoàn thành!\n\nTrạng thái hiện tại: " + getStatusDisplayName(currentOrder.getOrderStatus()) + "\n\nCó thể huỷ khi: ⏳ Chờ xử lý, ⚙️ Đang xử lý, 📦 Đã gửi hàng, 🚚 Đang giao hàng");
            return;
        }
        
        // Hiển thị dialog nhập lý do huỷ đơn hàng
        String cancelReason = javax.swing.JOptionPane.showInputDialog(
            this,
            "Vui lòng nhập lý do huỷ đơn hàng:",
            "Huỷ đơn hàng",
            javax.swing.JOptionPane.QUESTION_MESSAGE
        );
        
        if (cancelReason != null && !cancelReason.trim().isEmpty()) {
            if (XDialog.confirm("Bạn có chắc muốn huỷ đơn hàng này?")) {
                try {
                    isProcessingOrder = true; // Set flag
                    
                    // Sử dụng method mới để lưu cả trạng thái, lý do và cập nhật tồn kho
                    // Thêm prefix để admin phân biệt được
                    String reasonWithPrefix = "[HUỶ] " + cancelReason.trim();
                    orderDAO.updateOrderStatusWithReasonAndInventory(currentOrder.getOrderId(), "Cancelled", reasonWithPrefix);
                    XDialog.alert("Đã huỷ đơn hàng thành công và cập nhật tồn kho!");
                    fillToTable();
                } catch (Exception e) {
                    XDialog.alert("Lỗi huỷ đơn hàng: " + e.getMessage());
                } finally {
                    isProcessingOrder = false; // Reset flag
                }
            }
        } else if (cancelReason != null) {
            XDialog.alert("Vui lòng nhập lý do huỷ đơn hàng!");
        }
    }

    /**
     * Thêm debug logs mà không thay đổi event listeners
     */
    private void addDebugLogs() {
        System.out.println("DEBUG: TDDonHangJDialog_nghia initialized");
        System.out.println("DEBUG: tblLichSu listeners count: " + tblLichSu.getMouseListeners().length);
        System.out.println("DEBUG: tblHienTai listeners count: " + tblHienTai.getMouseListeners().length);
        System.out.println("DEBUG: Original event listeners preserved");
    }

    /**
     * Mở dialog chi tiết hóa đơn khi double-click vào dòng trong bảng
     */
    private void openOrderDetailDialog() {
        // Lấy thông tin đơn hàng trực tiếp từ dòng được chọn
        int selectedTab = jTabbedPane1.getSelectedIndex();
        int row = selectedTab == 0 ? tblLichSu.getSelectedRow() : tblHienTai.getSelectedRow();
        
        System.out.println("DEBUG: Tab selected: " + selectedTab + ", Row selected: " + row);
        
        if (row < 0) {
            XDialog.alert("Vui lòng chọn đơn hàng để xem chi tiết!");
            return;
        }
        
        try {
            // Lấy OrderID trực tiếp từ bảng
            Integer orderId = (Integer) (selectedTab == 0 ? 
                tblLichSu.getValueAt(row, 0) : tblHienTai.getValueAt(row, 0));
            
            System.out.println("DEBUG: OrderID from table: " + orderId);
            
            if (orderId == null) {
                XDialog.alert("Không thể lấy mã đơn hàng!");
                return;
            }
            
            // Lấy thông tin đơn hàng từ database
            currentOrder = orderDAO.selectById(orderId);
            
            if (currentOrder == null) {
                XDialog.alert("Không tìm thấy thông tin đơn hàng!");
                return;
            }
            
            System.out.println("DEBUG: Current order loaded: " + currentOrder.getOrderId());
            
            // Mở dialog chi tiết hóa đơn
            HoaDonChiTiet hoaDonDialog = new HoaDonChiTiet((java.awt.Frame) this.getParent(), true, currentOrder.getOrderId().intValue());
            hoaDonDialog.setLocationRelativeTo(this);
            hoaDonDialog.setVisible(true);
            
            System.out.println("DEBUG: Dialog opened successfully");
            
        } catch (Exception e) {
            System.err.println("DEBUG: Error opening dialog: " + e.getMessage());
            e.printStackTrace();
            XDialog.alert("Lỗi khi mở chi tiết hóa đơn: " + e.getMessage());
        }
    }
    
 
    
    /**
     * Mở dialog đánh giá sản phẩm
     */
    private void openRatingDialog() {
        // Kiểm tra xem có đơn hàng nào được chọn không
        if (currentOrder == null) {
            XDialog.alert("Vui lòng chọn đơn hàng để đánh giá!");
            return;
        }
        
        // Kiểm tra trạng thái đơn hàng
        if (!"Completed".equals(currentOrder.getOrderStatus())) {
            XDialog.alert("Chỉ có thể đánh giá đơn hàng đã hoàn thành (Completed)!");
            return;
        }
        
        try {
            // Lấy danh sách sản phẩm trong đơn hàng
            List<OrderDetail> orderDetails = orderDetailDAO.selectByOrderId(currentOrder.getOrderId());
            
            if (orderDetails == null || orderDetails.isEmpty()) {
                XDialog.alert("Không tìm thấy sản phẩm nào trong đơn hàng này!");
                return;
            }
            
            // Tạo combobox chọn sản phẩm (chỉ những sản phẩm chưa được đánh giá)
            int currentUserId = CurrentUserUtil.getCurrentUserId();
            java.util.List<String> availableProducts = new java.util.ArrayList<>();
            
            for (OrderDetail detail : orderDetails) {
                String productId = detail.getProductId().trim();
                System.out.println("DEBUG: Checking product " + productId + " for user " + currentUserId);
                
                // Kiểm tra xem user đã đánh giá sản phẩm này trong đơn hàng này chưa
                boolean hasReviewed = productReviewDAO.hasUserReviewedInOrder(productId, currentUserId, currentOrder.getOrderId());
                System.out.println("DEBUG: User has reviewed " + productId + " in order " + currentOrder.getOrderId() + ": " + hasReviewed);
                
                if (!hasReviewed) {
                    poly.entity.Product product = productDAO.selectById(productId);
                    String productName = product != null ? product.getProductName() : productId;
                    String option = productName + " (ID: " + productId + ")";
                    availableProducts.add(option);
                    System.out.println("DEBUG: Added to available products: " + option);
                } else {
                    System.out.println("DEBUG: Skipped already reviewed product: " + productId);
                }
            }
            
            if (availableProducts.isEmpty()) {
                XDialog.alert("Bạn đã đánh giá tất cả sản phẩm trong đơn hàng này rồi!");
                return;
            }
            
            String[] productOptions = availableProducts.toArray(new String[0]);
            
            // Hiển thị dialog chọn sản phẩm
            String selectedProduct = (String) JOptionPane.showInputDialog(
                this,
                "Chọn sản phẩm để đánh giá:",
                "Chọn Sản Phẩm",
                JOptionPane.QUESTION_MESSAGE,
                null,
                productOptions,
                productOptions[0]
            );
            
            if (selectedProduct != null) {
                // Lấy productId từ chuỗi được chọn
                int startIndex = selectedProduct.lastIndexOf("(ID: ") + 4;
                int endIndex = selectedProduct.lastIndexOf(")");
                String productId = selectedProduct.substring(startIndex, endIndex).trim(); // Thêm trim() để loại bỏ khoảng trắng
                
                System.out.println("DEBUG: Selected product string: " + selectedProduct);
                System.out.println("DEBUG: Extracted productId: '" + productId + "'"); // Thêm dấu ngoặc để thấy khoảng trắng
                
                // Lấy thông tin sản phẩm
                poly.entity.Product product = productDAO.selectById(productId);
                System.out.println("DEBUG: Product from database: " + (product != null ? product.getProductName() : "NULL"));
                
                if (product == null) {
                    System.err.println("DEBUG: Product not found for ID: " + productId);
                    XDialog.alert("Không tìm thấy thông tin sản phẩm! ProductID: " + productId);
                    return;
                }
                
                // Kiểm tra xem user đã đánh giá sản phẩm này trong đơn hàng này chưa
                boolean hasReviewed = productReviewDAO.hasUserReviewedInOrder(productId, currentUserId, currentOrder.getOrderId());
                System.out.println("DEBUG: User " + currentUserId + " has reviewed product " + productId + " in order " + currentOrder.getOrderId() + ": " + hasReviewed);
                
                if (hasReviewed) {
                    XDialog.alert("Bạn đã đánh giá sản phẩm này trong đơn hàng này rồi! Mỗi sản phẩm trong mỗi đơn hàng chỉ có thể đánh giá một lần.");
                    return;
                }
                
                // Lấy hình ảnh sản phẩm
                ImageIcon productImage = null;
                System.out.println("DEBUG: Product ImagePath: '" + product.getImagePath() + "'");
                
                if (product.getImagePath() != null && !product.getImagePath().trim().isEmpty()) {
                    try {
                        // Đường dẫn trong database đã có product_images\ rồi, chỉ cần sử dụng trực tiếp
                        String imagePath = product.getImagePath().trim();
                        java.io.File imageFile = new java.io.File(imagePath);
                        System.out.println("DEBUG: Image file path: " + imageFile.getAbsolutePath());
                        System.out.println("DEBUG: Image file exists: " + imageFile.exists());
                        
                        if (imageFile.exists()) {
                            productImage = new ImageIcon(imagePath);
                            System.out.println("DEBUG: Original image size: " + productImage.getIconWidth() + "x" + productImage.getIconHeight());
                            
                            // Resize image để phù hợp với lblHinhAnh (256x256)
                            Image img = productImage.getImage();
                            Image resizedImg = img.getScaledInstance(256, 256, Image.SCALE_SMOOTH);
                            productImage = new ImageIcon(resizedImg);
                            System.out.println("DEBUG: Resized image size: " + productImage.getIconWidth() + "x" + productImage.getIconHeight());
                        } else {
                            System.err.println("DEBUG: Image file not found: " + imagePath);
                        }
                    } catch (Exception e) {
                        System.err.println("DEBUG: Error loading image: " + e.getMessage());
                        e.printStackTrace();
                    }
                } else {
                    System.out.println("DEBUG: Product has no image path");
                }
                
                // Nếu không có hình ảnh, sử dụng hình mặc định
                if (productImage == null) {
                    System.out.println("DEBUG: Using default image");
                    try {
                        productImage = new ImageIcon(getClass().getResource("/poly/icon/AnhNenGo.png"));
                        if (productImage.getImage() != null) {
                            Image img = productImage.getImage();
                            Image resizedImg = img.getScaledInstance(256, 256, Image.SCALE_SMOOTH);
                            productImage = new ImageIcon(resizedImg);
                        }
                    } catch (Exception e) {
                        System.err.println("DEBUG: Error loading default image: " + e.getMessage());
                        // Tạo một ImageIcon trống với kích thước 256x256
                        productImage = new ImageIcon();
                    }
                }
                
                System.out.println("DEBUG: Final productImage: " + (productImage != null ? "Loaded" : "NULL"));
                
                // Tạo tiêu đề cho dialog
                String dialogTitle = "Đánh giá sản phẩm " + product.getProductName() + " (Đơn hàng #" + currentOrder.getOrderId() + ")";
                
                // Mở dialog đánh giá
                DanhGiaJDialog1 ratingDialog = new DanhGiaJDialog1(
                    (java.awt.Frame) this.getParent(),
                    productId,
                    CurrentUserUtil.getCurrentUserId(),
                    product.getProductName(),
                    productImage,
                    true, // daMua = true vì đã mua sản phẩm
                    currentOrder.getOrderId() // Truyền orderId
                );
                
                ratingDialog.setTitle(dialogTitle);
                ratingDialog.setLocationRelativeTo(this);
                ratingDialog.setVisible(true);
                
                XDialog.alert("Cảm ơn bạn đã đánh giá sản phẩm!");
                
            }
            
        } catch (Exception e) {
            System.err.println("Lỗi khi mở dialog đánh giá: " + e.getMessage());
            e.printStackTrace();
            XDialog.alert("Lỗi khi mở dialog đánh giá: " + e.getMessage());
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TDDonHangJDialog_nghia.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TDDonHangJDialog_nghia.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TDDonHangJDialog_nghia.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TDDonHangJDialog_nghia.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                TDDonHangJDialog_nghia dialog = new TDDonHangJDialog_nghia(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }
}

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JDialog.java to edit this template
 */
package poly.ui.manager;

import java.util.List;
import poly.dao.InventoryDAO;
import poly.dao.impl.InventoryDAOImpl;
import poly.entity.InventoryTransaction;
import poly.entity.Product;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import poly.dao.impl.CategoryDAOImpl;
import poly.entity.Category;
import java.util.ArrayList;
import poly.util.CurrentUserUtil;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.time.temporal.TemporalAdjusters;
import java.time.DayOfWeek;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;

/**
 *
 * @author admin
 */
public class QLKhoJDialog extends javax.swing.JDialog implements InventoryDAO{

    /**
     * Creates new form QLTonKhoJDialog
     */
    public QLKhoJDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        loadCategoryNames();
        fillToTable(getCurrentInventory()); // Tự động fill bảng nền khi mở form
        fillHistoryTable(getInventoryHistory(null, null, null, null, null));
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                onTransactionTypeSelected();
            }
        });
        jComboBox2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox2ActionPerformed(evt);
            }
        });
    }

    private void jComboBox2ActionPerformed(java.awt.event.ActionEvent evt) {
        LocalDate today = LocalDate.now();
        DateTimeFormatter fmt = DateTimeFormatter.ofPattern("yyyy-MM-dd");
        String tuNgay = "";
        String denNgay = "";
        switch (jComboBox2.getSelectedIndex()) {
            case 0: // Hôm Nay
                tuNgay = today.format(fmt);
                denNgay = today.format(fmt);
                break;
            case 1: // Tuần Này
                LocalDate monday = today.with(DayOfWeek.MONDAY);
                LocalDate sunday = today.with(DayOfWeek.SUNDAY);
                tuNgay = monday.format(fmt);
                denNgay = sunday.format(fmt);
                break;
            case 2: // Tháng Này
                LocalDate firstDay = today.withDayOfMonth(1);
                LocalDate lastDay = today.with(TemporalAdjusters.lastDayOfMonth());
                tuNgay = firstDay.format(fmt);
                denNgay = lastDay.format(fmt);
                break;
            case 3: // Quý Này
                int currentQuarter = (today.getMonthValue() - 1) / 3 + 1;
                LocalDate firstDayOfQuarter = LocalDate.of(today.getYear(), (currentQuarter - 1) * 3 + 1, 1);
                LocalDate lastDayOfQuarter = firstDayOfQuarter.plusMonths(2).with(TemporalAdjusters.lastDayOfMonth());
                tuNgay = firstDayOfQuarter.format(fmt);
                denNgay = lastDayOfQuarter.format(fmt);
                break;
            case 4: // Năm Nay
                LocalDate firstDayOfYear = today.withDayOfYear(1);
                LocalDate lastDayOfYear = today.with(TemporalAdjusters.lastDayOfYear());
                tuNgay = firstDayOfYear.format(fmt);
                denNgay = lastDayOfYear.format(fmt);
                break;
            default:
                tuNgay = "";
                denNgay = "";
        }
        jTextField9.setText(tuNgay);
        jTextField5.setText(denNgay);
        // Gọi luôn tìm kiếm theo ngày
        jButton4ActionPerformed(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        jComboBox4 = new javax.swing.JComboBox<>();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jLabel5 = new javax.swing.JLabel();
        jTextField5 = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox<>();
        jComboBox2 = new javax.swing.JComboBox<>();
        jLabel8 = new javax.swing.JLabel();
        jComboBox3 = new javax.swing.JComboBox<>();
        jTextField9 = new javax.swing.JTextField();
        jButton4 = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jTextField6 = new javax.swing.JTextField();
        jTextField7 = new javax.swing.JTextField();
        jTextField8 = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        jButton5 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jLabel12 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jButton7 = new javax.swing.JButton();
        jButton8 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Tên Sản Phẩm", "Mã Sản Phẩm", "Danh Mục", "Tồn Kho"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        jLabel1.setText("Tìm Theo Tên");

        jButton1.setText("Tìm");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel2.setText("Tìm Theo Danh Mục");

        jButton2.setText("Tìm");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jComboBox4.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 703, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2))
                        .addGap(32, 32, 32)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 249, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(32, 32, 32)
                                .addComponent(jButton1))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jComboBox4, javax.swing.GroupLayout.PREFERRED_SIZE, 249, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(32, 32, 32)
                                .addComponent(jButton2)))))
                .addContainerGap(211, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jButton2)
                        .addComponent(jComboBox4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 294, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(35, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Tồn Kho", jPanel1);

        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Mã giao dịch", "Loại Giao Dịch", "Tên Sản Phẩm", "Mã Sản Phẩm", "Danh Mục", "Người Thực Hiện", "Thời Gian", "Ghi Chú"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, true, false, false, true, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(jTable2);

        jLabel5.setText("Từ Ngày");

        jLabel6.setText("Đến Ngày");

        jLabel7.setText("Loại");

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Tất Cả", "Nhập Kho", "Xuất Kho Toàn Bộ", "Xuất Kho Theo Hóa Đơn", "Xuất Kho Khác" }));

        jComboBox2.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Hôm Nay", "Tuần Này", "Tháng Này", "Qúy Này", "Năm Nay" }));

        jLabel8.setText("Danh Mục");

        jComboBox3.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jButton4.setText("Tìm");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2)
                .addContainerGap())
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel5)
                    .addComponent(jLabel7)
                    .addComponent(jLabel8))
                .addGap(45, 45, 45)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jComboBox3, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(8, 8, 8)
                        .addComponent(jTextField9, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel6)
                        .addGap(18, 18, 18)
                        .addComponent(jTextField5, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(34, 34, 34)
                        .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jButton4))
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(216, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(27, 27, 27)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton4)))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(26, 26, 26)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(jTextField5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel6)
                            .addComponent(jTextField9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel7)
                            .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 28, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(jComboBox3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(30, 30, 30)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 270, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("Lịch Sử Xuất Nhập", jPanel2);

        jLabel9.setText("Mã Sản Phẩm");

        jLabel10.setText("Tên Sản Phẩm");

        jTextField6.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTextField6FocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTextField6FocusLost(evt);
            }
        });
        jTextField6.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTextField6KeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTextField6KeyReleased(evt);
            }
        });

        jTextField7.setEditable(false);

        jLabel11.setText("Số Lượng");

        jButton5.setText("Nhập Kho");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jButton6.setText("Xuất Kho Khác");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        jLabel12.setText("Ghi Chú");

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane3.setViewportView(jTextArea1);

        jButton7.setText("Đóng");

        jButton8.setText("Nhập Lại");
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel3Layout.createSequentialGroup()
                        .addGap(62, 62, 62)
                        .addComponent(jButton5)
                        .addGap(88, 88, 88)
                        .addComponent(jButton6)
                        .addGap(77, 77, 77)
                        .addComponent(jButton8)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 91, Short.MAX_VALUE)
                        .addComponent(jButton7))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel3Layout.createSequentialGroup()
                        .addGap(30, 30, 30)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jLabel9)
                                .addComponent(jLabel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(33, 33, 33)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jTextField8)
                            .addComponent(jTextField6, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jTextField7, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 490, Short.MAX_VALUE))))
                .addContainerGap(264, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(jTextField6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(39, 39, 39)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10)
                    .addComponent(jTextField7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(27, 27, 27)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel11)
                    .addComponent(jTextField8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(44, 44, 44)
                        .addComponent(jLabel12))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(59, 59, 59)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton8)
                            .addComponent(jButton6)
                            .addComponent(jButton5)
                            .addComponent(jButton7))))
                .addContainerGap(105, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Xuất Nhập Kho", jPanel3);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addComponent(jTabbedPane1)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
timtheoten();        // TODO add your handling code here:
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
timtheodanhmuc();        // TODO add your handling code here:
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
handleXuatKho();        // TODO add your handling code here:
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8ActionPerformed
nhaplai();        // TODO add your handling code here:
    }//GEN-LAST:event_jButton8ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
handleNhapKho();        // TODO add your handling code here:
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jTextField6FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextField6FocusGained
//checkAndFillProductName();       // TODO add your handling code here:
    }//GEN-LAST:event_jTextField6FocusGained

    private void jTextField6KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField6KeyPressed
     
    }//GEN-LAST:event_jTextField6KeyPressed

    private void jTextField6KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField6KeyReleased
     // TODO add your handling code here:
    }//GEN-LAST:event_jTextField6KeyReleased

    private void jTextField6FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextField6FocusLost
checkAndFillProductName();        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField6FocusLost

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(QLKhoJDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(QLKhoJDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(QLKhoJDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(QLKhoJDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                QLKhoJDialog dialog = new QLKhoJDialog(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JComboBox<String> jComboBox2;
    private javax.swing.JComboBox<String> jComboBox3;
    private javax.swing.JComboBox<String> jComboBox4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable2;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField5;
    private javax.swing.JTextField jTextField6;
    private javax.swing.JTextField jTextField7;
    private javax.swing.JTextField jTextField8;
    private javax.swing.JTextField jTextField9;
    // End of variables declaration//GEN-END:variables

    private final InventoryDAOImpl inventoryDAO = new InventoryDAOImpl();
    private final CategoryDAOImpl categoryDAO = new CategoryDAOImpl();
    private List<Category> categoryList = new ArrayList<>();

    @Override
    public List<Product> getCurrentInventory() {
        return inventoryDAO.getCurrentInventory();
    }

    @Override
    public List<InventoryTransaction> getInventoryHistoryByProduct(String productId) {
        return inventoryDAO.getInventoryHistoryByProduct(productId);
    }

    @Override
    public List<InventoryTransaction> getInventoryHistory(String productName, String categoryId, String type, String fromDate, String toDate) {
        return inventoryDAO.getInventoryHistory(productName, categoryId, type, fromDate, toDate);
    }

    @Override
    public boolean addInventoryTransaction(InventoryTransaction transaction) {
        return inventoryDAO.addInventoryTransaction(transaction);
    }

    @Override
    public List<Product> getLowStockProducts(int threshold) {
        return inventoryDAO.getLowStockProducts(threshold);
    }

    @Override
    public List<Product> searchProducts(String name, String categoryId, Double minPrice, Double maxPrice) {
        return inventoryDAO.searchProducts(name, categoryId, minPrice, maxPrice);
    }

    @Override
    public Product getProductById(String productId) {
        return inventoryDAO.getProductById(productId);
    }

    // Hàm load danh mục vào combobox
    private void loadCategoryNames() {
        categoryList = categoryDAO.selectAll();
        jComboBox4.removeAllItems();
        jComboBox3.removeAllItems();
        jComboBox4.addItem("Tất cả");
        jComboBox3.addItem("Tất cả");
        for (Category c : categoryList) {
            jComboBox4.addItem(c.getCategoryName());
            jComboBox3.addItem(c.getCategoryName());
        }
        // Gán sự kiện chọn danh mục
        jComboBox4.addActionListener(e -> onCategorySelected());
        jComboBox3.addActionListener(e -> onCategoryHistorySelected());
    }

    // Khi chọn danh mục ở tab tồn kho
    private void onCategorySelected() {
        int idx = jComboBox4.getSelectedIndex();
        if (idx == 0) {
            fillToTable(getCurrentInventory());
        } else {
            String categoryId = categoryList.get(idx - 1).getCategoryId();
            List<Product> products = searchProducts(null, categoryId, null, null);
            fillToTable(products);
        }
    }

    // Khi chọn danh mục ở tab lịch sử
    private void onCategoryHistorySelected() {
        int idx = jComboBox3.getSelectedIndex();
        if (idx == 0) {
            fillHistoryTable(getInventoryHistory(null, null, null, null, null));
        } else {
            String categoryId = categoryList.get(idx - 1).getCategoryId();
            fillHistoryTable(getInventoryHistory(null, categoryId, null, null, null));
        }
    }

    // Sự kiện Tìm theo tên
    private void timtheoten() {
        String name = jTextField1.getText();
        int idx = jComboBox4.getSelectedIndex();
        String categoryId = null;
        if (idx > 0) {
            categoryId = categoryList.get(idx - 1).getCategoryId();
        }
        List<Product> products = searchProducts(name, categoryId, null, null);
        fillToTable(products);
    }

    // Sự kiện Tìm theo danh mục
    private void timtheodanhmuc() {
        int idx = jComboBox4.getSelectedIndex();
        if (idx == 0) {
            fillToTable(getCurrentInventory());
        } else {
            String categoryId = categoryList.get(idx - 1).getCategoryId();
            List<Product> products = searchProducts(null, categoryId, null, null);
            fillToTable(products);
        }
    }

    // Sự kiện Tìm theo giá
//    private void timtheogia() {
//        Double min = null, max = null;
//        try {
//            min = Double.parseDouble(jTextField3.getText());
//        } catch (Exception e) {}
//        try {
//            max = Double.parseDouble(jTextField4.getText());
//        } catch (Exception e) {}
//        int idx = jComboBox4.getSelectedIndex();
//        String categoryId = null;
//        if (idx > 0) {
//            categoryId = categoryList.get(idx - 1).getCategoryId();
//        }
//        List<Product> products = searchProducts(null, categoryId, min, max);
//        fillToTable(products);
//    }

    // Sự kiện lấy lịch sử xuất nhập kho
    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {
        String fromDate = jTextField9.getText().trim(); // Từ ngày
        String toDate = jTextField5.getText().trim();   // Đến ngày
        if (!fromDate.isEmpty()) fromDate += " 00:00:00";
        if (!toDate.isEmpty()) toDate += " 23:59:59";
        // Lấy loại giao dịch đang chọn
        int idx = jComboBox1.getSelectedIndex();
        String type = null;
        switch (idx) {
            case 1: type = "PurchaseIn"; break;
            case 2: type = null; break; // Xuất kho toàn bộ: SaleOut + Adjustment, sẽ lọc sau
            case 3: type = "SaleOut"; break;
            case 4: type = "Adjustment"; break;
            default: type = null;
        }
        // Lấy danh mục đang chọn
        int catIdx = jComboBox3.getSelectedIndex();
        String categoryId = null;
        if (catIdx > 0) {
            categoryId = categoryList.get(catIdx - 1).getCategoryId();
        }
        // Lấy tất cả giao dịch theo ngày, loại, danh mục
        List<InventoryTransaction> all = getInventoryHistory(null, categoryId, type, fromDate, toDate);
        // Nếu chọn Xuất kho toàn bộ, lọc lại cho đúng
        if (idx == 2) {
            List<InventoryTransaction> filtered = new ArrayList<>();
            for (InventoryTransaction it : all) {
                if ("SaleOut".equals(it.getTransactionType()) || "Adjustment".equals(it.getTransactionType())) filtered.add(it);
            }
            fillHistoryTable(filtered);
        } else if (idx == 3) { // Xuất kho theo hóa đơn
            List<InventoryTransaction> filtered = new ArrayList<>();
            for (InventoryTransaction it : all) {
                if ("SaleOut".equals(it.getTransactionType()) && it.getReferenceId() != null && !it.getReferenceId().isEmpty()) filtered.add(it);
            }
            fillHistoryTable(filtered);
        } else {
            fillHistoryTable(all);
        }
    }

    // Khi nhập mã sản phẩm, tự động điền tên sản phẩm
    private void checkAndFillProductName() {
        String productId = jTextField6.getText().trim();
        if (productId.isEmpty()) {
            jTextField7.setText("");
            return;
        }
        Product p = getProductById(productId);
        if (p != null) {
            jTextField7.setText(p.getProductName());
        } else {
            jTextField7.setText("");
            JOptionPane.showMessageDialog(this, "Mã sản phẩm không tồn tại!", "Lỗi", JOptionPane.ERROR_MESSAGE);
        }
    }

    // Xử lý nhập kho
    private void handleNhapKho() {
        String productId = jTextField6.getText().trim();
        Product p = getProductById(productId);
        if (p == null) {
            JOptionPane.showMessageDialog(this, "Mã sản phẩm không tồn tại!", "Lỗi", JOptionPane.ERROR_MESSAGE);
            return;
        }
        int soLuong;
        try {
            soLuong = Integer.parseInt(jTextField8.getText().trim());
            if (soLuong <= 0) throw new Exception();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Số lượng nhập không hợp lệ!", "Lỗi", JOptionPane.ERROR_MESSAGE);
            return;
        }
        InventoryTransaction it = new InventoryTransaction();
        it.setProductId(productId);
        it.setTransactionType("PurchaseIn");
        it.setQuantityChange(soLuong);
        it.setReferenceId(null);
        it.setNotes(jTextArea1.getText());
        it.setUserId(poly.util.CurrentUserUtil.getCurrentUserId());
        boolean ok = addInventoryTransaction(it);
        if (ok) {
            JOptionPane.showMessageDialog(this, "Nhập kho thành công!");
            fillToTable(getCurrentInventory());
            fillHistoryTable(getInventoryHistory(null, null, null, null, null));
        } else {
            JOptionPane.showMessageDialog(this, "Lỗi nhập kho!", "Lỗi", JOptionPane.ERROR_MESSAGE);
        }
    }

    // Xử lý xuất kho khác
    private void handleXuatKho() {
        String productId = jTextField6.getText().trim();
        Product p = getProductById(productId);
        if (p == null) {
            JOptionPane.showMessageDialog(this, "Mã sản phẩm không tồn tại!", "Lỗi", JOptionPane.ERROR_MESSAGE);
            return;
        }
        int soLuong;
        try {
            soLuong = Integer.parseInt(jTextField8.getText().trim());
            if (soLuong <= 0) throw new Exception();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Số lượng xuất không hợp lệ!", "Lỗi", JOptionPane.ERROR_MESSAGE);
            return;
        }
        if (p.getQuantity() == null || p.getQuantity() < soLuong) {
            JOptionPane.showMessageDialog(this, "Tồn kho không đủ để xuất!", "Lỗi", JOptionPane.ERROR_MESSAGE);
            return;
        }
        InventoryTransaction it = new InventoryTransaction();
        it.setProductId(productId);
        it.setTransactionType("Adjustment");
        it.setQuantityChange(-soLuong);
        it.setReferenceId(null);
        it.setNotes(jTextArea1.getText());
        it.setUserId(poly.util.CurrentUserUtil.getCurrentUserId());
        boolean ok = addInventoryTransaction(it);
        if (ok) {
            JOptionPane.showMessageDialog(this, "Xuất kho thành công!");
            fillToTable(getCurrentInventory());
            fillHistoryTable(getInventoryHistory(null, null, null, null, null));
        } else {
            JOptionPane.showMessageDialog(this, "Lỗi xuất kho!", "Lỗi", JOptionPane.ERROR_MESSAGE);
        }
    }

    // Sự kiện Nhập lại (reset form)
    private void nhaplai() {
        jTextField6.setText("");
        jTextField7.setText("");
        jTextField8.setText("");
        jTextArea1.setText("");
    }

    // Hàm fillToTable để đổ dữ liệu lên jTable1
    private void fillToTable(List<Product> products) {
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        model.setRowCount(0);
        for (Product p : products) {
            String categoryName = "";
            for (Category c : categoryList) {
                if (c.getCategoryId().equals(p.getCategoryId())) {
                    categoryName = c.getCategoryName();
                    break;
                }
            }
            model.addRow(new Object[]{
                p.getProductName(),
                p.getProductId(),
                categoryName,
                p.getQuantity()
            });
        }
    }

    // Sửa fillHistoryTable để lấy username từ DB (nếu có)
    private void fillHistoryTable(List<InventoryTransaction> list) {
        DefaultTableModel model = (DefaultTableModel) jTable2.getModel();
        model.setRowCount(0);
        for (InventoryTransaction it : list) {
            String productId = it.getProductId();
            Product p = getProductById(productId);
            String categoryName = "";
            if (p != null) {
                for (Category c : categoryList) {
                    if (c.getCategoryId().equals(p.getCategoryId())) {
                        categoryName = c.getCategoryName();
                        break;
                    }
                }
            }
            // Username: lấy từ DB nếu có, nếu không thì để rỗng
            String username = "";
            try {
                // Lấy username từ DB nếu có (InventoryDAOImpl đã JOIN Users và có thể set vào notes hoặc mở rộng entity)
                // Nếu cần, có thể mở rộng InventoryTransaction để có trường username
                // Ở đây tạm thời để rỗng hoặc lấy từ CurrentUserUtil nếu userId trùng
                if (it.getUserId() != null && it.getUserId().equals(poly.util.CurrentUserUtil.getCurrentUserId())) {
                    username = poly.util.CurrentUserUtil.getCurrentUsername();
                }
            } catch (Exception e) {}
            // Ghi chú: nếu là xuất kho theo hóa đơn
            String note = it.getNotes();
            if ("SaleOut".equals(it.getTransactionType()) && it.getReferenceId() != null && !it.getReferenceId().isEmpty()) {
                note = "Xuất kho cho hóa đơn: " + it.getReferenceId();
            }
            model.addRow(new Object[]{
                it.getTransactionId(),
                getTransactionTypeVN(it.getTransactionType()),
                p != null ? p.getProductName() : productId,
                productId,
                categoryName,
                username,
                it.getTransactionDate(),
                note
            });
        }
    }

    // Hàm chuyển loại giao dịch sang tiếng Việt
    private String getTransactionTypeVN(String type) {
        switch (type) {
            case "PurchaseIn": return "Nhập kho";
            case "SaleOut": return "Xuất kho";
            case "Adjustment": return "Xuất kho khác";
            default: return type;
        }
    }

    // Trong constructor, sau initComponents():
    // setupProductIdFieldListener();

    // Hàm xử lý khi chọn loại giao dịch
    private void onTransactionTypeSelected() {
        int idx = jComboBox1.getSelectedIndex();
        int catIdx = jComboBox3.getSelectedIndex();
        String categoryId = null;
        if (catIdx > 0) {
            categoryId = categoryList.get(catIdx - 1).getCategoryId();
        }
        List<InventoryTransaction> all = getInventoryHistory(null, categoryId, null, null, null);
        List<InventoryTransaction> filtered = new ArrayList<>();
        switch (idx) {
            case 0: // Tất cả
                filtered = all;
                break;
            case 1: // Nhập kho
                for (InventoryTransaction it : all) {
                    if ("PurchaseIn".equals(it.getTransactionType())) filtered.add(it);
                }
                break;
            case 2: // Xuất kho toàn bộ (SaleOut + Adjustment)
                for (InventoryTransaction it : all) {
                    if ("SaleOut".equals(it.getTransactionType()) || "Adjustment".equals(it.getTransactionType())) filtered.add(it);
                }
                break;
            case 3: // Xuất kho theo hóa đơn (SaleOut có ReferenceID)
                for (InventoryTransaction it : all) {
                    if ("SaleOut".equals(it.getTransactionType()) && it.getReferenceId() != null && !it.getReferenceId().isEmpty()) filtered.add(it);
                }
                break;
            case 4: // Xuất kho khác (Adjustment)
                for (InventoryTransaction it : all) {
                    if ("Adjustment".equals(it.getTransactionType())) filtered.add(it);
                }
                break;
            default:
                filtered = all;
        }
        fillHistoryTable(filtered);
    }
}


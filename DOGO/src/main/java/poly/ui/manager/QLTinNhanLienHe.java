package poly.ui.manager;

import poly.dao.ContactMessageDAO;
import poly.dao.impl.ContactMessageDAOImpl;
import poly.entity.ContactMessage;
import poly.util.XDialog;
import javax.swing.table.DefaultTableModel;
import java.util.List;
import java.time.format.DateTimeFormatter;

/**
 * Màn hình quản lý tin nhắn liên hệ cho admin
 * @author Nghia
 */
public class QLTinNhanLienHe extends javax.swing.JDialog {

    private ContactMessageDAO contactMessageDAO;
    private List<ContactMessage> messageList;
    private int currentRow = -1;
    private DateTimeFormatter dateFormatter = DateTimeFormatter.ofPattern("dd/MM/yyyy HH:mm");

    /**
     * Creates new form QLTinNhanLienHe
     */
    public QLTinNhanLienHe(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        initData();
        addListeners();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jPanel2 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jPanel3 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jTextField2 = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jTextField3 = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jTextField4 = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jTextField5 = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jTextField6 = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jLabel9 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTextArea2 = new javax.swing.JTextArea();
        jButton5 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Quản Lý Tin Nhắn Liên Hệ");

        jPanel1.setLayout(new java.awt.BorderLayout());

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel1.setText("QUẢN LÝ TIN NHẮN LIÊN HỆ");
        jPanel1.add(jLabel1, java.awt.BorderLayout.CENTER);

        getContentPane().add(jPanel1, java.awt.BorderLayout.NORTH);
        getContentPane().add(jSeparator1, java.awt.BorderLayout.NORTH);

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Tìm kiếm"));

        jLabel2.setText("Từ khóa:");
        jPanel2.add(jLabel2);

        jTextField1.setPreferredSize(new java.awt.Dimension(200, 23));
        jPanel2.add(jTextField1);

        jButton1.setText("Tìm kiếm");
        jPanel2.add(jButton1);

        jButton2.setText("Làm mới");
        jPanel2.add(jButton2);

        jButton3.setText("Chưa đọc");
        jPanel2.add(jButton3);

        jButton4.setText("Đã đọc");
        jPanel2.add(jButton4);

        getContentPane().add(jPanel2, java.awt.BorderLayout.NORTH);

        jScrollPane1.setViewportView(jTable1);

        getContentPane().add(jScrollPane1, java.awt.BorderLayout.CENTER);

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Chi tiết tin nhắn"));
        jPanel3.setLayout(new java.awt.GridBagLayout());

        jLabel3.setText("Khách hàng:");
        jPanel3.add(jLabel3);

        jTextField2.setEditable(false);
        jTextField2.setPreferredSize(new java.awt.Dimension(150, 23));
        jPanel3.add(jTextField2);

        jLabel4.setText("Email:");
        jPanel3.add(jLabel4);

        jTextField3.setEditable(false);
        jTextField3.setPreferredSize(new java.awt.Dimension(200, 23));
        jPanel3.add(jTextField3);

        jLabel5.setText("Điện thoại:");
        jPanel3.add(jLabel5);

        jTextField4.setEditable(false);
        jTextField4.setPreferredSize(new java.awt.Dimension(120, 23));
        jPanel3.add(jTextField4);

        jLabel6.setText("Chủ đề:");
        jPanel3.add(jLabel6);

        jTextField5.setEditable(false);
        jTextField5.setPreferredSize(new java.awt.Dimension(300, 23));
        jPanel3.add(jTextField5);

        jLabel7.setText("Ngày gửi:");
        jPanel3.add(jLabel7);

        jTextField6.setEditable(false);
        jTextField6.setPreferredSize(new java.awt.Dimension(150, 23));
        jPanel3.add(jTextField6);

        jLabel8.setText("Nội dung:");
        jPanel3.add(jLabel8);

        jTextArea1.setEditable(false);
        jTextArea1.setLineWrap(true);
        jTextArea1.setPreferredSize(new java.awt.Dimension(400, 100));
        jTextArea1.setWrapStyleWord(true);
        jScrollPane2.setViewportView(jTextArea1);

        jPanel3.add(jScrollPane2);

        jLabel9.setText("Phản hồi:");
        jPanel3.add(jLabel9);

        jTextArea2.setLineWrap(true);
        jTextArea2.setPreferredSize(new java.awt.Dimension(400, 100));
        jTextArea2.setWrapStyleWord(true);
        jScrollPane3.setViewportView(jTextArea2);

        jPanel3.add(jScrollPane3);

        jButton5.setText("Đánh dấu đã đọc");
        jPanel3.add(jButton5);

        jButton6.setText("Gửi phản hồi");
        jPanel3.add(jButton6);

        getContentPane().add(jPanel3, java.awt.BorderLayout.SOUTH);
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        searchMessages();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        loadAllMessages();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        loadUnreadMessages();
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        loadReadMessages();
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
        displaySelectedMessage();
    }//GEN-LAST:event_jTable1MouseClicked

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        markAsRead();
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        sendResponse();
    }//GEN-LAST:event_jButton6ActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextArea jTextArea2;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JTextField jTextField4;
    private javax.swing.JTextField jTextField5;
    private javax.swing.JTextField jTextField6;
    // End of variables declaration//GEN-END:variables

    /**
     * Khởi tạo dữ liệu
     */
    private void initData() {
        contactMessageDAO = new ContactMessageDAOImpl();
        loadAllMessages();
    }

    /**
     * Thêm các listener
     */
    private void addListeners() {
        // Thêm window listener để load dữ liệu khi mở
        addWindowListener(new java.awt.event.WindowAdapter() {
            @Override
            public void windowOpened(java.awt.event.WindowEvent evt) {
                loadAllMessages();
            }
        });
    }

    /**
     * Load tất cả tin nhắn
     */
    private void loadAllMessages() {
        try {
            messageList = contactMessageDAO.selectAll();
            fillToTable();
        } catch (Exception e) {
            XDialog.alert("Lỗi khi tải dữ liệu: " + e.getMessage());
        }
    }

    /**
     * Load tin nhắn chưa đọc
     */
    private void loadUnreadMessages() {
        try {
            messageList = contactMessageDAO.selectUnreadMessages();
            fillToTable();
        } catch (Exception e) {
            XDialog.alert("Lỗi khi tải tin nhắn chưa đọc: " + e.getMessage());
        }
    }

    /**
     * Load tin nhắn đã đọc
     */
    private void loadReadMessages() {
        try {
            messageList = contactMessageDAO.selectReadMessages();
            fillToTable();
        } catch (Exception e) {
            XDialog.alert("Lỗi khi tải tin nhắn đã đọc: " + e.getMessage());
        }
    }

    /**
     * Tìm kiếm tin nhắn
     */
    private void searchMessages() {
        String keyword = jTextField1.getText().trim();
        if (keyword.isEmpty()) {
            loadAllMessages();
            return;
        }

        try {
            messageList = contactMessageDAO.searchMessages(keyword);
            fillToTable();
        } catch (Exception e) {
            XDialog.alert("Lỗi khi tìm kiếm: " + e.getMessage());
        }
    }

    /**
     * Fill dữ liệu vào bảng
     */
    private void fillToTable() {
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        model.setRowCount(0);

        if (messageList != null) {
            for (ContactMessage message : messageList) {
                model.addRow(new Object[]{
                    message.getMessageId(),
                    message.getCustomerName(),
                    message.getCustomerEmail(),
                    message.getCustomerPhone(),
                    message.getSubject(),
                    message.getSentDate() != null ? message.getSentDate().format(dateFormatter) : "",
                    message.getIsRead() != null && message.getIsRead() ? "Đã đọc" : "Chưa đọc",
                    message.getAdminResponse() != null ? "Đã phản hồi" : "Chưa phản hồi"
                });
            }
        }
    }

    /**
     * Hiển thị tin nhắn được chọn
     */
    private void displaySelectedMessage() {
        int row = jTable1.getSelectedRow();
        if (row >= 0 && row < messageList.size()) {
            currentRow = row;
            ContactMessage message = messageList.get(row);
            
            jTextField2.setText(message.getCustomerName());
            jTextField3.setText(message.getCustomerEmail());
            jTextField4.setText(message.getCustomerPhone());
            jTextField5.setText(message.getSubject());
            jTextField6.setText(message.getSentDate() != null ? message.getSentDate().format(dateFormatter) : "");
            jTextArea1.setText(message.getMessage());
            jTextArea2.setText(message.getAdminResponse() != null ? message.getAdminResponse() : "");
        }
    }

    /**
     * Đánh dấu tin nhắn đã đọc
     */
    private void markAsRead() {
        if (currentRow >= 0 && currentRow < messageList.size()) {
            try {
                ContactMessage message = messageList.get(currentRow);
                contactMessageDAO.markAsRead(message.getMessageId());
                XDialog.alert("Đã đánh dấu tin nhắn đã đọc!");
                loadAllMessages();
            } catch (Exception e) {
                XDialog.alert("Lỗi khi đánh dấu đã đọc: " + e.getMessage());
            }
        } else {
            XDialog.alert("Vui lòng chọn một tin nhắn!");
        }
    }

    /**
     * Gửi phản hồi
     */
    private void sendResponse() {
        if (currentRow >= 0 && currentRow < messageList.size()) {
            String response = jTextArea2.getText().trim();
            if (response.isEmpty()) {
                XDialog.alert("Vui lòng nhập nội dung phản hồi!");
                return;
            }

            try {
                ContactMessage message = messageList.get(currentRow);
                Integer adminUserId = poly.util.CurrentUserUtil.getCurrentUserId();
                contactMessageDAO.respondToMessage(message.getMessageId(), response, adminUserId);
                XDialog.alert("Đã gửi phản hồi thành công!");
                loadAllMessages();
            } catch (Exception e) {
                XDialog.alert("Lỗi khi gửi phản hồi: " + e.getMessage());
            }
        } else {
            XDialog.alert("Vui lòng chọn một tin nhắn!");
        }
    }
}
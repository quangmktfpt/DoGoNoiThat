/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JDialog.java to edit this template
 */
package poly.ui.manager;

import java.math.BigDecimal;
import java.util.List;
import poly.controller.KhachhangController;
import poly.entity.Order;
import poly.entity.User;
import poly.dao.UserDAO;
import poly.dao.CustomerOrderHistoryDAO;
import poly.dao.impl.UserDAOImpl;
import poly.dao.impl.CustomerOrderHistoryDAOImpl;
import poly.util.PasswordUtil;
import poly.util.XDialog;
import poly.util.XDate;
import java.time.LocalDateTime;
import java.util.regex.Pattern;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Duy
 */
public class QLKhachHang extends javax.swing.JDialog implements KhachhangController{

    private UserDAO userDAO = new UserDAOImpl();
    private CustomerOrderHistoryDAO orderHistoryDAO = new CustomerOrderHistoryDAOImpl();
    private List<User> customerList;
    private int currentRow = -1;

    /**
     * Creates new form QLKhachHang
     */
    public QLKhachHang(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        addButtonListeners();
        addWindowListener(new java.awt.event.WindowAdapter() {
            @Override
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });
        // Thêm MouseListener cho jTable2 để mở chi tiết hóa đơn khi double click
        jTable2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                if (evt.getClickCount() == 2) {
                    int row = jTable2.getSelectedRow();
                    if (row != -1) {
                        Object orderIdObj = jTable2.getValueAt(row, 1); // cột 1 là mã đơn hàng
                        if (orderIdObj != null) {
                            int orderId = Integer.parseInt(orderIdObj.toString());
                            poly.ui.manager.HoaDonChiTiet hoadonct = new poly.ui.manager.HoaDonChiTiet(null, true, orderId);
                            hoadonct.setLocationRelativeTo(null);
                            hoadonct.setVisible(true);
                        }
                    }
                }
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jLabel4 = new javax.swing.JLabel();
        jTextField7 = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jTextField8 = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jTextField9 = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        jTextField10 = new javax.swing.JTextField();
        jButton9 = new javax.swing.JButton();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jLabel10 = new javax.swing.JLabel();
        jTextField5 = new javax.swing.JTextField();
        jButton3 = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        jButton5 = new javax.swing.JButton();
        jTextField2 = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jTextField6 = new javax.swing.JTextField();
        jTextField3 = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        jTextField4 = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox<>();
        jLabel24 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jButton11 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel1.setText("Quản lí khách hàng");

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Mã", "Tên đăng nhập", "Full Name", "Số điện thoại", "Email", "Địa chỉ", "Trạng Thái ", "Ngày Tạo"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel2.setText("Lịch sử mua hàng");

        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "STT", "Mã đơn hàng", "Ngày đặt đơn", "Tổng Tiền", "Trạng Thái"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(jTable2);
        if (jTable2.getColumnModel().getColumnCount() > 0) {
            jTable2.getColumnModel().getColumn(1).setResizable(false);
        }

        jLabel4.setText("Tên khách hàng :");

        jLabel7.setText("Số Điện Thoại :");

        jLabel5.setText("UserName :");

        jLabel12.setText("Email :");

        jButton9.setText("Tìm");
        jButton9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton9ActionPerformed(evt);
            }
        });

        jLabel14.setFont(new java.awt.Font("Segoe UI", 3, 18)); // NOI18N
        jLabel14.setText("Tổng Giá Trị Đơn Hàng");

        jLabel15.setFont(new java.awt.Font("Segoe UI", 3, 18)); // NOI18N
        jLabel15.setText("0");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 936, Short.MAX_VALUE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jLabel2))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(jLabel5)
                                        .addGap(59, 59, 59)
                                        .addComponent(jTextField9, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(jLabel4)
                                        .addGap(32, 32, 32)
                                        .addComponent(jTextField7, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(54, 54, 54)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(jLabel7)
                                        .addGap(45, 45, 45)
                                        .addComponent(jTextField8, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(81, 81, 81)
                                        .addComponent(jTextField10, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(71, 71, 71)
                                .addComponent(jButton9, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 245, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel15, javax.swing.GroupLayout.PREFERRED_SIZE, 198, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(214, 214, 214))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(14, 14, 14)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(jTextField7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel7)
                            .addComponent(jTextField8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(29, 29, 29)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(jTextField9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel12)
                            .addComponent(jTextField10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(26, 26, 26)
                        .addComponent(jButton9, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(35, 35, 35)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 225, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(43, 43, 43)
                .addComponent(jLabel2)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 247, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 59, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel14)
                    .addComponent(jLabel15))
                .addGap(15, 15, 15))
        );

        jTabbedPane1.addTab("Thông tin", jPanel1);

        jLabel10.setText("Địa chỉ");

        jButton3.setText("Cập nhật");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jLabel6.setText("Mã khách:");

        jButton5.setText("Nhập mới");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jLabel11.setText("Số điện thoại:");

        jLabel8.setText("Email:");

        jLabel9.setText("Tên khách");

        jButton1.setText("Đặt Lại Mật Khẩu");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel3.setText("Trạng Thái");

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Hoạt Động", "Không Hoạt Động" }));

        jLabel24.setText("Username");

        jButton11.setText("Thêm");
        jButton11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton11ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(222, 222, 222)
                .addComponent(jButton11)
                .addGap(38, 38, 38)
                .addComponent(jButton3)
                .addGap(34, 34, 34)
                .addComponent(jButton5)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(jLabel6)
                                .addComponent(jLabel9))
                            .addComponent(jLabel8))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jTextField4, javax.swing.GroupLayout.DEFAULT_SIZE, 318, Short.MAX_VALUE)
                            .addComponent(jTextField2)
                            .addComponent(jTextField3))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jLabel10)
                                .addGap(42, 42, 42)
                                .addComponent(jTextField5, javax.swing.GroupLayout.PREFERRED_SIZE, 216, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jLabel11)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTextField6)))
                        .addGap(225, 225, 225))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel24, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jTextField1)
                                .addGap(51, 51, 51)
                                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(339, 339, 339))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(11, 11, 11)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel10)
                    .addComponent(jTextField5, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(19, 19, 19)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel11)
                    .addComponent(jTextField6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(17, 17, 17)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel24)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1))
                .addGap(19, 19, 19)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(13, 13, 13)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton3)
                    .addComponent(jButton5)
                    .addComponent(jButton11))
                .addContainerGap(537, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Chỉnh sửa", jPanel2);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(353, 353, 353)
                .addComponent(jLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jTabbedPane1)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
this.open();        // TODO add your handling code here:
    }//GEN-LAST:event_formWindowOpened

    private void jButton11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton11ActionPerformed
create() ;       // TODO add your handling code here:
    }//GEN-LAST:event_jButton11ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
 update();        // TODO add your handling code here:
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
clear();        // TODO add your handling code here:
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // Đặt lại mật khẩu
        if (currentRow >= 0 && currentRow < customerList.size()) {
            User selectedCustomer = customerList.get(currentRow);
            
            // Hiện JOptionPane để nhập mật khẩu mới
            String newPassword = javax.swing.JOptionPane.showInputDialog(
                this, 
                "Nhập mật khẩu mới cho khách hàng '" + selectedCustomer.getFullName() + "':",
                "Đặt lại mật khẩu",
                javax.swing.JOptionPane.QUESTION_MESSAGE
            );
            
            if (newPassword == null) {
                return; // User bấm Cancel
            }
            
            if (newPassword.trim().isEmpty()) {
                XDialog.alert("Mật khẩu không được để trống!");
                return;
            }
            
            if (newPassword.trim().length() < 6) {
                XDialog.alert("Mật khẩu phải có ít nhất 6 ký tự!");
                return;
            }
            
            try {
                resetCustomerPassword(selectedCustomer.getUserId(), newPassword.trim());
                XDialog.alert("Đặt lại mật khẩu thành công!");
            } catch (Exception e) {
                XDialog.alert("Lỗi khi đặt lại mật khẩu: " + e.getMessage());
            }
        } else {
            XDialog.alert("Vui lòng chọn một khách hàng để đặt lại mật khẩu!");
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
        bang(evt);        // TODO add your handling code here:
    }//GEN-LAST:event_jTable1MouseClicked





    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(QLKhachHang.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(QLKhachHang.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(QLKhachHang.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(QLKhachHang.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                QLKhachHang dialog = new QLKhachHang(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton11;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton9;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable2;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField10;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JTextField jTextField4;
    private javax.swing.JTextField jTextField5;
    private javax.swing.JTextField jTextField6;
    private javax.swing.JTextField jTextField7;
    private javax.swing.JTextField jTextField8;
    private javax.swing.JTextField jTextField9;
    // End of variables declaration//GEN-END:variables

    @Override
    public List<User> loadCustomers() {
        // Chỉ load khách hàng (role = 0), không load admin (role = 1)
        List<User> allUsers = userDAO.selectAll();
        customerList = allUsers.stream()
                .filter(user -> user.getRole() != null && !user.getRole()) // role = false (0) = customer
                .collect(java.util.stream.Collectors.toList());
        return customerList;
    }

    @Override
    public List<User> loadActiveCustomers() {
        // Chỉ load khách hàng đang hoạt động (role = 0 và isActive = true)
        List<User> allUsers = userDAO.selectAll();
        return allUsers.stream()
                .filter(user -> user.getRole() != null && !user.getRole() && // role = false (0) = customer
                               user.getIsActive() != null && user.getIsActive()) // isActive = true
                .collect(java.util.stream.Collectors.toList());
    }

    @Override
    public List<User> searchCustomers(String keyword) {
        if (keyword == null || keyword.trim().isEmpty()) {
            return loadCustomers();
        }
        // Chỉ tìm kiếm trong khách hàng (role = 0)
        List<User> allUsers = userDAO.selectAll();
        return allUsers.stream()
                .filter(user -> user.getRole() != null && !user.getRole()) // Chỉ khách hàng
                .filter(user -> (user.getFullName() != null && user.getFullName().toLowerCase().contains(keyword.toLowerCase())) ||
                               (user.getEmail() != null && user.getEmail().toLowerCase().contains(keyword.toLowerCase())) ||
                               (user.getPhone() != null && user.getPhone().toLowerCase().contains(keyword.toLowerCase())))
                .collect(java.util.stream.Collectors.toList());
    }
    
    /**
     * Tìm kiếm khách hàng theo nhiều tiêu chí
     */
    private List<User> searchCustomersAdvanced(String tenKhachHang, String soDienThoai, String username, String email) {
        List<User> allUsers = userDAO.selectAll();
        
        return allUsers.stream()
                .filter(user -> user.getRole() != null && !user.getRole()) // Chỉ khách hàng (role = 0)
                .filter(user -> {
                    boolean match = true;
                    
                    // Tìm theo tên khách hàng
                    if (!tenKhachHang.isEmpty()) {
                        match = match && (user.getFullName() != null && 
                                user.getFullName().toLowerCase().contains(tenKhachHang.toLowerCase()));
                    }
                    
                    // Tìm theo số điện thoại
                    if (!soDienThoai.isEmpty()) {
                        match = match && (user.getPhone() != null && 
                                user.getPhone().contains(soDienThoai));
                    }
                    
                    // Tìm theo username
                    if (!username.isEmpty()) {
                        match = match && (user.getUsername() != null && 
                                user.getUsername().toLowerCase().contains(username.toLowerCase()));
                    }
                    
                    // Tìm theo email
                    if (!email.isEmpty()) {
                        match = match && (user.getEmail() != null && 
                                user.getEmail().toLowerCase().contains(email.toLowerCase()));
                    }
                    
                    return match;
                })
                .collect(java.util.stream.Collectors.toList());
    }

    @Override
    public boolean checkUsernameExists(String username) {
        List<User> allUsers = userDAO.selectAll();
        return allUsers.stream()
                .filter(user -> user.getRole() != null && !user.getRole()) // Chỉ kiểm tra trong khách hàng
                .anyMatch(user -> user.getUsername() != null && user.getUsername().equals(username));
    }

    @Override
    public boolean checkEmailExists(String email) {
        if (email == null) return false;
        String target = email.trim().toLowerCase();
        List<User> allUsers = userDAO.selectAll();
        return allUsers.stream()
                .anyMatch(user -> {
                    String e = user.getEmail();
                    return e != null && e.trim().toLowerCase().equals(target);
                });
    }

    @Override
    public void updateCustomerStatus(Integer userId, Boolean isActive) {
        try {
            User user = userDAO.selectById(userId);
            if (user != null) {
                user.setIsActive(isActive);
                userDAO.update(user);
                loadCustomers();
                fillToTable();
            }
        } catch (Exception e) {
            XDialog.alert("Lỗi khi cập nhật trạng thái: " + e.getMessage());
        }
    }

    @Override
    public void resetCustomerPassword(Integer userId, String newPassword) {
        try {
            // Lưu mật khẩu dạng plain text theo yêu cầu
            boolean success = userDAO.updatePassword(userId, newPassword);
            if (!success) {
                XDialog.alert("Không thể cập nhật mật khẩu! Vui lòng thử lại.");
            }
        } catch (Exception e) {
            XDialog.alert("Lỗi khi đặt lại mật khẩu: " + e.getMessage());
        }
    }
    
    /**
     * Kích hoạt lại tài khoản bị vô hiệu hóa
     */
    public void reactivateCustomerAccount(Integer userId) {
        try {
            User user = userDAO.selectById(userId);
            if (user == null) {
                XDialog.alert("Không tìm thấy khách hàng!");
                return;
            }
            
            if (user.getIsActive() != null && user.getIsActive()) {
                XDialog.alert("Tài khoản này đã đang hoạt động!");
                return;
            }
            
            // Cập nhật trạng thái IsActive = 1 (kích hoạt)
            user.setIsActive(true);
            userDAO.update(user);
            
            XDialog.alert("✅ Đã kích hoạt lại tài khoản '" + user.getUsername() + "' thành công!");
            
            // Refresh danh sách
            loadCustomers();
            fillToTable();
            
        } catch (Exception e) {
            XDialog.alert("❌ Lỗi khi kích hoạt lại tài khoản: " + e.getMessage());
        }
    }

    @Override
    public List<Order> getCustomerOrderHistory(Integer userId) {
        return orderHistoryDAO.getCustomerOrderHistory(userId);
    }

    @Override
    public BigDecimal getCustomerTotalOrderValue(Integer userId) {
        return orderHistoryDAO.getCustomerTotalOrderValue(userId);
    }

    @Override
    public int getCustomerOrderCount(Integer userId) {
        return orderHistoryDAO.getCustomerOrderCount(userId);
    }

    @Override
    public int getCustomerCountByStatus(Boolean isActive) {
        List<User> allUsers = userDAO.selectAll();
        return (int) allUsers.stream()
                .filter(user -> user.getRole() != null && !user.getRole()) // Chỉ khách hàng
                .filter(user -> user.getIsActive() != null && user.getIsActive().equals(isActive))
                .count();
    }

    @Override
    public String validateCustomerInfo(User user) {
        StringBuilder errorMessage = new StringBuilder();
        boolean hasError = false;
        
        // Kiểm tra Username
        if (user.getUsername() == null || user.getUsername().trim().isEmpty()) {
            errorMessage.append("❌ Tên đăng nhập không được để trống!\n");
            hasError = true;
        } else if (user.getUsername().length() < 3) {
            errorMessage.append("❌ Tên đăng nhập phải có ít nhất 3 ký tự!\n");
            hasError = true;
        } else if (!user.getUsername().matches("^[a-zA-Z0-9_]+$")) {
            errorMessage.append("❌ Tên đăng nhập chỉ được chứa chữ cái, số và dấu gạch dưới!\n");
            hasError = true;
        }
        
        // Kiểm tra Email
        if (user.getEmail() == null || user.getEmail().trim().isEmpty()) {
            errorMessage.append("❌ Email không được để trống!\n");
            hasError = true;
        } else {
            // Validate email format
            String emailPattern = "^[A-Za-z0-9+_.-]+@(.+)$";
            if (!Pattern.matches(emailPattern, user.getEmail())) {
                errorMessage.append("❌ Email không đúng định dạng!\n");
                hasError = true;
            }
        }
        
        // Kiểm tra mật khẩu (chỉ khi tạo mới)
        if (user.getPasswordHash() != null && !user.getPasswordHash().trim().isEmpty()) {
            if (user.getPasswordHash().length() < 6) {
                errorMessage.append("❌ Mật khẩu phải có ít nhất 6 ký tự!\n");
                hasError = true;
            }
        }
        
        // Kiểm tra họ tên
        if (user.getFullName() == null || user.getFullName().trim().isEmpty()) {
            errorMessage.append("❌ Họ tên không được để trống!\n");
            hasError = true;
        } else if (user.getFullName().trim().length() < 2) {
            errorMessage.append("❌ Họ tên phải có ít nhất 2 ký tự!\n");
            hasError = true;
        }
        
        // Kiểm tra số điện thoại (nếu có nhập)
        if (user.getPhone() != null && !user.getPhone().trim().isEmpty()) {
            // Validate phone format (Vietnamese phone number)
            String phonePattern = "^(0|\\+84)(\\s|\\.)?((3[2-9])|(5[689])|(7[06-9])|(8[1-689])|(9[0-46-9]))(\\d)(\\s|\\.)?(\\d{3})(\\s|\\.)?(\\d{3})$";
            if (!Pattern.matches(phonePattern, user.getPhone())) {
                errorMessage.append("❌ Số điện thoại không đúng định dạng!\n");
                hasError = true;
            }
        }
        
        if (hasError) {
            errorMessage.insert(0, "📋 Vui lòng kiểm tra và sửa các lỗi sau:\n\n");
            return errorMessage.toString();
        }
        
        return null; // No validation errors
    }

    @Override
    public String hashPassword(String password) {
        return PasswordUtil.hashPassword(password);
    }

    @Override
    public void open() {
        loadCustomers();
        fillToTable();
        addRequiredFieldIndicators();
    }
    
    /**
     * Thêm dấu * cho các trường bắt buộc
     */
    private void addRequiredFieldIndicators() {
        // Tìm các label và thêm dấu * cho trường bắt buộc
        // Các trường bắt buộc: Username, Email, FullName
        // Lưu ý: Cần tìm đúng tên label trong form
        try {
            // Tìm label cho Username
            javax.swing.JLabel usernameLabel = findLabelByText("Tên Đăng Nhập");
            if (usernameLabel != null) {
                usernameLabel.setText("Tên Đăng Nhập: *");
                usernameLabel.setForeground(new java.awt.Color(51, 51, 51));
            }
            
            // Tìm label cho Email
            javax.swing.JLabel emailLabel = findLabelByText("Email");
            if (emailLabel != null) {
                emailLabel.setText("Email: *");
                emailLabel.setForeground(new java.awt.Color(51, 51, 51));
            }
            
            // Tìm label cho FullName
            javax.swing.JLabel fullNameLabel = findLabelByText("Họ Tên");
            if (fullNameLabel != null) {
                fullNameLabel.setText("Họ Tên: *");
                fullNameLabel.setForeground(new java.awt.Color(51, 51, 51));
            }
            
            // Thêm tooltip cho các trường bắt buộc
            jTextField1.setToolTipText("Nhập tên đăng nhập (ít nhất 3 ký tự)");
            jTextField3.setToolTipText("Nhập email hợp lệ");
            jTextField4.setToolTipText("Nhập họ tên đầy đủ");
            
        } catch (Exception e) {
            System.err.println("Lỗi khi thêm dấu * cho các trường bắt buộc: " + e.getMessage());
        }
    }
    
    /**
     * Tìm label theo text
     */
    private javax.swing.JLabel findLabelByText(String text) {
        for (java.awt.Component comp : this.getContentPane().getComponents()) {
            if (comp instanceof javax.swing.JLabel) {
                javax.swing.JLabel label = (javax.swing.JLabel) comp;
                if (text.equals(label.getText())) {
                    return label;
                }
            }
        }
        return null;
    }
    

    
    private void bang(java.awt.event.MouseEvent evt) {
        int row = jTable1.getSelectedRow();
        if (row >= 0 && customerList != null && row < customerList.size()) {
            currentRow = row;
            User selectedUser = customerList.get(row);
            
            if (evt.getClickCount() == 1) {
                // Click đơn: Hiển thị hóa đơn mua hàng
                loadCustomerOrderHistory(selectedUser.getUserId());
                loadCustomerTotalOrderValue(selectedUser.getUserId());
            } else if (evt.getClickCount() == 2) {
                // Click đúp: Chuyển sang tab chỉnh sửa
                setForm(selectedUser);
                jTabbedPane1.setSelectedIndex(1); // Chuyển sang tab "Chỉnh sửa"
            }
        }
    }
    
    private void loadCustomerOrderHistory(Integer userId) {
        DefaultTableModel model = (DefaultTableModel) jTable2.getModel();
        model.setRowCount(0);
        
        List<Order> orderHistory = getCustomerOrderHistory(userId);
        if (orderHistory != null && !orderHistory.isEmpty()) {
            int stt = 1;
            for (Order order : orderHistory) {
                model.addRow(new Object[]{
                    stt++,
                    order.getOrderId(),
                    order.getOrderDate() != null ? order.getOrderDate().toString() : "",
                    order.getTotalAmount(),
                    order.getOrderStatus()
                });
            }
        }
    }
    
    private void loadCustomerTotalOrderValue(Integer userId) {
        BigDecimal totalValue = getCustomerTotalOrderValue(userId);
        jLabel15.setText(totalValue.toString());
    }

    @Override
    public void setForm(User entity) {
        if (entity != null) {
            jTextField2.setText(entity.getUserId() != null ? entity.getUserId().toString() : "");
            jTextField4.setText(entity.getFullName() != null ? entity.getFullName() : "");
            jTextField1.setText(entity.getUsername() != null ? entity.getUsername() : "");
            jTextField3.setText(entity.getEmail() != null ? entity.getEmail() : "");
            jTextField6.setText(entity.getPhone() != null ? entity.getPhone() : "");
            jTextField5.setText(entity.getAddress() != null ? entity.getAddress() : "");
            jComboBox1.setSelectedItem(entity.getIsActive() != null && entity.getIsActive() ? "Hoạt Động" : "Không Hoạt Động");
        }
    }

    @Override
    public User getForm() {
        User user = new User();
        try {
            // Lấy dữ liệu từ form
            String userIdText = jTextField2.getText().trim();
            if (!userIdText.isEmpty()) {
                user.setUserId(Integer.parseInt(userIdText));
            }
            
            user.setFullName(jTextField4.getText().trim());
            user.setUsername(jTextField1.getText().trim());
            user.setEmail(jTextField3.getText().trim());
            user.setPhone(jTextField6.getText().trim());
            user.setAddress(jTextField5.getText().trim());
            // Không set mật khẩu khi update
            
            // Xử lý trạng thái
            String status = (String) jComboBox1.getSelectedItem();
            user.setIsActive("Hoạt Động".equals(status));
            
            user.setRole(false); // Khách hàng
        } catch (Exception e) {
            XDialog.alert("Lỗi khi lấy dữ liệu form: " + e.getMessage());
            return null;
        }
        return user;
    }

    @Override
    public void fillToTable() {
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        model.setRowCount(0);
        
        if (customerList != null) {
            for (User user : customerList) {
                model.addRow(new Object[]{
                    user.getUserId(),
                    user.getUsername(),
                    user.getFullName(),
                    user.getPhone(),
                    user.getEmail(),
                    user.getAddress(),
                    user.getIsActive() != null && user.getIsActive() ? "Hoạt động" : "Vô hiệu",
                    user.getCreatedDate() != null ? user.getCreatedDate().toString() : ""
                });
            }
        }
    }

    @Override
    public void edit() {
        if (currentRow >= 0 && currentRow < customerList.size()) {
            User selectedCustomer = customerList.get(currentRow);
            setForm(selectedCustomer);
            setEditable(false);
        } else {
            XDialog.alert("Vui lòng chọn một khách hàng để chỉnh sửa!");
        }
    }

    @Override
    public void create() {
        User user = getForm();
        if (user == null) {
            XDialog.alert("Vui lòng nhập đầy đủ thông tin khách hàng!");
            return;
        }
        
        String validationError = validateCustomerInfo(user);
        if (validationError != null) {
            XDialog.alert(validationError);
            return;
        }
        
        // Kiểm tra username và email trùng lặp
        if (checkUsernameExists(user.getUsername())) {
            XDialog.alert("Username đã tồn tại! Vui lòng sử dụng username khác.");
            return;
        }
        
        if (checkEmailExists(user.getEmail())) {
            XDialog.alert("Email đã tồn tại! Vui lòng sử dụng email khác.");
            return;
        }
        
        try {
            // Set các giá trị mặc định cho khách hàng mới
            user.setRole(false); // 0 = Customer
            user.setIsActive(true);
            user.setCreatedDate(LocalDateTime.now());
            user.setPasswordHash(hashPassword(user.getPasswordHash()));
            
            userDAO.insert(user);
            loadCustomers();
            fillToTable();
            clear();
        } catch (Exception e) {
            XDialog.alert("Lỗi khi thêm khách hàng: " + e.getMessage());
        }
    }

    @Override
    public void update() {
        User user = getForm();
        if (user == null || user.getUserId() == null) {
            XDialog.alert("Vui lòng chọn khách hàng cần cập nhật!");
            return;
        }
        
        // Validate thông tin cơ bản (không bao gồm mật khẩu)
        if (user.getUsername() == null || user.getUsername().trim().isEmpty()) {
            XDialog.alert("Username không được để trống!");
            return;
        }
        
        if (user.getFullName() == null || user.getFullName().trim().isEmpty()) {
            XDialog.alert("Họ tên không được để trống!");
            return;
        }
        
        if (user.getEmail() == null || user.getEmail().trim().isEmpty()) {
            XDialog.alert("Email không được để trống!");
            return;
        }
        
        try {
            // Lấy thông tin user hiện tại từ database
            User existingUser = userDAO.selectById(user.getUserId());
            if (existingUser == null) {
                XDialog.alert("Không tìm thấy khách hàng!");
                return;
            }
            
            // Chỉ kiểm tra email trùng lặp khi email thay đổi
            String existingEmail = existingUser.getEmail() != null ? existingUser.getEmail().trim().toLowerCase() : "";
            String newEmail = user.getEmail() != null ? user.getEmail().trim().toLowerCase() : "";
            if (!existingEmail.equals(newEmail) && checkEmailExists(newEmail)) {
                XDialog.alert("Email đã tồn tại! Vui lòng sử dụng email khác.");
                return;
            }

            // Không cho phép đổi username tại màn này để tránh xung đột
            user.setUsername(existingUser.getUsername());
            
            // Không cần set mật khẩu khi update thông tin
            
            userDAO.update(user);
            loadCustomers();
            fillToTable();
            XDialog.alert("Cập nhật thông tin khách hàng thành công!");
        } catch (Exception e) {
            XDialog.alert("Lỗi khi cập nhật khách hàng: " + e.getMessage());
        }
    }

    @Override
    public void delete() {
        if (currentRow >= 0 && currentRow < customerList.size()) {
            User selectedCustomer = customerList.get(currentRow);
            
            if (XDialog.confirm("Bạn có chắc chắn muốn xóa khách hàng '" + selectedCustomer.getFullName() + "'?")) {
                try {
                    userDAO.delete(selectedCustomer.getUserId());
                    loadCustomers();
                    fillToTable();
                    clear();
                } catch (Exception e) {
                    XDialog.alert("Lỗi khi xóa khách hàng: " + e.getMessage());
                }
            }
        } else {
            XDialog.alert("Vui lòng chọn một khách hàng để xóa!");
        }
    }

    @Override
    public void clear() {
        // Xóa trắng form
        jTextField2.setText("");
        jTextField4.setText("");
        jTextField1.setText("");
        jTextField3.setText("");
        jTextField6.setText("");
        jTextField5.setText("");
        jComboBox1.setSelectedItem("Hoạt Động");
        setEditable(true);
        currentRow = -1;
    }

    @Override
    public void setEditable(boolean editable) {
        // Set trạng thái editable cho các component
        jTextField2.setEnabled(editable);
        jTextField4.setEnabled(editable);
        jTextField1.setEnabled(editable);
        jTextField3.setEnabled(editable);
        jTextField6.setEnabled(editable);
        jTextField5.setEnabled(editable);
        jComboBox1.setEnabled(editable);
    }

    @Override
    public void checkAll() {
//
    }

    @Override
    public void uncheckAll() {
//
    }

    @Override
    public void deleteCheckedItems() {
        throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }

    @Override
    public void moveFirst() {
//
    }

    @Override
    public void movePrevious() {
//
    }

    @Override
    public void moveNext() {
//
    }

    @Override
    public void moveLast() {
//
    }

    @Override
    public void moveTo(int rowIndex) {
        if (rowIndex >= 0 && rowIndex < customerList.size()) {
            currentRow = rowIndex;
            setForm(customerList.get(rowIndex));
        }
    }
    

    

    

    
 
    

    
    private void timkiem(java.awt.event.ActionEvent evt) {
        // Lấy thông tin tìm kiếm từ các trường
        String tenKhachHang = jTextField7.getText().trim();
        String soDienThoai = jTextField8.getText().trim();
        String username = jTextField9.getText().trim();
        String email = jTextField10.getText().trim();
        
        // Kiểm tra xem có ít nhất một trường được nhập không
        if (tenKhachHang.isEmpty() && soDienThoai.isEmpty() && username.isEmpty() && email.isEmpty()) {
            // Nếu không có trường nào được nhập, load tất cả khách hàng
            customerList = loadCustomers();
            fillToTable();
            return;
        }
        
        // Tìm kiếm theo các tiêu chí
        List<User> searchResults = searchCustomersAdvanced(tenKhachHang, soDienThoai, username, email);
        
        if (searchResults.isEmpty()) {
            // Tạo thông báo tùy theo trường hợp
            StringBuilder message = new StringBuilder("Không tìm thấy khách hàng");
            if (!soDienThoai.isEmpty() && !username.isEmpty()) {
                message.append(" có số điện thoại '").append(soDienThoai).append("' và username '").append(username).append("'");
            } else if (!soDienThoai.isEmpty()) {
                message.append(" có số điện thoại '").append(soDienThoai).append("'");
            } else if (!username.isEmpty()) {
                message.append(" có username '").append(username).append("'");
            } else if (!tenKhachHang.isEmpty()) {
                message.append(" có tên '").append(tenKhachHang).append("'");
            } else if (!email.isEmpty()) {
                message.append(" có email '").append(email).append("'");
            }
            message.append("!");
            
            XDialog.alert(message.toString());
            return;
        }
        
        // Hiển thị kết quả tìm kiếm
        customerList = searchResults;
        fillToTable();
    }
    
    private void jButton9ActionPerformed(java.awt.event.ActionEvent evt) {
        timkiem(evt);
    }
    
    // Thêm event listeners cho các nút
    private void addButtonListeners() {
        jButton1.addActionListener(evt -> jButton1ActionPerformed(evt));
      //  jButton2.addActionListener(evt -> jButton2ActionPerformed(evt));
        jButton3.addActionListener(evt -> jButton3ActionPerformed(evt));
       
        jButton5.addActionListener(evt -> jButton5ActionPerformed(evt));
    }
    
    /**
     * Xử lý sự kiện kích hoạt lại tài khoản
     */
    private void reactivateAccountActionPerformed(java.awt.event.ActionEvent evt) {
        if (currentRow >= 0 && currentRow < customerList.size()) {
            User selectedCustomer = customerList.get(currentRow);
            
            // Kiểm tra xem tài khoản có bị vô hiệu hóa không
            if (selectedCustomer.getIsActive() != null && selectedCustomer.getIsActive()) {
                XDialog.alert("Tài khoản '" + selectedCustomer.getUsername() + "' đã đang hoạt động!");
                return;
            }
            
            // Xác nhận kích hoạt lại
            int confirm = javax.swing.JOptionPane.showConfirmDialog(
                this,
                "Bạn có chắc chắn muốn kích hoạt lại tài khoản '" + selectedCustomer.getUsername() + "'?\n\n" +
                "Tài khoản sẽ có thể đăng nhập lại sau khi được kích hoạt.",
                "XÁC NHẬN KÍCH HOẠT LẠI TÀI KHOẢN",
                javax.swing.JOptionPane.YES_NO_OPTION,
                javax.swing.JOptionPane.QUESTION_MESSAGE
            );
            
            if (confirm == javax.swing.JOptionPane.YES_OPTION) {
                reactivateCustomerAccount(selectedCustomer.getUserId());
            }
        } else {
            XDialog.alert("Vui lòng chọn một khách hàng để kích hoạt lại tài khoản!");
        }
    }
}

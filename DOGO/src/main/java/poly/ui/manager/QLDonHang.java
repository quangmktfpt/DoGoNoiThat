/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JDialog.java to edit this template
 */
package poly.ui.manager;

import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.List;
import poly.entity.Order;
import poly.entity.OrderDetail;
import poly.dao.UserDAO;
import poly.dao.impl.UserDAOImpl;
import poly.entity.User;
import poly.entity.Address;
import poly.util.XQuery;
import java.util.ArrayList;
import java.time.LocalDate;
import java.time.LocalTime;
import java.time.format.DateTimeFormatter;

/**
 *
 * @author Duy
 */
public class QLDonHang extends javax.swing.JDialog implements poly.controller.OrderController {
    private poly.dao.OrderDAO orderDAO = new poly.dao.impl.OrderDAOImpl();
    private java.util.List<poly.entity.Order> orderList = new java.util.ArrayList<>();
    private int currentRow = -1;
    private UserDAO userDAO = new UserDAOImpl();
    private javax.swing.JLabel lblTimeRange; // Thêm label hiển thị khoảng thời gian

    /**
     * Creates new form QLDonHang
     */
    public QLDonHang(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        // Thêm MouseListener cho jTable1 để mở chi tiết hóa đơn khi double click
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                if (evt.getClickCount() == 2) {
                    int row = jTable1.getSelectedRow();
                    if (row != -1) {
                        Object orderIdObj = jTable1.getValueAt(row, 0); // cột 0 là mã đơn hàng
                        if (orderIdObj != null) {
                            int orderId = Integer.parseInt(orderIdObj.toString());
                            poly.ui.manager.HoaDonChiTiet hoadonct = new poly.ui.manager.HoaDonChiTiet(null, true, orderId);
                            hoadonct.setLocationRelativeTo(null);
                            hoadonct.setVisible(true);
                        }
                    }
                }
            }
        });
        
        // Thêm các listener cho table
        addTableSelectionListener();
        addTableModelListener();
        
       
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButton8 = new javax.swing.JButton();
        jLabel12 = new javax.swing.JLabel();
        jTextField9 = new javax.swing.JTextField();
        jButton9 = new javax.swing.JButton();
        jLabel13 = new javax.swing.JLabel();
        jButton10 = new javax.swing.JButton();
        jLabel14 = new javax.swing.JLabel();
        jTextField11 = new javax.swing.JTextField();
        jLabel15 = new javax.swing.JLabel();
        jTextField12 = new javax.swing.JTextField();
        jButton11 = new javax.swing.JButton();
        jComboBox2 = new javax.swing.JComboBox<>();
        jComboBox3 = new javax.swing.JComboBox<>();
        jComboBox4 = new javax.swing.JComboBox<>();
        jButton12 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jLabel2.setText("Tìm kiếm Theo Tên Khách Hàng:");

        jButton1.setText("Tìm");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "OrderID", "UserID", "Tên Khách Hàng", "Ngày Đặt Hàng", "Tổng Hóa Đơn", "CouponID", "Phương Thức thanh toán", "Trạng Thái Đơn Hàng", "Địa Chỉ giao hàng", ""
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jTable1);
        if (jTable1.getColumnModel().getColumnCount() > 0) {
            jTable1.getColumnModel().getColumn(1).setResizable(false);
            jTable1.getColumnModel().getColumn(9).setResizable(false);
        }

        jButton8.setText("Bỏ chọn mục");
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });

        jLabel12.setText("Tìm kiếm Theo Mã Hóa Đơn:");

        jButton9.setText("Tìm");
        jButton9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton9ActionPerformed(evt);
            }
        });

        jLabel13.setText("Tìm kiếm Theo Trạng Thái:");

        jButton10.setText("Tìm");
        jButton10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton10ActionPerformed(evt);
            }
        });

        jLabel14.setText("Từ Ngày");

        jLabel15.setText("Đến Ngày");

        jButton11.setText("Tìm");
        jButton11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton11ActionPerformed(evt);
            }
        });

        jComboBox2.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Tất Cả", "Hôm Nay", "Tuần Này", "Tháng Này", "Qúy Này", "Năm Nay" }));

        jComboBox3.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "All", "Pending", "Processing", "Shipped", "Completed", "Delivering", "Cancelled" }));

        jComboBox4.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Pending", "Processing", "Shipped", "Completed", "Delivering", "Cancelled" }));
        jComboBox4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox4ActionPerformed(evt);
            }
        });

        jButton12.setText("Cập nhật trạng thái");
        jButton12.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton12ActionPerformed(evt);
            }
        });

        jLabel1.setText(".");

        jButton2.setText("Xem chi tiết");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(126, 126, 126)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jButton12)
                                .addGap(229, 229, 229)
                                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 578, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jComboBox4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton8)
                        .addGap(216, 216, 216))))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(150, 150, 150)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel12)
                                    .addComponent(jLabel13))
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGap(65, 65, 65)
                                        .addComponent(jComboBox3, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(12, 12, 12)
                                        .addComponent(jButton10))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                        .addGap(40, 40, 40)
                                        .addComponent(jTextField9, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(jButton9))))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton1))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTextField11, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel15, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTextField12, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(47, 47, 47)
                                .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton11))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 776, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(18, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(jButton1))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel12)
                    .addComponent(jTextField9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton9))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel13)
                    .addComponent(jButton10)
                    .addComponent(jComboBox3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(26, 26, 26)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel14)
                    .addComponent(jTextField11, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel15)
                    .addComponent(jTextField12, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton11)
                    .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 306, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton8)
                    .addComponent(jComboBox4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel1)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addComponent(jButton12))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton2)))
                .addContainerGap())
        );

        jTabbedPane1.addTab("Danh mục", jPanel1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 800, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 6, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
this.open();        // TODO add your handling code here:
    }//GEN-LAST:event_formWindowOpened

    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8ActionPerformed
        this. uncheckAll();        // TODO add your handling code here:
    }//GEN-LAST:event_jButton8ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // Tìm kiếm theo tên khách hàng từ bảng Addresses
        String keyword = jTextField1.getText().trim();
        List<Order> result = new ArrayList<>();
        
        if (keyword.isEmpty()) {
            // Nếu không nhập gì, hiển thị tất cả đơn hàng
            result = orderDAO.selectAll();
        } else {
            try {
                // Tìm kiếm theo tên khách hàng trong bảng Addresses
                String sql = "SELECT DISTINCT o.* FROM Orders o " +
                           "INNER JOIN Addresses a ON o.OrderID = a.OrderID " +
                           "WHERE a.CustomerName LIKE ? " +
                           "ORDER BY o.OrderID DESC";
                
                result = poly.util.XQuery.getBeanList(Order.class, sql, "%" + keyword + "%");
                
                // Nếu không tìm thấy theo OrderID, thử tìm theo DeliveryAddressID
                if (result.isEmpty()) {
                    sql = "SELECT DISTINCT o.* FROM Orders o " +
                         "INNER JOIN Addresses a ON o.DeliveryAddressID = a.AddressID " +
                         "WHERE a.CustomerName LIKE ? " +
                         "ORDER BY o.OrderID DESC";
                    
                    result = poly.util.XQuery.getBeanList(Order.class, sql, "%" + keyword + "%");
                }
                
                // Hiển thị thông báo kết quả
                if (result.isEmpty()) {
                    javax.swing.JOptionPane.showMessageDialog(this, 
                        "Không tìm thấy đơn hàng nào với tên khách hàng: '" + keyword + "'", 
                        "Kết quả tìm kiếm", 
                        javax.swing.JOptionPane.INFORMATION_MESSAGE);
                } else {
                    javax.swing.JOptionPane.showMessageDialog(this, 
                        "Tìm thấy " + result.size() + " đơn hàng với tên khách hàng: '" + keyword + "'", 
                        "Kết quả tìm kiếm", 
                        javax.swing.JOptionPane.INFORMATION_MESSAGE);
                }
                
            } catch (Exception e) {
                javax.swing.JOptionPane.showMessageDialog(this, 
                    "Lỗi khi tìm kiếm theo tên khách hàng: " + e.getMessage(), 
                    "Lỗi", 
                    javax.swing.JOptionPane.ERROR_MESSAGE);
                System.err.println("Lỗi tìm kiếm theo tên khách hàng: " + e.getMessage());
                e.printStackTrace();
            }
        }
        
        fillToTableWithList(result);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton12ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton12ActionPerformed
        updateOrderStatusForSelected();        // TODO add your handling code here:
    }//GEN-LAST:event_jButton12ActionPerformed

    private void jComboBox4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox4ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBox4ActionPerformed

    private void jButton10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton10ActionPerformed
       timtheotrangthai();
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton10ActionPerformed

    private void jButton9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton9ActionPerformed
       
        mahoadon();// TODO add your handling code here:
    }//GEN-LAST:event_jButton9ActionPerformed

    private void jButton11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton11ActionPerformed
        timtheothoigian();
// TODO add your handling code here:
    }//GEN-LAST:event_jButton11ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        viewOrderDetails();
    }//GEN-LAST:event_jButton2ActionPerformed

    // === Sự kiện nút trên giao diện ===

    private void mahoadon() { // Tìm theo mã hóa đơn
        String keyword = jTextField9.getText().trim();
        List<Order> result;
        if (keyword.isEmpty()) {
            result = orderDAO.selectAll();
        } else {
            result = new ArrayList<>();
            try {
                int orderId = Integer.parseInt(keyword);
                Order o = orderDAO.selectById(orderId);
                if (o != null) result.add(o);
            } catch (NumberFormatException e) {
                // Nếu nhập không phải số, không tìm thấy
            }
        }
        fillToTableWithList(result);
    }
    
    private void timtheotrangthai() { // Tìm theo trạng thái
        try {
            String status = (String) jComboBox3.getSelectedItem();
            if (status == null || status.trim().isEmpty()) {
                javax.swing.JOptionPane.showMessageDialog(this, 
                    "Vui lòng chọn trạng thái để tìm kiếm!", 
                    "Thông báo", 
                    javax.swing.JOptionPane.INFORMATION_MESSAGE);
                return;
            }
            
            List<Order> result;
            if ("All".equals(status)) {
                result = orderDAO.selectAll();
            } else {
                result = selectByStatus(status);
            }
            
            fillToTableWithList(result);
            
            // Hiển thị thông báo kết quả
            if (result.isEmpty()) {
                javax.swing.JOptionPane.showMessageDialog(this, 
                    "Không tìm thấy đơn hàng nào với trạng thái: " + status, 
                    "Kết quả tìm kiếm", 
                    javax.swing.JOptionPane.INFORMATION_MESSAGE);
            } else {
                javax.swing.JOptionPane.showMessageDialog(this, 
                    "Tìm thấy " + result.size() + " đơn hàng với trạng thái: " + status, 
                    "Kết quả tìm kiếm", 
                    javax.swing.JOptionPane.INFORMATION_MESSAGE);
            }
            
        } catch (Exception e) {
            javax.swing.JOptionPane.showMessageDialog(this, 
                "Lỗi khi tìm kiếm theo trạng thái: " + e.getMessage(), 
                "Lỗi", 
                javax.swing.JOptionPane.ERROR_MESSAGE);
            System.err.println("Lỗi tìm kiếm theo trạng thái: " + e.getMessage());
        }
    }
    
    private void timtheothoigian() { // Tìm theo thời gian
        String period = (String) jComboBox2.getSelectedItem();
        LocalDateTime from = null, to = null;
        LocalDate today = LocalDate.now();
        DateTimeFormatter fmt = DateTimeFormatter.ofPattern("dd/MM/yyyy");
        switch (period) {
            case "Tất Cả":
                from = LocalDateTime.MIN;
                to = LocalDateTime.MAX;
                break;
            case "Hôm Nay":
                from = today.atStartOfDay();
                to = today.atTime(LocalTime.MAX);
                break;
            case "Tuần Này": {
                LocalDate firstDay = today.minusDays(today.getDayOfWeek().getValue() - 1);
                LocalDate lastDay = firstDay.plusDays(6);
                from = firstDay.atStartOfDay();
                to = lastDay.atTime(LocalTime.MAX);
                break;
            }
            case "Tháng Này": {
                LocalDate firstDay = today.withDayOfMonth(1);
                LocalDate lastDay = today.withDayOfMonth(today.lengthOfMonth());
                from = firstDay.atStartOfDay();
                to = lastDay.atTime(LocalTime.MAX);
                break;
            }
            case "Qúy Này": {
                int month = today.getMonthValue();
                int quarter = (month - 1) / 3 + 1;
                LocalDate firstDay = LocalDate.of(today.getYear(), (quarter - 1) * 3 + 1, 1);
                LocalDate lastDay = firstDay.plusMonths(2).withDayOfMonth(firstDay.plusMonths(2).lengthOfMonth());
                from = firstDay.atStartOfDay();
                to = lastDay.atTime(LocalTime.MAX);
                break;
            }
            case "Năm Nay": {
                LocalDate firstDay = today.withDayOfYear(1);
                LocalDate lastDay = today.withDayOfYear(today.lengthOfYear());
                from = firstDay.atStartOfDay();
                to = lastDay.atTime(LocalTime.MAX);
                break;
            }
        }
        List<Order> result = selectByDateRange(from, to);
        fillToTableWithList(result);
    }
    
    private void jComboBox3ItemStateChanged(java.awt.event.ItemEvent evt) { // Trạng thái
        if (evt.getStateChange() == java.awt.event.ItemEvent.SELECTED) {
            String status = (String) jComboBox3.getSelectedItem();
            List<Order> result;
            if ("All".equals(status)) {
                result = orderDAO.selectAll();
            } else {
                result = selectByStatus(status);
            }
            fillToTableWithList(result);
        }
    }
    
    private void jComboBox2ItemStateChanged(java.awt.event.ItemEvent evt) { // Thời gian
        if (evt.getStateChange() == java.awt.event.ItemEvent.SELECTED) {
            String period = (String) jComboBox2.getSelectedItem();
            LocalDateTime from = null, to = null;
            LocalDate today = LocalDate.now();
            DateTimeFormatter fmt = DateTimeFormatter.ofPattern("dd/MM/yyyy");
            switch (period) {
                case "Tất Cả":
                    from = LocalDateTime.MIN;
                    to = LocalDateTime.MAX;
                    if (lblTimeRange != null) lblTimeRange.setText("");
                    jTextField11.setText("");
                    jTextField12.setText("");
                    break;
                case "Hôm Nay":
                    from = today.atStartOfDay();
                    to = today.atTime(LocalTime.MAX);
                    if (lblTimeRange != null) lblTimeRange.setText(today.format(fmt));
                    jTextField11.setText(today.format(fmt));
                    jTextField12.setText(today.format(fmt));
                    break;
                case "Tuần Này": {
                    LocalDate firstDay = today.minusDays(today.getDayOfWeek().getValue() - 1);
                    LocalDate lastDay = firstDay.plusDays(6);
                    from = firstDay.atStartOfDay();
                    to = lastDay.atTime(LocalTime.MAX);
                    if (lblTimeRange != null) lblTimeRange.setText(firstDay.format(fmt) + " - " + lastDay.format(fmt));
                    jTextField11.setText(firstDay.format(fmt));
                    jTextField12.setText(lastDay.format(fmt));
                    break;
                }
                case "Tháng Này": {
                    LocalDate firstDay = today.withDayOfMonth(1);
                    LocalDate lastDay = today.withDayOfMonth(today.lengthOfMonth());
                    from = firstDay.atStartOfDay();
                    to = lastDay.atTime(LocalTime.MAX);
                    if (lblTimeRange != null) lblTimeRange.setText(firstDay.format(fmt) + " - " + lastDay.format(fmt));
                    jTextField11.setText(firstDay.format(fmt));
                    jTextField12.setText(lastDay.format(fmt));
                    break;
                }
                case "Qúy Này": {
                    int month = today.getMonthValue();
                    int quarter = (month - 1) / 3 + 1;
                    LocalDate firstDay = LocalDate.of(today.getYear(), (quarter - 1) * 3 + 1, 1);
                    LocalDate lastDay = firstDay.plusMonths(2).withDayOfMonth(firstDay.plusMonths(2).lengthOfMonth());
                    from = firstDay.atStartOfDay();
                    to = lastDay.atTime(LocalTime.MAX);
                    if (lblTimeRange != null) lblTimeRange.setText(firstDay.format(fmt) + " - " + lastDay.format(fmt));
                    jTextField11.setText(firstDay.format(fmt));
                    jTextField12.setText(lastDay.format(fmt));
                    break;
                }
                case "Năm Nay": {
                    LocalDate firstDay = today.withDayOfYear(1);
                    LocalDate lastDay = today.withDayOfYear(today.lengthOfYear());
                    from = firstDay.atStartOfDay();
                    to = lastDay.atTime(LocalTime.MAX);
                    if (lblTimeRange != null) lblTimeRange.setText(firstDay.format(fmt) + " - " + lastDay.format(fmt));
                    jTextField11.setText(firstDay.format(fmt));
                    jTextField12.setText(lastDay.format(fmt));
                    break;
                }
            }
            List<Order> result = selectByDateRange(from, to);
            fillToTableWithList(result);
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(QLDonHang.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(QLDonHang.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(QLDonHang.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(QLDonHang.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                QLDonHang dialog = new QLDonHang(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton10;
    private javax.swing.JButton jButton11;
    private javax.swing.JButton jButton12;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton8;
    private javax.swing.JButton jButton9;
    private javax.swing.JComboBox<String> jComboBox2;
    private javax.swing.JComboBox<String> jComboBox3;
    private javax.swing.JComboBox<String> jComboBox4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField11;
    private javax.swing.JTextField jTextField12;
    private javax.swing.JTextField jTextField9;
    // End of variables declaration//GEN-END:variables

    // === CRUD & UI Methods ===
    @Override
    public void open() {
        fillToTable();
        clear();
        setEditable(true);
        setLocationRelativeTo(null);
        setVisible(true);
    }

    @Override
    public void fillToTable() {
        orderList = orderDAO.selectAll();
        fillToTableWithList(orderList);
        updateComboBoxStatus();
    }
//
//    @Override
//    public void setForm(poly.entity.Order o) {
//        jTextField2.setText(o.getOrderId() != null ? o.getOrderId().toString() : "");
//        jTextField4.setText(o.getUserId() != null ? o.getUserId().toString() : "");
//        jTextField3.setText(o.getOrderDate() != null ? o.getOrderDate().toString() : "");
//        jTextField5.setText(o.getTotalAmount() != null ? o.getTotalAmount().toString() : "");
//        jTextField6.setText(o.getCouponId() != null ? o.getCouponId() : "");
//        jTextField7.setText(o.getPaymentMethod() != null ? o.getPaymentMethod() : "");
//        jComboBox1.setSelectedItem(o.getOrderStatus() != null ? o.getOrderStatus() : "Pending");
//        jTextField8.setText(o.getDeliveryAddressId() != null ? o.getDeliveryAddressId().toString() : "");
//    }
//
//    @Override
//    public poly.entity.Order getForm() {
//        poly.entity.Order o = new poly.entity.Order();
//        try { o.setOrderId(jTextField2.getText().isEmpty() ? null : Integer.parseInt(jTextField2.getText())); } catch(Exception e) { o.setOrderId(null); }
//        try { o.setUserId(jTextField4.getText().isEmpty() ? null : Integer.parseInt(jTextField4.getText())); } catch(Exception e) { o.setUserId(null); }
//        try { o.setOrderDate(jTextField3.getText().isEmpty() ? null : java.time.LocalDateTime.parse(jTextField3.getText())); } catch(Exception e) { o.setOrderDate(null); }
//        try { o.setTotalAmount(jTextField5.getText().isEmpty() ? null : new java.math.BigDecimal(jTextField5.getText())); } catch(Exception e) { o.setTotalAmount(null); }
//        o.setCouponId(jTextField6.getText());
//        o.setPaymentMethod(jTextField7.getText());
//        o.setOrderStatus((String) jComboBox1.getSelectedItem());
//        try { o.setDeliveryAddressId(jTextField8.getText().isEmpty() ? null : Integer.parseInt(jTextField8.getText())); } catch(Exception e) { o.setDeliveryAddressId(null); }
//        o.setIsActive(true);
//        return o;
//    }

//    @Override
//    public void create() {
//        poly.entity.Order o = getForm();
//        orderDAO.insert(o);
//        fillToTable();
//        clear();
//        javax.swing.JOptionPane.showMessageDialog(this, "Thêm hóa đơn thành công!");
//    }
//
//    @Override
//    public void update() {
//        poly.entity.Order o = getForm();
//        orderDAO.update(o);
//        fillToTable();
//        javax.swing.JOptionPane.showMessageDialog(this, "Cập nhật hóa đơn thành công!");
//    }
//
//    @Override
//    public void delete() {
//        String id = jTextField2.getText();
//        if (id.isEmpty()) return;
//        int confirm = javax.swing.JOptionPane.showConfirmDialog(this, "Bạn có chắc muốn xóa hóa đơn này?", "Xác nhận", javax.swing.JOptionPane.YES_NO_OPTION);
//        if (confirm != javax.swing.JOptionPane.YES_OPTION) return;
//        orderDAO.delete(Integer.parseInt(id));
//        fillToTable();
//        clear();
//        javax.swing.JOptionPane.showMessageDialog(this, "Xóa hóa đơn thành công!");
//    }
//
//    @Override
//    public void clear() {
//        jTextField2.setText("");
//        jTextField4.setText("");
//        jTextField3.setText("");
//        jTextField5.setText("");
//        jTextField6.setText("");
//        jTextField7.setText("");
//        jComboBox1.setSelectedIndex(0);
//        jTextField8.setText("");
//        currentRow = -1;
//    }
//
//    @Override
//    public void setEditable(boolean editable) {
//        jTextField2.setEditable(editable);
//        jTextField4.setEditable(editable);
//        jTextField3.setEditable(editable);
//        jTextField5.setEditable(editable);
//        jTextField6.setEditable(editable);
//        jTextField7.setEditable(editable);
//        jComboBox1.setEnabled(editable);
//        jTextField8.setEditable(editable);
//    }

    @Override
    public void edit() {
        int row = jTable1.getSelectedRow();
        if (row >= 0) {
            Integer orderId = (Integer) jTable1.getValueAt(row, 0);
            poly.entity.Order o = orderDAO.selectById(orderId);
            if (o != null) {
                setForm(o);
                currentRow = row;
            }
        }
    }

    @Override
    public void create() {
        // Không cần implement vì màn hình này chỉ xem và cập nhật đơn hàng
    }

    @Override
    public void update() {
        // Không cần implement vì màn hình này chỉ cập nhật trạng thái
    }

    @Override
    public void delete() {
        // Không cần implement vì màn hình này chỉ xem và cập nhật đơn hàng
    }

    @Override
    public void clear() {
        // Không cần implement vì màn hình này chỉ xem và cập nhật đơn hàng
    }

    @Override
    public void setEditable(boolean editable) {
        // Không cần implement vì màn hình này chỉ xem và cập nhật đơn hàng
    }

    @Override
    public void setForm(Order entity) {
        // Không cần implement vì màn hình này chỉ xem và cập nhật đơn hàng
    }

    @Override
    public Order getForm() {
        // Không cần implement vì màn hình này chỉ xem và cập nhật đơn hàng
        return null;
    }

//    @Override
//    public void moveFirst() {
//        if (orderList.isEmpty()) return;
//        currentRow = 0;
//        setForm(orderList.get(currentRow));
//        jTable1.setRowSelectionInterval(currentRow, currentRow);
//    }
//
//    @Override
//    public void movePrevious() {
//        if (orderList.isEmpty() || currentRow <= 0) return;
//        currentRow--;
//        setForm(orderList.get(currentRow));
//        jTable1.setRowSelectionInterval(currentRow, currentRow);
//    }
    @Override
    public void moveFirst() {
        if (!orderList.isEmpty()) {
            currentRow = 0;
            setForm(orderList.get(currentRow));
            jTable1.setRowSelectionInterval(currentRow, currentRow);
        }
    }

    @Override
    public void movePrevious() {
        if (orderList.isEmpty() || currentRow <= 0) return;
        currentRow--;
        setForm(orderList.get(currentRow));
        jTable1.setRowSelectionInterval(currentRow, currentRow);
    }

    @Override
    public void moveNext() {
        if (orderList.isEmpty() || currentRow >= orderList.size() - 1) return;
        currentRow++;
        setForm(orderList.get(currentRow));
        jTable1.setRowSelectionInterval(currentRow, currentRow);
    }

    @Override
    public void moveLast() {
        if (!orderList.isEmpty()) {
            currentRow = orderList.size() - 1;
            setForm(orderList.get(currentRow));
            jTable1.setRowSelectionInterval(currentRow, currentRow);
        }
    }

    @Override
    public void moveTo(int rowIndex) {
        if (rowIndex >= 0 && rowIndex < orderList.size()) {
            currentRow = rowIndex;
            setForm(orderList.get(rowIndex));
            jTable1.setRowSelectionInterval(currentRow, currentRow);
        }
    }

    @Override
    public void checkAll() {
        javax.swing.table.DefaultTableModel model = (javax.swing.table.DefaultTableModel) jTable1.getModel();
        for (int i = 0; i < model.getRowCount(); i++) {
            model.setValueAt(true, i, 9);
        }
        updateComboBoxStatus();
    }

    @Override
    public void uncheckAll() {
        javax.swing.table.DefaultTableModel model = (javax.swing.table.DefaultTableModel) jTable1.getModel();
        for (int i = 0; i < model.getRowCount(); i++) {
            model.setValueAt(false, i, 9);
        }
        updateComboBoxStatus();
    }

    @Override
    public void deleteCheckedItems() {
        javax.swing.table.DefaultTableModel model = (javax.swing.table.DefaultTableModel) jTable1.getModel();
        java.util.List<Integer> idsToDelete = new java.util.ArrayList<>();
        for (int i = 0; i < model.getRowCount(); i++) {
            Boolean checked = (Boolean) model.getValueAt(i, 9);
            if (checked != null && checked) {
                idsToDelete.add((Integer) model.getValueAt(i, 0));
            }
        }
        for (Integer id : idsToDelete) {
            orderDAO.delete(id);
        }
        fillToTable();
        javax.swing.JOptionPane.showMessageDialog(this, "Đã xóa các hóa đơn được chọn!");
    }

    @Override
    public List<Order> selectByStatus(String status) {
        return orderDAO.selectByStatus(status);
    }

    @Override
    public List<Order> selectByUserId(Integer userId) {
        return orderDAO.selectByUserId(userId);
    }

    @Override
    public List<Order> selectByDateRange(LocalDateTime startDate, LocalDateTime endDate) {
        return orderDAO.selectByDateRange(startDate, endDate);
    }

    @Override
    public List<Order> selectByPaymentMethod(String paymentMethod) {
        return orderDAO.selectByPaymentMethod(paymentMethod);
    }

    @Override
    public List<Order> searchByKeyword(String keyword) {
        return orderDAO.searchByKeyword(keyword);
    }

    @Override
    public void updateOrderStatus(Integer orderId, String status) {
        orderDAO.updateOrderStatus(orderId, status);
    }

    @Override
    public BigDecimal getTotalRevenue(LocalDateTime startDate, LocalDateTime endDate) {
        return orderDAO.getTotalRevenue(startDate, endDate);
    }

    @Override
    public int getOrderCountByStatus(String status) {
        return orderDAO.getOrderCountByStatus(status);
    }

    @Override
    public List<OrderDetail> getOrderDetails(Integer orderId) {
        return orderDAO.getOrderDetails(orderId);
    }

    @Override
    public void insertOrderDetail(OrderDetail orderDetail) {
        orderDAO.insertOrderDetail(orderDetail);
    }

    @Override
    public void deleteOrderDetail(Integer orderDetailId) {
        orderDAO.deleteOrderDetail(orderDetailId);
    }

    @Override
    public List<Order> selectOrdersWithCustomerInfo() {
        return orderDAO.selectOrdersWithCustomerInfo();
    }

   

    // Hàm phụ để đổ danh sách Order vào bảng (không phải CRUD, chỉ hỗ trợ UI)
    private void fillToTableWithList(List<Order> list) {
        javax.swing.table.DefaultTableModel model = (javax.swing.table.DefaultTableModel) jTable1.getModel();
        model.setRowCount(0);
        
        // Khai báo AddressDAO để sử dụng
        poly.dao.AddressDAO addressDAO = new poly.dao.impl.AddressDAOImpl();
        for (Order o : list) {
            String tenKhachHang = "";
            String diaChiGiaoHang = "";
            
            // Ưu tiên lấy địa chỉ theo OrderID (cách mới)
            Address address = null;
            if (o.getOrderId() != null) {
                System.out.println("🔍 DEBUG QLDonHang - Tìm địa chỉ theo OrderID: " + o.getOrderId());
                address = addressDAO.selectByOrderId(o.getOrderId());
                if (address != null) {
                    System.out.println("🔍 DEBUG QLDonHang - Tìm thấy địa chỉ theo OrderID: " + address.getAddressLine1());
                } else {
                    System.out.println("🔍 DEBUG QLDonHang - Không tìm thấy địa chỉ theo OrderID");
                }
            }
            
            // Nếu không tìm thấy theo OrderID, thử theo DeliveryAddressID (cách cũ)
            if (address == null && o.getDeliveryAddressId() != null) {
                System.out.println("🔍 DEBUG QLDonHang - Tìm địa chỉ theo DeliveryAddressID: " + o.getDeliveryAddressId());
                address = addressDAO.selectById(o.getDeliveryAddressId());
                if (address != null) {
                    System.out.println("🔍 DEBUG QLDonHang - Tìm thấy địa chỉ theo DeliveryAddressID: " + address.getAddressLine1());
                } else {
                    System.out.println("🔍 DEBUG QLDonHang - Không tìm thấy địa chỉ theo DeliveryAddressID");
                }
            }
            
            if (address != null) {
                // Ưu tiên sử dụng CustomerName, nếu không có thì dùng tên user
                if (address.getCustomerName() != null && !address.getCustomerName().trim().isEmpty()) {
                    tenKhachHang = address.getCustomerName();
                } else {
                    // Fallback: lấy tên từ bảng Users
                    User user = userDAO.selectById(o.getUserId());
                    if (user != null) tenKhachHang = user.getFullName();
                }
                
                // Tạo địa chỉ giao hàng từ thông tin address
                StringBuilder addressBuilder = new StringBuilder();
                if (address.getAddressLine1() != null && !address.getAddressLine1().trim().isEmpty()) {
                    addressBuilder.append(address.getAddressLine1());
                }
                if (address.getCity() != null && !address.getCity().trim().isEmpty()) {
                    if (addressBuilder.length() > 0) addressBuilder.append(", ");
                    addressBuilder.append(address.getCity());
                }
                if (address.getCountry() != null && !address.getCountry().trim().isEmpty()) {
                    if (addressBuilder.length() > 0) addressBuilder.append(", ");
                    addressBuilder.append(address.getCountry());
                }
                diaChiGiaoHang = addressBuilder.toString();
                
                // Nếu không có thông tin địa chỉ, hiển thị thông báo
                if (diaChiGiaoHang.trim().isEmpty()) {
                    diaChiGiaoHang = "Không có thông tin địa chỉ";
                }
            } else {
                // Fallback: lấy tên từ bảng Users nếu không có address
                User user = userDAO.selectById(o.getUserId());
                if (user != null) tenKhachHang = user.getFullName();
                diaChiGiaoHang = "Không có thông tin địa chỉ";
            }
            
            model.addRow(new Object[]{
                o.getOrderId(),
                o.getUserId(),
                tenKhachHang,
                o.getOrderDate(),
                o.getTotalAmount(),
                o.getCouponId(),
                o.getPaymentMethod(),
                o.getOrderStatus(),
                diaChiGiaoHang,
                false
            });
        }
        currentRow = -1;
        updateComboBoxStatus();
    }
    
    /**
     * Cập nhật trạng thái cho các đơn hàng được chọn
     */
    private void updateOrderStatusForSelected() {
        String newStatus = (String) jComboBox4.getSelectedItem();
        if (newStatus == null || newStatus.trim().isEmpty()) {
            javax.swing.JOptionPane.showMessageDialog(this, "Vui lòng chọn trạng thái mới!", "Lỗi", javax.swing.JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        javax.swing.table.DefaultTableModel model = (javax.swing.table.DefaultTableModel) jTable1.getModel();
        java.util.List<Integer> selectedOrderIds = new java.util.ArrayList<>();
        java.util.List<String> lockedOrders = new java.util.ArrayList<>();
        
        // Kiểm tra các đơn hàng được chọn
        for (int i = 0; i < model.getRowCount(); i++) {
            Boolean checked = (Boolean) model.getValueAt(i, 9);
            if (checked != null && checked) {
                Integer orderId = (Integer) model.getValueAt(i, 0);
                String currentStatus = (String) model.getValueAt(i, 7);
                
                // Kiểm tra nếu đơn hàng đã ở trạng thái Completed hoặc Cancelled
                if ("Completed".equals(currentStatus) || "Cancelled".equals(currentStatus)) {
                    lockedOrders.add("Đơn hàng #" + orderId + " (" + currentStatus + ")");
                } else {
                    selectedOrderIds.add(orderId);
                }
            }
        }
        
        // Hiển thị cảnh báo nếu có đơn hàng Completed hoặc Cancelled được chọn
        if (!lockedOrders.isEmpty()) {
            StringBuilder message = new StringBuilder("Không thể cập nhật trạng thái cho các đơn hàng sau:\n");
            for (String order : lockedOrders) {
                message.append("- ").append(order).append("\n");
            }
            javax.swing.JOptionPane.showMessageDialog(this, message.toString(), "Cảnh báo", javax.swing.JOptionPane.WARNING_MESSAGE);
            
            // Cập nhật thông báo trên jLabel1
            updateComboBoxStatus();
            return;
        }
        
        // Cập nhật trạng thái cho các đơn hàng có thể cập nhật
        if (selectedOrderIds.isEmpty()) {
            javax.swing.JOptionPane.showMessageDialog(this, "Vui lòng chọn ít nhất một đơn hàng để cập nhật!", "Thông báo", javax.swing.JOptionPane.INFORMATION_MESSAGE);
            return;
        }
        
        // Xác nhận cập nhật
        int confirm = javax.swing.JOptionPane.showConfirmDialog(
            this, 
            "Bạn có chắc chắn muốn cập nhật trạng thái thành '" + newStatus + "' cho " + selectedOrderIds.size() + " đơn hàng được chọn?",
            "Xác nhận cập nhật",
            javax.swing.JOptionPane.YES_NO_OPTION
        );
        
        if (confirm != javax.swing.JOptionPane.YES_OPTION) {
            return;
        }
        
        // Thực hiện cập nhật
        int successCount = 0;
        for (Integer orderId : selectedOrderIds) {
            try {
                orderDAO.updateOrderStatus(orderId, newStatus);
                successCount++;
            } catch (Exception e) {
                javax.swing.JOptionPane.showMessageDialog(this, 
                    "Lỗi khi cập nhật đơn hàng #" + orderId + ": " + e.getMessage(), 
                    "Lỗi", 
                    javax.swing.JOptionPane.ERROR_MESSAGE);
            }
        }
        
        // Hiển thị kết quả
        if (successCount > 0) {
            javax.swing.JOptionPane.showMessageDialog(this, 
                "Đã cập nhật thành công trạng thái cho " + successCount + " đơn hàng!", 
                "Thành công", 
                javax.swing.JOptionPane.INFORMATION_MESSAGE);
            
            // Refresh bảng
            fillToTable();
            
            // Bỏ chọn tất cả
            uncheckAll();
            
            // Cập nhật thông báo trên jLabel1
            updateComboBoxStatus();
        }
    }
    
    /**
     * Kiểm tra xem trạng thái có thể chuyển đổi được không
     */
    private boolean canUpdateStatus(String currentStatus, String newStatus) {
        // Nếu đơn hàng đã hoàn thành, không thể cập nhật
        if ("Completed".equals(currentStatus)) {
            return false;
        }
        
        // Các trạng thái khác có thể chuyển đổi tự do
        return true;
    }
    
    /**
     * Lấy danh sách các trạng thái có thể chuyển đổi từ trạng thái hiện tại
     */
    private java.util.List<String> getAvailableStatuses(String currentStatus) {
        java.util.List<String> availableStatuses = new java.util.ArrayList<>();
        
        if ("Completed".equals(currentStatus)) {
            // Đơn hàng đã hoàn thành không thể thay đổi trạng thái
            return availableStatuses;
        }
        
        // Các trạng thái có thể chuyển đổi
        availableStatuses.add("Pending");
        availableStatuses.add("Processing");
        availableStatuses.add("Shipped");
        availableStatuses.add("Completed");
        availableStatuses.add("Cancelled");
        
        return availableStatuses;
    }
    
    /**
     * Cập nhật trạng thái của combobox dựa trên đơn hàng được chọn
     */
    private void updateComboBoxStatus() {
        javax.swing.table.DefaultTableModel model = (javax.swing.table.DefaultTableModel) jTable1.getModel();
        java.util.Set<String> selectedStatuses = new java.util.HashSet<>();
        int selectedCount = 0;
        int lockedCount = 0;
        java.util.List<String> lockedOrderIds = new java.util.ArrayList<>();
        
        // Lấy tất cả trạng thái của các đơn hàng được chọn
        for (int i = 0; i < model.getRowCount(); i++) {
            Boolean checked = (Boolean) model.getValueAt(i, 9);
            if (checked != null && checked) {
                selectedCount++;
                Integer orderId = (Integer) model.getValueAt(i, 0);
                String currentStatus = (String) model.getValueAt(i, 7);
                selectedStatuses.add(currentStatus);
                if ("Completed".equals(currentStatus) || "Cancelled".equals(currentStatus)) {
                    lockedCount++;
                    lockedOrderIds.add(orderId.toString());
                }
            }
        }
        
        // Cập nhật thông tin hiển thị
        if (selectedCount == 0) {
            jLabel1.setText("Chưa chọn đơn hàng nào");
            jComboBox4.setEnabled(false);
            jButton12.setEnabled(false);
        } else if (lockedCount > 0) {
            String message = "Đơn hàng có ID: " + String.join(", ", lockedOrderIds) + 
                           " có trạng thái " + (lockedCount == 1 ? "Completed/Cancelled" : "Completed/Cancelled") + 
                           " không được phép cập nhật trạng thái";
            jLabel1.setText(message);
            jComboBox4.setEnabled(false);
            jButton12.setEnabled(false);
        } else {
            jLabel1.setText("Đã chọn " + selectedCount + " đơn hàng - Có thể cập nhật trạng thái");
            jComboBox4.setEnabled(true);
            jButton12.setEnabled(true);
        }
    }
    
    /**
     * Thêm listener cho việc thay đổi selection trong table
     */
    private void addTableSelectionListener() {
        jTable1.getSelectionModel().addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            @Override
            public void valueChanged(javax.swing.event.ListSelectionEvent e) {
                if (!e.getValueIsAdjusting()) {
                    updateComboBoxStatus();
                }
            }
        });
    }
    
    /**
     * Thêm listener cho việc thay đổi checkbox trong table
     */
    private void addTableModelListener() {
        jTable1.getModel().addTableModelListener(new javax.swing.event.TableModelListener() {
            @Override
            public void tableChanged(javax.swing.event.TableModelEvent e) {
                if (e.getColumn() == 9) { // Cột checkbox
                    updateComboBoxStatus();
                }
            }
        });
    }
    
    /**
     * Xem chi tiết đơn hàng được chọn
     */
    private void viewOrderDetails() {
        int selectedRow = jTable1.getSelectedRow();
        if (selectedRow == -1) {
            javax.swing.JOptionPane.showMessageDialog(this, 
                "Vui lòng chọn một đơn hàng để xem chi tiết!", 
                "Thông báo", 
                javax.swing.JOptionPane.INFORMATION_MESSAGE);
            return;
        }
        
        try {
            Integer orderId = (Integer) jTable1.getValueAt(selectedRow, 0);
            if (orderId == null) {
                javax.swing.JOptionPane.showMessageDialog(this, 
                    "Không thể lấy thông tin đơn hàng!", 
                    "Lỗi", 
                    javax.swing.JOptionPane.ERROR_MESSAGE);
                return;
            }
            
            // Lấy thông tin đơn hàng
            poly.dao.OrderDAO orderDAO = new poly.dao.impl.OrderDAOImpl();
            poly.entity.Order currentOrder = orderDAO.selectById(orderId);
            
            if (currentOrder == null) {
                javax.swing.JOptionPane.showMessageDialog(this, 
                    "Không tìm thấy thông tin đơn hàng!", 
                    "Lỗi", 
                    javax.swing.JOptionPane.ERROR_MESSAGE);
                return;
            }
            
            // Thử lấy thông tin từ OrderRequest trước (thông tin thực tế từ form đặt hàng)
            poly.dao.OrderRequestDAO orderRequestDAO = new poly.dao.impl.OrderRequestDAOImpl();
            poly.entity.OrderRequest orderRequest = orderRequestDAO.selectById(currentOrder.getOrderId());
            
            List<poly.entity.OrderDetail> details = orderDAO.getOrderDetails(currentOrder.getOrderId());
            poly.dao.UserDAO userDAO = new poly.dao.impl.UserDAOImpl();
            poly.entity.User user = userDAO.selectById(currentOrder.getUserId());
            
            StringBuilder sb = new StringBuilder();
            sb.append("=== CHI TIẾT ĐƠN HÀNG ===\n");
            sb.append("Mã đơn: ").append(currentOrder.getOrderId()).append("\n");
            sb.append("Ngày đặt: ").append(currentOrder.getOrderDate() != null ? currentOrder.getOrderDate().toString() : "N/A").append("\n");
            sb.append("Người đặt: ").append(user != null ? user.getFullName() : "N/A").append("\n");
            sb.append("Tổng số tiền phải trả: ").append(String.format("$%,.2f", currentOrder.getTotalAmount())).append("\n");
            sb.append("Trạng thái: ").append(getStatusDisplayName(currentOrder.getOrderStatus())).append("\n");
            sb.append("Phương thức thanh toán: ").append(getPaymentMethodDisplayName(currentOrder.getPaymentMethod())).append("\n");
            
            // Hiển thị thông tin địa chỉ giao hàng
            sb.append("\n=== THÔNG TIN GIAO HÀNG ===\n");
            
            // Ưu tiên lấy từ bảng Addresses theo OrderID (thông tin thực tế từ form đặt hàng)
            try {
                poly.dao.AddressDAO addressDAO = new poly.dao.impl.AddressDAOImpl();
                poly.entity.Address address = null;
                
                // Thử lấy theo OrderID trước (cách mới)
                if (currentOrder.getOrderId() != null) {
                    System.out.println("🔍 DEBUG QLDonHang - Tìm địa chỉ theo OrderID: " + currentOrder.getOrderId());
                    address = addressDAO.selectByOrderId(currentOrder.getOrderId());
                    System.out.println("🔍 DEBUG QLDonHang - Kết quả tìm theo OrderID: " + (address != null ? "FOUND" : "NOT FOUND"));
                    if (address != null) {
                        System.out.println("🔍 DEBUG QLDonHang - AddressID: " + address.getAddressId());
                        System.out.println("🔍 DEBUG QLDonHang - AddressLine1: " + address.getAddressLine1());
                        System.out.println("🔍 DEBUG QLDonHang - CustomerName: " + address.getCustomerName());
                    }
                } else {
                    System.out.println("🔍 DEBUG QLDonHang - OrderID is NULL");
                }
                
                // Nếu không tìm thấy theo OrderID, thử theo DeliveryAddressID (cách cũ)
                if (address == null && currentOrder.getDeliveryAddressId() != null) {
                    System.out.println("🔍 DEBUG QLDonHang - Tìm địa chỉ theo DeliveryAddressID: " + currentOrder.getDeliveryAddressId());
                    address = addressDAO.selectById(currentOrder.getDeliveryAddressId());
                    System.out.println("🔍 DEBUG QLDonHang - Kết quả tìm theo DeliveryAddressID: " + (address != null ? "FOUND" : "NOT FOUND"));
                    if (address != null) {
                        System.out.println("🔍 DEBUG QLDonHang - AddressID: " + address.getAddressId());
                        System.out.println("🔍 DEBUG QLDonHang - AddressLine1: " + address.getAddressLine1());
                        System.out.println("🔍 DEBUG QLDonHang - CustomerName: " + address.getCustomerName());
                    }
                } else if (address == null) {
                    System.out.println("🔍 DEBUG QLDonHang - DeliveryAddressID is NULL");
                }
                
                if (address != null) {
                    sb.append("Họ tên người nhận: ").append(address.getCustomerName() != null ? address.getCustomerName() : "N/A").append("\n");
                    sb.append("Số điện thoại: ").append(address.getPhone() != null ? address.getPhone() : "N/A").append("\n");
                    sb.append("Địa chỉ: ").append(address.getAddressLine1() != null ? address.getAddressLine1() : "N/A").append("\n");
                    sb.append("Thành phố: ").append(address.getCity() != null ? address.getCity() : "N/A").append("\n");
                    sb.append("Quốc gia: ").append(address.getCountry() != null ? address.getCountry() : "N/A").append("\n");
                } else {
                    sb.append("Không tìm thấy thông tin địa chỉ giao hàng\n");
                    System.out.println("DEBUG QLDonHang - Không tìm thấy địa chỉ cho OrderID: " + currentOrder.getOrderId());
                    
                    // Fallback: thử lấy từ OrderRequest
                    if (orderRequest != null) {
                        sb.append("Họ tên người nhận: ").append(orderRequest.getCustomerName() != null ? orderRequest.getCustomerName() : "N/A").append("\n");
                        sb.append("Số điện thoại: ").append(orderRequest.getPhone() != null ? orderRequest.getPhone() : "N/A").append("\n");
                        sb.append("Địa chỉ: ").append(orderRequest.getAddress() != null ? orderRequest.getAddress() : "N/A").append("\n");
                        sb.append("Thành phố: ").append(orderRequest.getCity() != null ? orderRequest.getCity() : "N/A").append("\n");
                        sb.append("Quốc gia: ").append(orderRequest.getCountry() != null ? orderRequest.getCountry() : "N/A").append("\n");
                    } else {
                        // Fallback: lấy từ thông tin user
                        if (user != null) {
                            sb.append("Họ tên người nhận: ").append(user.getFullName() != null ? user.getFullName() : "N/A").append("\n");
                            sb.append("Số điện thoại: ").append(user.getPhone() != null ? user.getPhone() : "N/A").append("\n");
                            sb.append("Địa chỉ: ").append(user.getAddress() != null ? user.getAddress() : "N/A").append("\n");
                            sb.append("Thành phố: N/A\n");
                            sb.append("Quốc gia: N/A\n");
                        } else {
                            sb.append("Không tìm thấy thông tin địa chỉ giao hàng\n");
                        }
                    }
                }
            } catch (Exception e) {
                sb.append("Lỗi khi lấy thông tin địa chỉ: ").append(e.getMessage()).append("\n");
                e.printStackTrace();
            }
            
            // Hiển thị thông tin mã giảm giá
            sb.append("\n=== THÔNG TIN MÃ GIẢM GIÁ ===\n");
            String couponId = orderRequest != null ? orderRequest.getCouponId() : currentOrder.getCouponId();
            if (couponId != null && !couponId.trim().isEmpty()) {
                try {
                    poly.dao.CouponDAO couponDAO = new poly.dao.impl.CouponDAOImpl();
                    poly.entity.Coupon coupon = couponDAO.selectById(couponId);
                    if (coupon != null) {
                        sb.append("Mã giảm giá: ").append(coupon.getCouponId()).append("\n");
                        sb.append("Loại giảm giá: ").append(coupon.getDiscountType() != null ? coupon.getDiscountType() : "N/A").append("\n");
                        sb.append("Giá trị giảm: ").append(coupon.getDiscountValue() != null ? String.format("$%,.2f", coupon.getDiscountValue()) : "N/A").append("\n");
                    } else {
                        sb.append("Mã giảm giá: ").append(couponId).append(" (Không tìm thấy thông tin chi tiết)\n");
                    }
                } catch (Exception e) {
                    sb.append("Mã giảm giá: ").append(couponId).append(" (Lỗi khi lấy thông tin: ").append(e.getMessage()).append(")\n");
                }
            } else {
                sb.append("Không sử dụng mã giảm giá\n");
            }
            
            // Hiển thị lý do đổi trả hoặc lý do huỷ đơn hàng nếu có
            if (currentOrder.getReturnReason() != null && !currentOrder.getReturnReason().trim().isEmpty()) {
                sb.append("\n=== THÔNG TIN XỬ LÝ ===\n");
                String reason = currentOrder.getReturnReason();
                
                // Phân biệt rõ ràng loại lý do
                if (reason.startsWith("[ĐỔI TRẢ - ĐÃ THANH TOÁN]")) {
                    sb.append("🔄 YÊU CẦU ĐỔI TRẢ (Đã thanh toán):\n");
                    sb.append("   → Lý do: ").append(reason.substring(25)).append("\n");
                    sb.append("   → Xử lý: Hoàn tiền + Trả hàng\n");
                } else if (reason.startsWith("[ĐỔI TRẢ - CHƯA THANH TOÁN]")) {
                    sb.append("🔄 YÊU CẦU ĐỔI TRẢ (Chưa thanh toán):\n");
                    sb.append("   → Lý do: ").append(reason.substring(28)).append("\n");
                    sb.append("   → Xử lý: Chỉ trả hàng\n");
                } else if (reason.startsWith("[ĐỔI TRẢ]")) {
                    sb.append("🔄 YÊU CẦU ĐỔI TRẢ:\n");
                    sb.append("   → Lý do: ").append(reason.substring(10)).append("\n");
                } else if (reason.startsWith("[HUỶ]")) {
                    sb.append("❌ LÝ DO HUỶ ĐƠN HÀNG:\n");
                    sb.append("   → Lý do: ").append(reason.substring(6)).append("\n");
                    sb.append("   → Xử lý: Huỷ đơn hàng + Cập nhật tồn kho\n");
                } else {
                    // Fallback cho dữ liệu cũ
                    sb.append("📝 LÝ DO:\n");
                    sb.append("   → ").append(reason).append("\n");
                }
            }
            
            sb.append("\n=== DANH SÁCH SẢN PHẨM ===\n");
            if (details != null && !details.isEmpty()) {
                poly.dao.ProductDAO productDAO = new poly.dao.impl.ProductDAOImpl();
                for (poly.entity.OrderDetail detail : details) {
                    // Lấy thông tin sản phẩm để hiển thị tên thay vì mã
                    String productName = "N/A";
                    try {
                        poly.entity.Product product = productDAO.selectById(detail.getProductId());
                        if (product != null) {
                            productName = product.getProductName();
                        }
                    } catch (Exception e) {
                        // Nếu không lấy được tên sản phẩm thì dùng mã
                        productName = detail.getProductId();
                    }
                    
                    sb.append("• ").append(productName)
                      .append("\n  Số lượng: ").append(detail.getQuantity())
                      .append(" | Đơn giá: ").append(String.format("$%,.2f", detail.getUnitPrice()))
                      .append(" | Thành tiền: ").append(String.format("$%,.2f", detail.getUnitPrice().multiply(new java.math.BigDecimal(detail.getQuantity()))))
                      .append("\n");
                }
            } else {
                sb.append("Không có sản phẩm nào trong đơn hàng\n");
            }
            
            javax.swing.JOptionPane.showMessageDialog(this, sb.toString(), "Chi tiết đơn hàng #" + orderId, javax.swing.JOptionPane.INFORMATION_MESSAGE);
            
        } catch (Exception e) {
            javax.swing.JOptionPane.showMessageDialog(this, 
                "Lỗi xem chi tiết: " + e.getMessage(), 
                "Lỗi", 
                javax.swing.JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
        }
    }
    
    /**
     * Lấy tên hiển thị cho trạng thái đơn hàng
     */
    private String getStatusDisplayName(String status) {
        switch (status) {
            case "Pending": return "⏳ Chờ xử lý";
            case "Processing": return "⚙️ Đang xử lý";
            case "Shipped": return "📦 Đã gửi hàng";
            case "Delivering": return "🚚 Đang giao hàng";
            case "Completed": return "✅ Đã hoàn thành";
            case "Cancelled": return "❌ Đã huỷ/Đổi trả";
            default: return status;
        }
    }
    
    /**
     * Lấy tên hiển thị cho phương thức thanh toán
     */
    private String getPaymentMethodDisplayName(String paymentMethod) {
        if (paymentMethod == null || paymentMethod.trim().isEmpty()) {
            return "N/A";
        }
        
        // Debug: in ra giá trị để kiểm tra
        System.out.println("🔍 DEBUG Payment Method - Raw value: '" + paymentMethod + "'");
        System.out.println("🔍 DEBUG Payment Method - Trimmed: '" + paymentMethod.trim() + "'");
        
        String trimmedMethod = paymentMethod.trim();
        
        // Sử dụng contains() thay vì equals() để tránh encoding issues
        if (trimmedMethod.contains("Thanh toán") || trimmedMethod.contains("COD") || 
            trimmedMethod.contains("Cash on Delivery") || trimmedMethod.contains("Cash")) {
            System.out.println("🔍 DEBUG Payment Method - Matched: COD (contains)");
            return "💳 Thanh toán khi nhận hàng (COD)";
        } else if (trimmedMethod.contains("Credit") || trimmedMethod.contains("Thẻ tín dụng")) {
            System.out.println("🔍 DEBUG Payment Method - Matched: Credit Card (contains)");
            return "💳 Thẻ tín dụng";
        } else if (trimmedMethod.contains("Bank") || trimmedMethod.contains("Chuyển khoản")) {
            System.out.println("🔍 DEBUG Payment Method - Matched: Bank Transfer (contains)");
            return "🏦 Chuyển khoản ngân hàng";
        } else if (trimmedMethod.contains("PayPal")) {
            System.out.println("🔍 DEBUG Payment Method - Matched: PayPal (contains)");
            return "💳 PayPal";
        } else if (trimmedMethod.contains("Momo")) {
            System.out.println("🔍 DEBUG Payment Method - Matched: MoMo (contains)");
            return "📱 MoMo";
        } else if (trimmedMethod.contains("ZaloPay")) {
            System.out.println("🔍 DEBUG Payment Method - Matched: ZaloPay (contains)");
            return "📱 ZaloPay";
        } else if (trimmedMethod.contains("VNPay")) {
            System.out.println("🔍 DEBUG Payment Method - Matched: VNPay (contains)");
            return "💳 VNPay";
        } else {
            System.out.println("🔍 DEBUG Payment Method - No match, returning original: " + trimmedMethod);
            return trimmedMethod;
        }
    }

    /**
     * Hiển thị thông tin chi tiết về các đơn hàng được chọn
     */
    private void showSelectedOrdersInfo() {
        javax.swing.table.DefaultTableModel model = (javax.swing.table.DefaultTableModel) jTable1.getModel();
        java.util.List<String> selectedOrders = new java.util.ArrayList<>();
        java.util.List<String> completedOrders = new java.util.ArrayList<>();
        
        for (int i = 0; i < model.getRowCount(); i++) {
            Boolean checked = (Boolean) model.getValueAt(i, 9);
            if (checked != null && checked) {
                Integer orderId = (Integer) model.getValueAt(i, 0);
                String customerName = (String) model.getValueAt(i, 2);
                String currentStatus = (String) model.getValueAt(i, 7);
                String orderInfo = "Đơn hàng #" + orderId + " - " + customerName + " (" + currentStatus + ")";
                
                if ("Completed".equals(currentStatus)) {
                    completedOrders.add(orderInfo);
                } else {
                    selectedOrders.add(orderInfo);
                }
            }
        }
        
        if (selectedOrders.isEmpty() && completedOrders.isEmpty()) {
            javax.swing.JOptionPane.showMessageDialog(this, "Chưa chọn đơn hàng nào!", "Thông tin", javax.swing.JOptionPane.INFORMATION_MESSAGE);
            return;
        }
        
        StringBuilder message = new StringBuilder("Thông tin các đơn hàng được chọn:\n\n");
        
        if (!selectedOrders.isEmpty()) {
            message.append("Có thể cập nhật (").append(selectedOrders.size()).append(" đơn):\n");
            for (String order : selectedOrders) {
                message.append("- ").append(order).append("\n");
            }
            message.append("\n");
        }
        
        if (!completedOrders.isEmpty()) {
            message.append("Không thể cập nhật (").append(completedOrders.size()).append(" đơn đã hoàn thành):\n");
            for (String order : completedOrders) {
                message.append("- ").append(order).append("\n");
            }
        }
        
        javax.swing.JOptionPane.showMessageDialog(this, message.toString(), "Thông tin đơn hàng", javax.swing.JOptionPane.INFORMATION_MESSAGE);
    }
}

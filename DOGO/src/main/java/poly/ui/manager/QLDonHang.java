/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JDialog.java to edit this template
 */
package poly.ui.manager;

import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.List;
import poly.entity.Order;
import poly.entity.OrderDetail;
import poly.dao.UserDAO;
import poly.dao.impl.UserDAOImpl;
import poly.entity.User;
import poly.entity.Address;
import poly.util.XQuery;
import java.util.ArrayList;
import java.time.LocalDate;
import java.time.LocalTime;
import java.time.format.DateTimeFormatter;

/**
 *
 * @author Duy
 */
public class QLDonHang extends javax.swing.JDialog implements poly.controller.OrderController {
    private poly.dao.OrderDAO orderDAO = new poly.dao.impl.OrderDAOImpl();
    private java.util.List<poly.entity.Order> orderList = new java.util.ArrayList<>();
    private int currentRow = -1;
    private UserDAO userDAO = new UserDAOImpl();
    private javax.swing.JLabel lblTimeRange; // Thêm label hiển thị khoảng thời gian

    /**
     * Creates new form QLDonHang
     */
    public QLDonHang(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButton6 = new javax.swing.JButton();
        jButton7 = new javax.swing.JButton();
        jButton8 = new javax.swing.JButton();
        jLabel12 = new javax.swing.JLabel();
        jTextField9 = new javax.swing.JTextField();
        jButton9 = new javax.swing.JButton();
        jLabel13 = new javax.swing.JLabel();
        jButton10 = new javax.swing.JButton();
        jLabel14 = new javax.swing.JLabel();
        jTextField11 = new javax.swing.JTextField();
        jLabel15 = new javax.swing.JLabel();
        jTextField12 = new javax.swing.JTextField();
        jButton11 = new javax.swing.JButton();
        jComboBox2 = new javax.swing.JComboBox<>();
        jComboBox3 = new javax.swing.JComboBox<>();
        jPanel2 = new javax.swing.JPanel();
        jLabel11 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jTextField6 = new javax.swing.JTextField();
        jTextField3 = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        jTextField4 = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        jTextField5 = new javax.swing.JTextField();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        jButton5 = new javax.swing.JButton();
        jTextField2 = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jTextField7 = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox<>();
        jLabel7 = new javax.swing.JLabel();
        jTextField8 = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jLabel2.setText("Tìm kiếm Theo Tên Khách Hàng:");

        jButton1.setText("Tìm");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "OrderID", "UserID", "Tên Khách Hàng", "Ngày Đặt Hàng", "Tổng Hóa Đơn", "CouponID", "Phương Thức thanh toán", "Trạng Thái Đơn Hàng", "Địa Chỉ giao hàng", ""
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jTable1);
        if (jTable1.getColumnModel().getColumnCount() > 0) {
            jTable1.getColumnModel().getColumn(1).setResizable(false);
            jTable1.getColumnModel().getColumn(9).setResizable(false);
        }

        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            @Override
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                if (evt.getClickCount() == 2 && jTable1.getSelectedRow() != -1) {
                    int row = jTable1.getSelectedRow();
                    // Lấy Order từ danh sách hiện tại (orderList hoặc từ model)
                    int orderId = (int) jTable1.getValueAt(row, 0); // Giả sở cột 0 là OrderID
                    Order order = orderDAO.selectById(orderId);
                    if (order != null) {
                        setForm(order);
                        jTabbedPane1.setSelectedIndex(1); // Chuyển sang tab Chỉnh sửa
                    }
                }
            }
        });

        jButton6.setText("Chọn mục");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        jButton7.setText("Xóa mục đã chọn");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        jButton8.setText("Bỏ chọn mục");
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });

        jLabel12.setText("Tìm kiếm Theo Mã Hóa Đơn:");

        jButton9.setText("Tìm");
        jButton9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton9ActionPerformed(evt);
            }
        });

        jLabel13.setText("Tìm kiếm Theo Trạng Thái:");

        jButton10.setText("Tìm");
        jComboBox3.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jComboBox3ItemStateChanged(evt);
            }
        });

        jLabel14.setText("Từ Ngày");

        jLabel15.setText("Đến Ngày");

        jButton11.setText("Tìm");
        jComboBox2.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jComboBox2ItemStateChanged(evt);
            }
        });

        jComboBox2.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Tất Cả", "Hôm Nay", "Tuần Này", "Tháng Này", "Qúy Này", "Năm Nay" }));

        jComboBox3.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "All", "Pending", "Processing", "Shipped", "Completed", "Cancelled" }));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(150, 150, 150)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel12)
                                    .addComponent(jLabel13))
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGap(65, 65, 65)
                                        .addComponent(jComboBox3, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(12, 12, 12)
                                        .addComponent(jButton10))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                        .addGap(40, 40, 40)
                                        .addComponent(jTextField9, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(jButton9))))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton1))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTextField11, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel15, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTextField12, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(47, 47, 47)
                                .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton11)))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1)))
                .addContainerGap())
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(107, 107, 107)
                .addComponent(jButton6)
                .addGap(51, 51, 51)
                .addComponent(jButton7)
                .addGap(52, 52, 52)
                .addComponent(jButton8)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(jButton1))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel12)
                    .addComponent(jTextField9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton9))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel13)
                    .addComponent(jButton10)
                    .addComponent(jComboBox3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(26, 26, 26)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel14)
                    .addComponent(jTextField11, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel15)
                    .addComponent(jTextField12, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton11)
                    .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 294, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton6)
                    .addComponent(jButton7)
                    .addComponent(jButton8))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Danh mục", jPanel1);

        jLabel11.setText("CouponID:");

        jLabel8.setText("OrderDate:");

        jLabel9.setText("UserID:");

        jLabel10.setText("TotalAmount:");

        jButton2.setText("Thêm");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("Cập nhật");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setText("Xóa");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jLabel6.setText("OrderID:");

        jButton5.setText("Làm mới");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jLabel4.setText("PaymentMethod:");

        jLabel5.setText("OrderStatus:");

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Pending", "Processing", "Shipped", "Completed", "Cancelled" }));

        jLabel7.setText("DeliveryAddressID:");

        lblTimeRange = new javax.swing.JLabel();
        jPanel1.add(lblTimeRange);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jButton2)
                        .addGap(33, 33, 33)
                        .addComponent(jButton3)
                        .addGap(31, 31, 31)
                        .addComponent(jButton4)
                        .addGap(18, 18, 18)
                        .addComponent(jButton5)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel2Layout.createSequentialGroup()
                                .addComponent(jLabel5)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jComboBox1, 0, 264, Short.MAX_VALUE)
                                .addGap(34, 34, 34)
                                .addComponent(jLabel7)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTextField8, javax.swing.GroupLayout.PREFERRED_SIZE, 202, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel2Layout.createSequentialGroup()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addComponent(jLabel8)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jTextField3, javax.swing.GroupLayout.DEFAULT_SIZE, 193, Short.MAX_VALUE))
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel9)
                                            .addComponent(jLabel6))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(jTextField2, javax.swing.GroupLayout.DEFAULT_SIZE, 201, Short.MAX_VALUE)
                                            .addComponent(jTextField4))))
                                .addGap(40, 40, 40)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addComponent(jLabel4)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(jTextField7, javax.swing.GroupLayout.PREFERRED_SIZE, 204, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addComponent(jLabel10)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jTextField5, javax.swing.GroupLayout.PREFERRED_SIZE, 216, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addComponent(jLabel11)
                                        .addGap(18, 18, 18)
                                        .addComponent(jTextField6, javax.swing.GroupLayout.PREFERRED_SIZE, 239, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                        .addContainerGap(187, Short.MAX_VALUE))))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel10)
                    .addComponent(jTextField5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(20, 20, 20)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel11)
                    .addComponent(jTextField6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(17, 17, 17)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4)
                    .addComponent(jTextField7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7)
                    .addComponent(jTextField8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(33, 33, 33)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton2)
                    .addComponent(jButton3)
                    .addComponent(jButton4)
                    .addComponent(jButton5))
                .addContainerGap(308, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Chỉnh sửa", jPanel2);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 800, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
this.open();        // TODO add your handling code here:
    }//GEN-LAST:event_formWindowOpened

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
         this.create();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
this.update();        // TODO add your handling code here:
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
this.delete();        // TODO add your handling code here:
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
this.clear();        // TODO add your handling code here:
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
 this.edit();        // TODO add your handling code here:
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
this.deleteCheckedItems();        // TODO add your handling code here:
    }//GEN-LAST:event_jButton7ActionPerformed

    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8ActionPerformed
this. uncheckAll();        // TODO add your handling code here:
    }//GEN-LAST:event_jButton8ActionPerformed

    // === Sự kiện nút trên giao diện ===





    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) { // Tìm kiếm theo tên khách hàng
        String keyword = jTextField1.getText().trim();
        List<Order> result = new ArrayList<>();
        if (!keyword.isEmpty()) {
            List<User> users = poly.util.XQuery.getBeanList(User.class, "SELECT * FROM Users WHERE FullName LIKE ?", "%" + keyword + "%");
            for (User u : users) {
                result.addAll(orderDAO.selectByUserId(u.getUserId()));
            }
        }
        fillToTableWithList(result);
    }
    private void jButton9ActionPerformed(java.awt.event.ActionEvent evt) { // Tìm theo mã hóa đơn
        String keyword = jTextField9.getText().trim();
        List<Order> result;
        if (keyword.isEmpty()) {
            result = orderDAO.selectAll();
        } else {
            result = new ArrayList<>();
            try {
                int orderId = Integer.parseInt(keyword);
                Order o = orderDAO.selectById(orderId);
                if (o != null) result.add(o);
            } catch (NumberFormatException e) {
                // Nếu nhập không phải số, không tìm thấy
            }
        }
        fillToTableWithList(result);
    }
    private void jComboBox3ItemStateChanged(java.awt.event.ItemEvent evt) { // Trạng thái
        if (evt.getStateChange() == java.awt.event.ItemEvent.SELECTED) {
            String status = (String) jComboBox3.getSelectedItem();
            List<Order> result;
            if ("All".equals(status)) {
                result = orderDAO.selectAll();
            } else {
                result = selectByStatus(status);
            }
            fillToTableWithList(result);
        }
    }
    private void jComboBox2ItemStateChanged(java.awt.event.ItemEvent evt) { // Thời gian
        if (evt.getStateChange() == java.awt.event.ItemEvent.SELECTED) {
            String period = (String) jComboBox2.getSelectedItem();
            LocalDateTime from = null, to = null;
            LocalDate today = LocalDate.now();
            DateTimeFormatter fmt = DateTimeFormatter.ofPattern("dd/MM/yyyy");
            switch (period) {
                case "Tất Cả":
                    from = LocalDateTime.MIN;
                    to = LocalDateTime.MAX;
                    lblTimeRange.setText("");
                    jTextField11.setText("");
                    jTextField12.setText("");
                    break;
                case "Hôm Nay":
                    from = today.atStartOfDay();
                    to = today.atTime(LocalTime.MAX);
                    lblTimeRange.setText(today.format(fmt));
                    jTextField11.setText(today.format(fmt));
                    jTextField12.setText(today.format(fmt));
                    break;
                case "Tuần Này": {
                    LocalDate firstDay = today.minusDays(today.getDayOfWeek().getValue() - 1);
                    LocalDate lastDay = firstDay.plusDays(6);
                    from = firstDay.atStartOfDay();
                    to = lastDay.atTime(LocalTime.MAX);
                    lblTimeRange.setText(firstDay.format(fmt) + " - " + lastDay.format(fmt));
                    jTextField11.setText(firstDay.format(fmt));
                    jTextField12.setText(lastDay.format(fmt));
                    break;
                }
                case "Tháng Này": {
                    LocalDate firstDay = today.withDayOfMonth(1);
                    LocalDate lastDay = today.withDayOfMonth(today.lengthOfMonth());
                    from = firstDay.atStartOfDay();
                    to = lastDay.atTime(LocalTime.MAX);
                    lblTimeRange.setText(firstDay.format(fmt) + " - " + lastDay.format(fmt));
                    jTextField11.setText(firstDay.format(fmt));
                    jTextField12.setText(lastDay.format(fmt));
                    break;
                }
                case "Qúy Này": {
                    int month = today.getMonthValue();
                    int quarter = (month - 1) / 3 + 1;
                    LocalDate firstDay = LocalDate.of(today.getYear(), (quarter - 1) * 3 + 1, 1);
                    LocalDate lastDay = firstDay.plusMonths(2).withDayOfMonth(firstDay.plusMonths(2).lengthOfMonth());
                    from = firstDay.atStartOfDay();
                    to = lastDay.atTime(LocalTime.MAX);
                    lblTimeRange.setText(firstDay.format(fmt) + " - " + lastDay.format(fmt));
                    jTextField11.setText(firstDay.format(fmt));
                    jTextField12.setText(lastDay.format(fmt));
                    break;
                }
                case "Năm Nay": {
                    LocalDate firstDay = today.withDayOfYear(1);
                    LocalDate lastDay = today.withDayOfYear(today.lengthOfYear());
                    from = firstDay.atStartOfDay();
                    to = lastDay.atTime(LocalTime.MAX);
                    lblTimeRange.setText(firstDay.format(fmt) + " - " + lastDay.format(fmt));
                    jTextField11.setText(firstDay.format(fmt));
                    jTextField12.setText(lastDay.format(fmt));
                    break;
                }
            }
            List<Order> result = selectByDateRange(from, to);
            fillToTableWithList(result);
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(QLDonHang.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(QLDonHang.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(QLDonHang.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(QLDonHang.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                QLDonHang dialog = new QLDonHang(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton10;
    private javax.swing.JButton jButton11;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JButton jButton9;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JComboBox<String> jComboBox2;
    private javax.swing.JComboBox<String> jComboBox3;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField11;
    private javax.swing.JTextField jTextField12;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JTextField jTextField4;
    private javax.swing.JTextField jTextField5;
    private javax.swing.JTextField jTextField6;
    private javax.swing.JTextField jTextField7;
    private javax.swing.JTextField jTextField8;
    private javax.swing.JTextField jTextField9;
    // End of variables declaration//GEN-END:variables

    // === CRUD & UI Methods ===
    @Override
    public void open() {
        fillToTable();
        clear();
        setEditable(true);
        setLocationRelativeTo(null);
        setVisible(true);
    }

    @Override
    public void fillToTable() {
        orderList = orderDAO.selectAll();
        fillToTableWithList(orderList);
    }

    @Override
    public void setForm(poly.entity.Order o) {
        jTextField2.setText(o.getOrderId() != null ? o.getOrderId().toString() : "");
        jTextField4.setText(o.getUserId() != null ? o.getUserId().toString() : "");
        jTextField3.setText(o.getOrderDate() != null ? o.getOrderDate().toString() : "");
        jTextField5.setText(o.getTotalAmount() != null ? o.getTotalAmount().toString() : "");
        jTextField6.setText(o.getCouponId() != null ? o.getCouponId() : "");
        jTextField7.setText(o.getPaymentMethod() != null ? o.getPaymentMethod() : "");
        jComboBox1.setSelectedItem(o.getOrderStatus() != null ? o.getOrderStatus() : "Pending");
        jTextField8.setText(o.getDeliveryAddressId() != null ? o.getDeliveryAddressId().toString() : "");
    }

    @Override
    public poly.entity.Order getForm() {
        poly.entity.Order o = new poly.entity.Order();
        try { o.setOrderId(jTextField2.getText().isEmpty() ? null : Integer.parseInt(jTextField2.getText())); } catch(Exception e) { o.setOrderId(null); }
        try { o.setUserId(jTextField4.getText().isEmpty() ? null : Integer.parseInt(jTextField4.getText())); } catch(Exception e) { o.setUserId(null); }
        try { o.setOrderDate(jTextField3.getText().isEmpty() ? null : java.time.LocalDateTime.parse(jTextField3.getText())); } catch(Exception e) { o.setOrderDate(null); }
        try { o.setTotalAmount(jTextField5.getText().isEmpty() ? null : new java.math.BigDecimal(jTextField5.getText())); } catch(Exception e) { o.setTotalAmount(null); }
        o.setCouponId(jTextField6.getText());
        o.setPaymentMethod(jTextField7.getText());
        o.setOrderStatus((String) jComboBox1.getSelectedItem());
        try { o.setDeliveryAddressId(jTextField8.getText().isEmpty() ? null : Integer.parseInt(jTextField8.getText())); } catch(Exception e) { o.setDeliveryAddressId(null); }
        o.setIsActive(true);
        return o;
    }

    @Override
    public void create() {
        poly.entity.Order o = getForm();
        orderDAO.insert(o);
        fillToTable();
        clear();
        javax.swing.JOptionPane.showMessageDialog(this, "Thêm hóa đơn thành công!");
    }

    @Override
    public void update() {
        poly.entity.Order o = getForm();
        orderDAO.update(o);
        fillToTable();
        javax.swing.JOptionPane.showMessageDialog(this, "Cập nhật hóa đơn thành công!");
    }

    @Override
    public void delete() {
        String id = jTextField2.getText();
        if (id.isEmpty()) return;
        int confirm = javax.swing.JOptionPane.showConfirmDialog(this, "Bạn có chắc muốn xóa hóa đơn này?", "Xác nhận", javax.swing.JOptionPane.YES_NO_OPTION);
        if (confirm != javax.swing.JOptionPane.YES_OPTION) return;
        orderDAO.delete(Integer.parseInt(id));
        fillToTable();
        clear();
        javax.swing.JOptionPane.showMessageDialog(this, "Xóa hóa đơn thành công!");
    }

    @Override
    public void clear() {
        jTextField2.setText("");
        jTextField4.setText("");
        jTextField3.setText("");
        jTextField5.setText("");
        jTextField6.setText("");
        jTextField7.setText("");
        jComboBox1.setSelectedIndex(0);
        jTextField8.setText("");
        currentRow = -1;
    }

    @Override
    public void setEditable(boolean editable) {
        jTextField2.setEditable(editable);
        jTextField4.setEditable(editable);
        jTextField3.setEditable(editable);
        jTextField5.setEditable(editable);
        jTextField6.setEditable(editable);
        jTextField7.setEditable(editable);
        jComboBox1.setEnabled(editable);
        jTextField8.setEditable(editable);
    }

    @Override
    public void edit() {
        int row = jTable1.getSelectedRow();
        if (row >= 0) {
            Integer orderId = (Integer) jTable1.getValueAt(row, 0);
            poly.entity.Order o = orderDAO.selectById(orderId);
            if (o != null) {
                setForm(o);
                currentRow = row;
            }
        }
    }

    @Override
    public void moveFirst() {
        if (orderList.isEmpty()) return;
        currentRow = 0;
        setForm(orderList.get(currentRow));
        jTable1.setRowSelectionInterval(currentRow, currentRow);
    }

    @Override
    public void movePrevious() {
        if (orderList.isEmpty() || currentRow <= 0) return;
        currentRow--;
        setForm(orderList.get(currentRow));
        jTable1.setRowSelectionInterval(currentRow, currentRow);
    }

    @Override
    public void moveNext() {
        if (orderList.isEmpty() || currentRow >= orderList.size() - 1) return;
        currentRow++;
        setForm(orderList.get(currentRow));
        jTable1.setRowSelectionInterval(currentRow, currentRow);
    }

    @Override
    public void moveLast() {
        if (orderList.isEmpty()) return;
        currentRow = orderList.size() - 1;
        setForm(orderList.get(currentRow));
        jTable1.setRowSelectionInterval(currentRow, currentRow);
    }

    @Override
    public void moveTo(int rowIndex) {
        if (orderList.isEmpty() || rowIndex < 0 || rowIndex >= orderList.size()) return;
        currentRow = rowIndex;
        setForm(orderList.get(currentRow));
        jTable1.setRowSelectionInterval(currentRow, currentRow);
    }

    @Override
    public void checkAll() {
        javax.swing.table.DefaultTableModel model = (javax.swing.table.DefaultTableModel) jTable1.getModel();
        for (int i = 0; i < model.getRowCount(); i++) {
            model.setValueAt(true, i, 9);
        }
    }

    @Override
    public void uncheckAll() {
        javax.swing.table.DefaultTableModel model = (javax.swing.table.DefaultTableModel) jTable1.getModel();
        for (int i = 0; i < model.getRowCount(); i++) {
            model.setValueAt(false, i, 9);
        }
    }

    @Override
    public void deleteCheckedItems() {
        javax.swing.table.DefaultTableModel model = (javax.swing.table.DefaultTableModel) jTable1.getModel();
        java.util.List<Integer> idsToDelete = new java.util.ArrayList<>();
        for (int i = 0; i < model.getRowCount(); i++) {
            Boolean checked = (Boolean) model.getValueAt(i, 9);
            if (checked != null && checked) {
                idsToDelete.add((Integer) model.getValueAt(i, 0));
            }
        }
        for (Integer id : idsToDelete) {
            orderDAO.delete(id);
        }
        fillToTable();
        javax.swing.JOptionPane.showMessageDialog(this, "Đã xóa các hóa đơn được chọn!");
    }

    @Override
    public List<Order> selectByStatus(String status) {
        return orderDAO.selectByStatus(status);
    }

    @Override
    public List<Order> selectByUserId(Integer userId) {
        return orderDAO.selectByUserId(userId);
    }

    @Override
    public List<Order> selectByDateRange(LocalDateTime startDate, LocalDateTime endDate) {
        return orderDAO.selectByDateRange(startDate, endDate);
    }

    @Override
    public List<Order> selectByPaymentMethod(String paymentMethod) {
        return orderDAO.selectByPaymentMethod(paymentMethod);
    }

    @Override
    public List<Order> searchByKeyword(String keyword) {
        return orderDAO.searchByKeyword(keyword);
    }

    @Override
    public void updateOrderStatus(Integer orderId, String status) {
        orderDAO.updateOrderStatus(orderId, status);
    }

    @Override
    public BigDecimal getTotalRevenue(LocalDateTime startDate, LocalDateTime endDate) {
        return orderDAO.getTotalRevenue(startDate, endDate);
    }

    @Override
    public int getOrderCountByStatus(String status) {
        return orderDAO.getOrderCountByStatus(status);
    }

    @Override
    public List<OrderDetail> getOrderDetails(Integer orderId) {
        return orderDAO.getOrderDetails(orderId);
    }

    @Override
    public void insertOrderDetail(OrderDetail orderDetail) {
        orderDAO.insertOrderDetail(orderDetail);
    }

    @Override
    public void deleteOrderDetail(Integer orderDetailId) {
        orderDAO.deleteOrderDetail(orderDetailId);
    }

    @Override
    public List<Order> selectOrdersWithCustomerInfo() {
        return orderDAO.selectOrdersWithCustomerInfo();
    }

   

    // Hàm phụ để đổ danh sách Order vào bảng (không phải CRUD, chỉ hỗ trợ UI)
    private void fillToTableWithList(List<Order> list) {
        javax.swing.table.DefaultTableModel model = (javax.swing.table.DefaultTableModel) jTable1.getModel();
        model.setRowCount(0);
        for (Order o : list) {
            String tenKhachHang = "";
            String diaChiGiaoHang = "";
            // Lấy tên khách hàng
            User user = userDAO.selectById(o.getUserId());
            if (user != null) tenKhachHang = user.getFullName();
            // Lấy địa chỉ giao hàng
            Address address = XQuery.getSingleBean(Address.class, "SELECT * FROM Addresses WHERE AddressId=?", o.getDeliveryAddressId());
            if (address != null) diaChiGiaoHang = address.getAddressLine1() + ", " + address.getCity() + ", " + address.getCountry();
            model.addRow(new Object[]{
                o.getOrderId(),
                o.getUserId(),
                tenKhachHang,
                o.getOrderDate(),
                o.getTotalAmount(),
                o.getCouponId(),
                o.getPaymentMethod(),
                o.getOrderStatus(),
                diaChiGiaoHang,
                false
            });
        }
        currentRow = -1;
    }
}

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JDialog.java to edit this template
 */
package poly.ui;

import poly.controller.Dangkicontroller;

/**
 *
 * @author Nghia
 */
public class DKyTaiKhoanJDialog extends javax.swing.JDialog implements Dangkicontroller{

    /**
     * Creates new form DKyTaiKhoanJDialog
     */
    public DKyTaiKhoanJDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        // Thêm tooltip cho các trường bắt buộc
        addRequiredFieldIndicators();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSeparator1 = new javax.swing.JSeparator();
        jLabel2 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jTextField2 = new javax.swing.JTextField();
        jPasswordField1 = new javax.swing.JPasswordField();
        jPasswordField2 = new javax.swing.JPasswordField();
        jTextField3 = new javax.swing.JTextField();
        jTextField4 = new javax.swing.JTextField();
        jTextField5 = new javax.swing.JTextField();
        jButton2 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jSeparator1.setBackground(new java.awt.Color(0, 0, 0));
        jSeparator1.setForeground(new java.awt.Color(0, 0, 0));
        jSeparator1.setAlignmentX(6.0F);
        jSeparator1.setAlignmentY(6.0F);

        jLabel2.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        jLabel2.setText("Đăng Ký Khách Hàng");

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 15)); // NOI18N
        jLabel1.setText("Họ Tên: *");

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 15)); // NOI18N
        jLabel3.setText("Tên Đăng Nhập *");

        jLabel4.setFont(new java.awt.Font("Segoe UI", 1, 15)); // NOI18N
        jLabel4.setText("Mật Khẩu: *");

        jLabel5.setFont(new java.awt.Font("Segoe UI", 1, 15)); // NOI18N
        jLabel5.setText("Xác nhận mật khẩu *");

        jLabel6.setFont(new java.awt.Font("Segoe UI", 1, 15)); // NOI18N
        jLabel6.setText("Email: *");

        jLabel7.setFont(new java.awt.Font("Segoe UI", 1, 15)); // NOI18N
        jLabel7.setText("Số Điện Thoại: *");

        jLabel8.setFont(new java.awt.Font("Segoe UI", 1, 15)); // NOI18N
        jLabel8.setText("Địa Chỉ: *");

        jButton2.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jButton2.setText("Đăng Ký");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton4.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jButton4.setText("Đăng Nhập");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel5)
                            .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4)
                            .addComponent(jLabel7))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jPasswordField2)
                            .addComponent(jTextField3)
                            .addComponent(jTextField4)
                            .addComponent(jTextField5)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jPasswordField1)
                            .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 322, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(120, 120, 120)
                                .addComponent(jLabel2))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(80, 80, 80)
                                    .addComponent(jTextField1))
                                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 463, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 17, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(57, 57, 57))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(jPasswordField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(jPasswordField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(28, 28, 28)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(jTextField5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(40, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
this.dangki();        // TODO add your handling code here:
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        this.setVisible(false); // Ẩn dialog đăng ký
        DNhapJDialog loginDialog = new DNhapJDialog((java.awt.Frame) this.getParent(), true);
        loginDialog.setLocationRelativeTo(this);
        loginDialog.setVisible(true);
        this.dispose(); // Đóng dialog đăng ký sau khi mở đăng nhập
    }//GEN-LAST:event_jButton4ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DKyTaiKhoanJDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DKyTaiKhoanJDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DKyTaiKhoanJDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DKyTaiKhoanJDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                DKyTaiKhoanJDialog dialog = new DKyTaiKhoanJDialog(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPasswordField jPasswordField1;
    private javax.swing.JPasswordField jPasswordField2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JTextField jTextField4;
    private javax.swing.JTextField jTextField5;
    // End of variables declaration//GEN-END:variables

    @Override
    public void open() {
        this.setLocationRelativeTo(null);
        // Thêm dấu * cho các trường bắt buộc
        addRequiredFieldIndicators();
    }
    
    /**
     * Thêm dấu * cho các trường bắt buộc
     */
    private void addRequiredFieldIndicators() {
        poly.util.RequiredFieldUtil.addRequiredIndicator(jLabel1, "Họ Tên");
        poly.util.RequiredFieldUtil.addRequiredIndicator(jLabel3, "Tên Đăng Nhập");
        poly.util.RequiredFieldUtil.addRequiredIndicator(jLabel4, "Mật Khẩu");
        poly.util.RequiredFieldUtil.addRequiredIndicator(jLabel5, "Xác nhận mật khẩu");
        poly.util.RequiredFieldUtil.addRequiredIndicator(jLabel6, "Email");
        
        // Thêm tooltip cho các trường
        poly.util.RequiredFieldUtil.addTooltip(jTextField1, "Nhập họ tên đầy đủ (ít nhất 2 ký tự)");
        poly.util.RequiredFieldUtil.addTooltip(jTextField2, "Nhập tên đăng nhập (ít nhất 3 ký tự, chỉ chứa chữ cái, số và dấu gạch dưới)");
        poly.util.RequiredFieldUtil.addTooltip(jPasswordField1, "Nhập mật khẩu (ít nhất 6 ký tự)");
        poly.util.RequiredFieldUtil.addTooltip(jPasswordField2, "Nhập lại mật khẩu để xác nhận");
        poly.util.RequiredFieldUtil.addTooltip(jTextField3, "Nhập email hợp lệ");
        poly.util.RequiredFieldUtil.addTooltip(jTextField4, "Nhập số điện thoại (VD: 0123456789)");
        poly.util.RequiredFieldUtil.addTooltip(jTextField5, "Nhập địa chỉ (không bắt buộc)");
    }

    @Override
    public void dangki() {
        String fullName = jTextField1.getText().trim();
        String username = jTextField2.getText().trim();
        String password = new String(jPasswordField1.getPassword());
        String confirmPassword = new String(jPasswordField2.getPassword());
        String email = jTextField3.getText().trim();
        String phone = jTextField4.getText().trim();
        String address = jTextField5.getText().trim();

        // Validate chi tiết hơn
        String validationError = validateRegistrationData(fullName, username, password, confirmPassword, email, phone);
        if (validationError != null) {
            javax.swing.JOptionPane.showMessageDialog(this, validationError, "Lỗi", javax.swing.JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Tạo user entity
        poly.entity.User user = new poly.entity.User();
        user.setFullName(fullName);
        user.setUsername(username);
        user.setPasswordHash(poly.util.PasswordUtil.hashPassword(password)); // Hash password
        user.setEmail(email);
        user.setPhone(phone);
        user.setAddress(address);
        user.setRole(false); // Mặc định là khách hàng
        user.setIsActive(true);
        user.setCreatedDate(java.time.LocalDateTime.now());

        // Thêm vào database
        try {
            poly.dao.impl.UserDAOImpl userDAO = new poly.dao.impl.UserDAOImpl();
            
            // Kiểm tra username đã tồn tại
            if (userDAO.selectByUsername(username) != null) {
                javax.swing.JOptionPane.showMessageDialog(this, "Tên đăng nhập đã tồn tại! Vui lòng chọn tên khác.", "Lỗi", javax.swing.JOptionPane.ERROR_MESSAGE);
                jTextField2.requestFocus();
                return;
            }
            
            // Kiểm tra email đã tồn tại
            if (checkEmailExists(email)) {
                javax.swing.JOptionPane.showMessageDialog(this, "Email đã được sử dụng! Vui lòng sử dụng email khác.", "Lỗi", javax.swing.JOptionPane.ERROR_MESSAGE);
                jTextField3.requestFocus();
                return;
            }
            
            userDAO.insert(user);
            javax.swing.JOptionPane.showMessageDialog(this, "Đăng ký thành công! Vui lòng đăng nhập.", "Thông báo", javax.swing.JOptionPane.INFORMATION_MESSAGE);
            this.dispose(); // Đóng dialog sau khi đăng ký thành công
        } catch (Exception ex) {
            javax.swing.JOptionPane.showMessageDialog(this, "Đăng ký thất bại: " + ex.getMessage(), "Lỗi", javax.swing.JOptionPane.ERROR_MESSAGE);
        }
    }
    
    /**
     * Validate dữ liệu đăng ký
     */
    private String validateRegistrationData(String fullName, String username, String password, 
                                          String confirmPassword, String email, String phone) {
        StringBuilder errorBuilder = poly.util.RequiredFieldUtil.createErrorMessageBuilder();
        
        // Kiểm tra họ tên
        String fullNameError = poly.util.RequiredFieldUtil.validateRequiredField(fullName, "Họ tên", 2);
        if (fullNameError != null) {
            poly.util.RequiredFieldUtil.addError(errorBuilder, fullNameError);
        }
        
        // Kiểm tra tên đăng nhập
        String usernameError = poly.util.RequiredFieldUtil.validateRequiredField(username, "Tên đăng nhập", 3);
        if (usernameError != null) {
            poly.util.RequiredFieldUtil.addError(errorBuilder, usernameError);
        } else if (!poly.util.RequiredFieldUtil.isValidUsername(username)) {
            poly.util.RequiredFieldUtil.addError(errorBuilder, "❌ Tên đăng nhập chỉ được chứa chữ cái, số và dấu gạch dưới!");
        }
        
        // Kiểm tra mật khẩu
        String passwordError = poly.util.RequiredFieldUtil.validateRequiredField(password, "Mật khẩu", 6);
        if (passwordError != null) {
            poly.util.RequiredFieldUtil.addError(errorBuilder, passwordError);
        }
        
        // Kiểm tra xác nhận mật khẩu
        if (confirmPassword.isEmpty()) {
            poly.util.RequiredFieldUtil.addError(errorBuilder, "❌ Vui lòng xác nhận mật khẩu!");
        } else if (!password.equals(confirmPassword)) {
            poly.util.RequiredFieldUtil.addError(errorBuilder, "❌ Mật khẩu xác nhận không khớp!");
        }
        
        // Kiểm tra email
        if (email.isEmpty()) {
            poly.util.RequiredFieldUtil.addError(errorBuilder, "❌ Email không được để trống!");
        } else if (!poly.util.RequiredFieldUtil.isValidEmail(email)) {
            poly.util.RequiredFieldUtil.addError(errorBuilder, "❌ Email không đúng định dạng!");
        }
        
        // Kiểm tra số điện thoại (nếu có nhập)
        if (!phone.isEmpty() && !poly.util.RequiredFieldUtil.isValidVietnamesePhone(phone)) {
            poly.util.RequiredFieldUtil.addError(errorBuilder, "❌ Số điện thoại không đúng định dạng!");
        }
        
        return errorBuilder.length() > 0 ? errorBuilder.toString() : null;
    }
    
    /**
     * Kiểm tra email đã tồn tại
     */
    private boolean checkEmailExists(String email) {
        try {
            String sql = "SELECT COUNT(*) FROM Users WHERE Email = ?";
            java.sql.ResultSet rs = poly.util.XJdbc.executeQuery(sql, email);
            if (rs.next()) {
                return rs.getInt(1) > 0;
            }
        } catch (Exception e) {
            System.err.println("Lỗi kiểm tra email: " + e.getMessage());
        }
        return false;
    }
    

    @Override
    public void exit() {
        Dangkicontroller.super.exit(); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/OverriddenMethodBody
    }
}

package poly.util;

import poly.entity.OrderDetail;
import poly.entity.OrderRequestItem;
import java.sql.ResultSet;
import java.util.List;
import javax.swing.JOptionPane;

/**
 * Utility class ƒë·ªÉ x·ª≠ l√Ω vi·ªác c·∫≠p nh·∫≠t kho khi x√°c nh·∫≠n ƒë∆°n h√†ng
 * @author Assistant
 */
public class InventoryUpdateUtil {
    
    /**
     * Ki·ªÉm tra t·ªìn kho tr∆∞·ªõc khi x√°c nh·∫≠n ƒë∆°n h√†ng
     * @param orderId ID ƒë∆°n h√†ng
     * @return true n·∫øu ƒë·ªß h√†ng, false n·∫øu thi·∫øu h√†ng
     */
    public static boolean checkInventoryBeforeConfirmation(Integer orderId) {
        try {
            // L·∫•y chi ti·∫øt ƒë∆°n h√†ng
            String selectOrderItemsSql = "SELECT od.ProductID, od.Quantity, p.ProductName, p.Quantity as AvailableQuantity " +
                                       "FROM OrderDetails od " +
                                       "JOIN Products p ON od.ProductID = p.ProductID " +
                                       "WHERE od.OrderID = ?";
            
            ResultSet rs = XJdbc.executeQuery(selectOrderItemsSql, orderId);
            
            StringBuilder insufficientItems = new StringBuilder();
            insufficientItems.append("‚ö†Ô∏è KI·ªÇM TRA T·ªíN KHO TR∆Ø·ªöC KHI X√ÅC NH·∫¨N ƒê∆†N H√ÄNG\n\n");
            
            boolean hasInsufficientItems = false;
            
            while (rs.next()) {
                String productId = rs.getString("ProductID");
                String productName = rs.getString("ProductName");
                int requestedQuantity = rs.getInt("Quantity");
                int availableQuantity = rs.getInt("AvailableQuantity");
                
                if (requestedQuantity > availableQuantity) {
                    hasInsufficientItems = true;
                    insufficientItems.append("‚Ä¢ ").append(productName)
                            .append(": C·∫ßn ").append(requestedQuantity)
                            .append(", C√≥ ").append(availableQuantity)
                            .append(" ‚ùå\n");
                }
            }
            rs.close();
            
            if (hasInsufficientItems) {
                insufficientItems.append("\n‚ùå Kh√¥ng th·ªÉ x√°c nh·∫≠n ƒë∆°n h√†ng do thi·∫øu h√†ng trong kho!");
                JOptionPane.showMessageDialog(null, 
                    insufficientItems.toString(),
                    "Thi·∫øu h√†ng trong kho", 
                    JOptionPane.WARNING_MESSAGE);
                return false;
            }
            
            return true;
            
        } catch (Exception e) {
            System.err.println("L·ªói khi ki·ªÉm tra t·ªìn kho: " + e.getMessage());
            JOptionPane.showMessageDialog(null, 
                "‚ùå L·ªói khi ki·ªÉm tra t·ªìn kho!\nL·ªói: " + e.getMessage(),
                "L·ªói", 
                JOptionPane.ERROR_MESSAGE);
            return false;
        }
    }
    
    /**
     * Tr·ª´ kho sau khi x√°c nh·∫≠n ƒë∆°n h√†ng
     * @param orderId ID ƒë∆°n h√†ng
     * @return true n·∫øu th√†nh c√¥ng, false n·∫øu th·∫•t b·∫°i
     */
    public static boolean updateInventoryAfterConfirmation(Integer orderId) {
        try {
            // L·∫•y chi ti·∫øt ƒë∆°n h√†ng
            String selectOrderItemsSql = "SELECT od.ProductID, od.Quantity, p.ProductName " +
                                       "FROM OrderDetails od " +
                                       "JOIN Products p ON od.ProductID = p.ProductID " +
                                       "WHERE od.OrderID = ?";
            
            ResultSet rs = XJdbc.executeQuery(selectOrderItemsSql, orderId);
            
            StringBuilder updateLog = new StringBuilder();
            updateLog.append("üì¶ C·∫¨P NH·∫¨T KHO SAU X√ÅC NH·∫¨N ƒê∆†N H√ÄNG\n\n");
            updateLog.append("M√£ ƒë∆°n h√†ng: ").append(orderId).append("\n\n");
            
            while (rs.next()) {
                String productId = rs.getString("ProductID");
                String productName = rs.getString("ProductName");
                int quantity = rs.getInt("Quantity");
                
                // C·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng trong kho
                String updateSql = "UPDATE Products SET Quantity = Quantity - ? WHERE ProductID = ?";
                int updatedRows = XJdbc.executeUpdate(updateSql, quantity, productId);
                
                if (updatedRows > 0) {
                    // L·∫•y th√¥ng tin s·∫£n ph·∫©m sau khi c·∫≠p nh·∫≠t
                    String selectSql = "SELECT Quantity FROM Products WHERE ProductID = ?";
                    ResultSet rs2 = XJdbc.executeQuery(selectSql, productId);
                    
                    if (rs2.next()) {
                        int newQuantity = rs2.getInt("Quantity");
                        
                        updateLog.append("‚Ä¢ ").append(productName)
                                .append(": ƒê√£ tr·ª´ ").append(quantity)
                                .append(", C√≤n l·∫°i ").append(newQuantity)
                                .append(" ‚úÖ\n");
                        
                        System.out.println("‚úì ƒê√£ tr·ª´ kho: " + productName + " - " + quantity + " s·∫£n ph·∫©m");
                    }
                    rs2.close();
                } else {
                    updateLog.append("‚Ä¢ ").append(productName)
                            .append(": L·ªói c·∫≠p nh·∫≠t kho ‚ùå\n");
                    System.err.println("‚ùå L·ªói c·∫≠p nh·∫≠t kho cho s·∫£n ph·∫©m: " + productName);
                }
            }
            rs.close();
            
            System.out.println(updateLog.toString());
            return true;
            
        } catch (Exception e) {
            System.err.println("L·ªói khi c·∫≠p nh·∫≠t kho: " + e.getMessage());
            JOptionPane.showMessageDialog(null, 
                "‚ùå L·ªói khi c·∫≠p nh·∫≠t kho!\nL·ªói: " + e.getMessage(),
                "L·ªói", 
                JOptionPane.ERROR_MESSAGE);
            return false;
        }
    }
    
    /**
     * Tr·ª´ kho cho danh s√°ch OrderRequestItem (cho ƒë∆°n h√†ng m·ªõi)
     * @param items Danh s√°ch s·∫£n ph·∫©m c·∫ßn tr·ª´ kho
     * @return true n·∫øu th√†nh c√¥ng, false n·∫øu th·∫•t b·∫°i
     */
    public static boolean updateInventoryForOrderRequest(List<OrderRequestItem> items) {
        StringBuilder updateLog = new StringBuilder();
        updateLog.append("üì¶ C·∫¨P NH·∫¨T KHO SAU ƒê·∫∂T H√ÄNG\n\n");
        
        for (OrderRequestItem item : items) {
            try {
                // C·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng trong kho
                String updateSql = "UPDATE Products SET Quantity = Quantity - ? WHERE ProductID = ?";
                int updatedRows = XJdbc.executeUpdate(updateSql, item.getQuantity(), item.getProductId());
                
                if (updatedRows > 0) {
                    // L·∫•y th√¥ng tin s·∫£n ph·∫©m ƒë·ªÉ hi·ªÉn th·ªã
                    String selectSql = "SELECT ProductName, Quantity FROM Products WHERE ProductID = ?";
                    ResultSet rs = XJdbc.executeQuery(selectSql, item.getProductId());
                    
                    if (rs.next()) {
                        String productName = rs.getString("ProductName");
                        int newQuantity = rs.getInt("Quantity");
                        
                        updateLog.append("‚Ä¢ ").append(productName)
                                .append(": ƒê√£ tr·ª´ ").append(item.getQuantity())
                                .append(", C√≤n l·∫°i ").append(newQuantity)
                                .append(" ‚úÖ\n");
                        
                        System.out.println("‚úì ƒê√£ tr·ª´ kho: " + productName + " - " + item.getQuantity() + " s·∫£n ph·∫©m");
                    }
                    rs.close();
                } else {
                    updateLog.append("‚Ä¢ S·∫£n ph·∫©m ID ").append(item.getProductId())
                            .append(": L·ªói c·∫≠p nh·∫≠t kho ‚ùå\n");
                    System.err.println("‚ùå L·ªói c·∫≠p nh·∫≠t kho cho s·∫£n ph·∫©m ID: " + item.getProductId());
                }
                
            } catch (Exception e) {
                updateLog.append("‚Ä¢ S·∫£n ph·∫©m ID ").append(item.getProductId())
                        .append(": L·ªói c·∫≠p nh·∫≠t kho ‚ùå\n");
                System.err.println("L·ªói khi c·∫≠p nh·∫≠t kho cho s·∫£n ph·∫©m " + item.getProductId() + ": " + e.getMessage());
            }
        }
        
        System.out.println(updateLog.toString());
        return true;
    }
    
    /**
     * Ki·ªÉm tra t·ªìn kho cho danh s√°ch OrderRequestItem
     * @param items Danh s√°ch s·∫£n ph·∫©m c·∫ßn ki·ªÉm tra
     * @return true n·∫øu ƒë·ªß h√†ng, false n·∫øu thi·∫øu h√†ng
     */
    public static boolean checkInventoryForOrderRequest(List<OrderRequestItem> items) {
        StringBuilder insufficientItems = new StringBuilder();
        insufficientItems.append("‚ö†Ô∏è KI·ªÇM TRA T·ªíN KHO\n\n");
        
        boolean hasInsufficientItems = false;
        
        for (OrderRequestItem item : items) {
            try {
                // L·∫•y th√¥ng tin s·∫£n ph·∫©m t·ª´ database
                String sql = "SELECT ProductName, Quantity FROM Products WHERE ProductID = ?";
                ResultSet rs = XJdbc.executeQuery(sql, item.getProductId());
                
                if (rs.next()) {
                    String productName = rs.getString("ProductName");
                    int availableQuantity = rs.getInt("Quantity");
                    int requestedQuantity = item.getQuantity();
                    
                    if (requestedQuantity > availableQuantity) {
                        hasInsufficientItems = true;
                        insufficientItems.append("‚Ä¢ ").append(productName)
                                .append(": C·∫ßn ").append(requestedQuantity)
                                .append(", C√≥ ").append(availableQuantity)
                                .append(" ‚ùå\n");
                    }
                }
                rs.close();
            } catch (Exception e) {
                System.err.println("L·ªói khi ki·ªÉm tra t·ªìn kho cho s·∫£n ph·∫©m " + item.getProductId() + ": " + e.getMessage());
                hasInsufficientItems = true;
                insufficientItems.append("‚Ä¢ S·∫£n ph·∫©m ID ").append(item.getProductId())
                        .append(": L·ªói ki·ªÉm tra t·ªìn kho\n");
            }
        }
        
        if (hasInsufficientItems) {
            insufficientItems.append("\n‚ùå Kh√¥ng th·ªÉ ƒë·∫∑t h√†ng do thi·∫øu h√†ng trong kho!");
            JOptionPane.showMessageDialog(null, 
                insufficientItems.toString(),
                "Thi·∫øu h√†ng trong kho", 
                JOptionPane.WARNING_MESSAGE);
            return false;
        }
        
        return true;
    }
} 